<?php
// auto-generated by PropelCidesa
// date: 2017/02/13 06:41:38
?>
<?php

/**
 * autoPrenivpre actions.
 *
 * @package    Roraima
 * @subpackage autoPrenivpre 
 * @author     $Author: cramirez $ <desarrollo@cidesa.com.ve>
 * @version    SVN: $Id: actions.class.php 43817 2011-04-22 21:28:42Z cramirez $
 * @license    http://opensource.org/licenses/gpl-2.0.php GPLv2
 * @copyright  Copyright 2007, Cide S.A.
 */
class autoPrenivpreActions extends sfActions
{

  // variable donde se debe colocar el código de error generado en el validateEdit 
  // para que sea procesado por el handleErrorEdit.
  protected $coderr = -1;

  public function executeIndex()
  {
    return $this->forward('prenivpre', 'list');
  }

  /**
   * Función para incluir funcionalidades adicionales en el executeList.
   * Esta funcion debe ser reescrita en la clase que hereda.
   *
   */
  protected function listing()
  {     


  }

  /**
   * Función principal para el manejo de la accion list
   * del formulario.
   *
   */
  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->listing();



     // 15    // pager
    $this->pager = new sfPropelPager('Cpdefniv', 15);
    $c = new Criteria();
    $this->c ? $c=$this->c : '';
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('prenivpre', 'edit');
  }

  /**
   * Función principal para el manejo de la acción save
   * del formulario.
   *
   */
  public function executeSave()
  {

    return $this->forward('prenivpre', 'edit');

  }

  /**
   * Función para incluir funcionalidades adicionales en el executeEdit.
   * Esta funcion debe ser reescrita en la clase que hereda.
   *
   */
  protected function editing()
  {


  }

  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  public function executeEdit()
  {
    $this->params=array();
    $this->cpdefniv = $this->getCpdefnivOrCreate();

    $this->editing();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateCpdefnivFromRequest();

      if($this->saveCpdefniv($this->cpdefniv) ==-1){
        {$this->setFlash('notice', 'Your modifications have been saved');

         $id= $this->cpdefniv->getId();
         $this->SalvarBitacora($id ,'Guardo');}

        if ($this->getRequestParameter('save_and_add'))
        {
          return $this->redirect('prenivpre/create');
        }
        else if ($this->getRequestParameter('save_and_list'))
        {
          return $this->redirect('prenivpre/list');
        }
        else
        {
            return $this->redirect('prenivpre/edit?id='.$this->cpdefniv->getId());
        }

      }else{
        $this->labels = $this->getLabels();
      }

    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->cpdefniv = CpdefnivPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->cpdefniv);

    try
    {
      $this->deleteCpdefniv($this->cpdefniv);
      $id= $this->cpdefniv->getId();
      $this->SalvarBitacora($id ,'Elimino');
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'No se pudo borrar la registro seleccionado. Asegúrese de que no tiene ningún tipo de registros asociados.');
      return $this->forward('prenivpre', 'list');
    }


    return $this->forward('prenivpre', 'list');
  }

  /**
   * Función para manejar la captura de errores del negocio, tanto que se
   * produzcan por algún validator y por un valor false retornado por el validateEdit
   *
   */
  public function handleErrorEdit()
  {
    $this->params=array();
    $this->preExecute();
    $this->cpdefniv = $this->getCpdefnivOrCreate();
    $this->updateCpdefnivFromRequest();
	$this->updateError();
    $this->labels = $this->getLabels();
    if($this->getRequest()->getMethod() == sfRequest::POST)
    {
      if($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('',$err);
      }
    }
    return sfView::SUCCESS;
  }

  /**
   * Función para manejar de el salvado de registros del formulario.
   * cabe destacar que llama internamente a la función $this->saving
   * que es reescrita en la clase que hereda con el proceso que el usuario
   * necesite implementar.
   * Esta función saving siempre debe retornar un valor >=-1.
   *
   */
  protected function saveCpdefniv($cpdefniv)
  {

    // habilitar la siguiente línea si se usa grid
    //$grid=Herramientas::CargarDatosGrid($this,$this->obj);

    try {

      // Modificar la siguiente línea para llamar al método
      // correcto en la clase del negocio, ej:
      // $coderr = Compras::salvarAlmaujoc($caajuoc,$grid);

      // OJO ----> Eliminar esta linea al modificar este método
      $this->coderr = $this->saving($cpdefniv);


      if(is_array($this->coderr)){
        foreach ($this->coderr as $ERR){
          $err = Herramientas::obtenerMensajeError($ERR);
          $this->getRequest()->setError('',$err);
          $this->updateError();}
          return sfView::SUCCESS;
      }elseif($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('',$err);
        $this->updateError();
        return sfView::SUCCESS;
      }else
      return -1;

    } catch (Exception $ex) {

      $this->coderr = 0;
      $err = Herramientas::obtenerMensajeError($this->coderr);
      $this->getRequest()->setError('',$err);
      $this->updateError();
    return sfView::SUCCESS;
    }


  }

  /**
   * Función que debe ser reescrita en la clase que hereda para
   * implementar el proceso de guardado adecuado para cada formulario.
   *
   */
  protected function saving($cpdefniv)
  {
    $cpdefniv->save();
    return -1;

  }

  /**
   * Función que debe ser reescrita en la clase que hereda para
   * implementar el proceso de eliminación adecuado para cada formulario.
   *
   */
  protected function deleting($cpdefniv)
  {
  	$cpdefniv->delete();
    return -1;

  }

  /**
   * Función para manejar la eliminación de registros del formulario.
   * cabe destacar que llama internamente a la función $this->deleting
   * que es reescrita en la clase que hereda con el proceso que el usuario
   * necesite implementar.
   * Esta función deleting siempre debe retornar un valor >=-1.
   *
   */
  protected function deleteCpdefniv($cpdefniv)
  {
    try {

      // Modificar la siguiente línea para llamar al método
      // correcto en la clase del negocio, ej:
      // $coderr = Compras::salvarAlmaujoc($caajuoc,$grid);

      // OJO ----> Eliminar esta linea al modificar este método
      $this->coderr = $this->deleting($cpdefniv);

      if(is_array($this->coderr)){
        foreach ($this->coderr as $ERR){
          $err = Herramientas::obtenerMensajeError($ERR);
          $this->getRequest()->setError('delete',$err);
          $this->updateError();
        }
      }elseif($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('delete',$err);
        $this->updateError();
      }

      //return -1;

    } catch (Exception $ex) {
      $this->coderr = 6;
      $err = Herramientas::obtenerMensajeError($this->coderr);
      $this->getRequest()->setError('delete',$err);
      $this->updateError();
    }

  }

  // Funcion para validar los datos de la vista luego de detectado un error
  // se usa por ejemplo para recargar la informacion y configuración de un grid
  protected function updateError()
  {
    return true;
  }

  /**
   * Actualiza la informacion que viene de la vista 
   * luego de un get/post en el obejto del modelo base del formulario.
   *
   */
  protected function updateCpdefnivFromRequest()
  {
    $cpdefniv = $this->getRequestParameter('cpdefniv');

    $fields = CpdefnivPeer::getFieldNames();

    if(array_search('Codalmusu', $fields))
    {
      if (isset($cpdefniv['codalmusu']))
      {
        $this->cpdefniv->setCodalmusu($cpdefniv['codalmusu']);
      }
    }
    if (isset($cpdefniv['nomemp']))
    {
      $this->cpdefniv->setNomemp($cpdefniv['nomemp']);
    }
    if (isset($cpdefniv['rupcat']))
    {
      $this->cpdefniv->setRupcat($cpdefniv['rupcat']);
    }
    if (isset($cpdefniv['ruppar']))
    {
      $this->cpdefniv->setRuppar($cpdefniv['ruppar']);
    }
    if (isset($cpdefniv['nivdis']))
    {
      $this->cpdefniv->setNivdis($cpdefniv['nivdis']);
    }
    if (isset($cpdefniv['grid']))
    {
      $this->cpdefniv->setGrid($cpdefniv['grid']);
    }
    if (isset($cpdefniv['forpre']))
    {
      $this->cpdefniv->setForpre($cpdefniv['forpre']);
    }
    if (isset($cpdefniv['fecini']))
    {
      if ($cpdefniv['fecini'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($cpdefniv['fecini']))
          {
            $value = $dateFormat->format($cpdefniv['fecini'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $cpdefniv['fecini'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->cpdefniv->setFecini($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->cpdefniv->setFecini(null);
      }
    }
    if (isset($cpdefniv['feccie']))
    {
      if ($cpdefniv['feccie'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($cpdefniv['feccie']))
          {
            $value = $dateFormat->format($cpdefniv['feccie'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $cpdefniv['feccie'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->cpdefniv->setFeccie($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->cpdefniv->setFeccie(null);
      }
    }
    if (isset($cpdefniv['fecper']))
    {
      if ($cpdefniv['fecper'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($cpdefniv['fecper']))
          {
            $value = $dateFormat->format($cpdefniv['fecper'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $cpdefniv['fecper'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->cpdefniv->setFecper($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->cpdefniv->setFecper(null);
      }
    }
    if (isset($cpdefniv['asiper']))
    {
      $this->cpdefniv->setAsiper($cpdefniv['asiper']);
    }
    if (isset($cpdefniv['numper']))
    {
      $this->cpdefniv->setNumper($cpdefniv['numper']);
    }
    if (isset($cpdefniv['tipcom']))
    {
      $this->cpdefniv->setTipcom($cpdefniv['tipcom']);
    }
    if (isset($cpdefniv['cedrif']))
    {
      $this->cpdefniv->setCedrif($cpdefniv['cedrif']);
    }
    if (isset($cpdefniv['tipcau']))
    {
      $this->cpdefniv->setTipcau($cpdefniv['tipcau']);
    }
    if (isset($cpdefniv['gridper']))
    {
      $this->cpdefniv->setGridper($cpdefniv['gridper']);
    }
    if (isset($cpdefniv['repsoladidis1']))
    {
      $this->cpdefniv->setRepsoladidis1($cpdefniv['repsoladidis1']);
    }
    if (isset($cpdefniv['repsoladidis2']))
    {
      $this->cpdefniv->setRepsoladidis2($cpdefniv['repsoladidis2']);
    }
    if (isset($cpdefniv['nomdirpre']))
    {
      $this->cpdefniv->setNomdirpre($cpdefniv['nomdirpre']);
    }
    if (isset($cpdefniv['cardirpre']))
    {
      $this->cpdefniv->setCardirpre($cpdefniv['cardirpre']);
    }

    if (isset($cpdefniv['codemp']))
    {
      $this->cpdefniv->setCodemp($cpdefniv['codemp']);
    }
    if (isset($cpdefniv['loncod']))
    {
      $this->cpdefniv->setLoncod($cpdefniv['loncod']);
    }
    if (isset($cpdefniv['rupcat']))
    {
      $this->cpdefniv->setRupcat($cpdefniv['rupcat']);
    }
    if (isset($cpdefniv['ruppar']))
    {
      $this->cpdefniv->setRuppar($cpdefniv['ruppar']);
    }
    if (isset($cpdefniv['nivdis']))
    {
      $this->cpdefniv->setNivdis($cpdefniv['nivdis']);
    }
    if (isset($cpdefniv['forpre']))
    {
      $this->cpdefniv->setForpre($cpdefniv['forpre']);
    }
    if (isset($cpdefniv['asiper']))
    {
      $this->cpdefniv->setAsiper($cpdefniv['asiper']);
    }
    if (isset($cpdefniv['numper']))
    {
      $this->cpdefniv->setNumper($cpdefniv['numper']);
    }
    if (isset($cpdefniv['peract']))
    {
      $this->cpdefniv->setPeract($cpdefniv['peract']);
    }
    if (isset($cpdefniv['fecper']))
    {
      if ($cpdefniv['fecper'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($cpdefniv['fecper']))
          {
            $value = $dateFormat->format($cpdefniv['fecper'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $cpdefniv['fecper'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->cpdefniv->setFecper($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->cpdefniv->setFecper(null);
      }
    }
    if (isset($cpdefniv['fecini']))
    {
      if ($cpdefniv['fecini'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($cpdefniv['fecini']))
          {
            $value = $dateFormat->format($cpdefniv['fecini'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $cpdefniv['fecini'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->cpdefniv->setFecini($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->cpdefniv->setFecini(null);
      }
    }
    if (isset($cpdefniv['feccie']))
    {
      if ($cpdefniv['feccie'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($cpdefniv['feccie']))
          {
            $value = $dateFormat->format($cpdefniv['feccie'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $cpdefniv['feccie'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->cpdefniv->setFeccie($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->cpdefniv->setFeccie(null);
      }
    }
    if (isset($cpdefniv['etadef']))
    {
      $this->cpdefniv->setEtadef($cpdefniv['etadef']);
    }
    if (isset($cpdefniv['staprc']))
    {
      $this->cpdefniv->setStaprc($cpdefniv['staprc']);
    }
    if (isset($cpdefniv['coraep']))
    {
      $this->cpdefniv->setCoraep($cpdefniv['coraep']);
    }
    if (isset($cpdefniv['gencom']))
    {
      $this->cpdefniv->setGencom($cpdefniv['gencom']);
    }
    if (isset($cpdefniv['numcom']))
    {
      $this->cpdefniv->setNumcom($cpdefniv['numcom']);
    }
    if (isset($cpdefniv['caraep']))
    {
      $this->cpdefniv->setCaraep($cpdefniv['caraep']);
    }
    if (isset($cpdefniv['tiptraprc']))
    {
      $this->cpdefniv->setTiptraprc($cpdefniv['tiptraprc']);
    }
    if (isset($cpdefniv['fueord']))
    {
      $this->cpdefniv->setFueord($cpdefniv['fueord']);
    }
    if (isset($cpdefniv['fuecre']))
    {
      $this->cpdefniv->setFuecre($cpdefniv['fuecre']);
    }
    if (isset($cpdefniv['fuetra']))
    {
      $this->cpdefniv->setFuetra($cpdefniv['fuetra']);
    }
    if (isset($cpdefniv['nomgob']))
    {
      $this->cpdefniv->setNomgob($cpdefniv['nomgob']);
    }
    if (isset($cpdefniv['nomsec']))
    {
      $this->cpdefniv->setNomsec($cpdefniv['nomsec']);
    }
    if (isset($cpdefniv['unidad']))
    {
      $this->cpdefniv->setUnidad($cpdefniv['unidad']);
    }
    if (isset($cpdefniv['cortrasla']))
    {
      $this->cpdefniv->setCortrasla($cpdefniv['cortrasla']);
    }
    if (isset($cpdefniv['coradidis']))
    {
      $this->cpdefniv->setCoradidis($cpdefniv['coradidis']);
    }
    if (isset($cpdefniv['corprc']))
    {
      $this->cpdefniv->setCorprc($cpdefniv['corprc']);
    }
    if (isset($cpdefniv['corcom']))
    {
      $this->cpdefniv->setCorcom($cpdefniv['corcom']);
    }
    if (isset($cpdefniv['corcau']))
    {
      $this->cpdefniv->setCorcau($cpdefniv['corcau']);
    }
    if (isset($cpdefniv['corpag']))
    {
      $this->cpdefniv->setCorpag($cpdefniv['corpag']);
    }
    if (isset($cpdefniv['corsoladidis']))
    {
      $this->cpdefniv->setCorsoladidis($cpdefniv['corsoladidis']);
    }
    if (isset($cpdefniv['corsoltra']))
    {
      $this->cpdefniv->setCorsoltra($cpdefniv['corsoltra']);
    }
    if (isset($cpdefniv['coraju']))
    {
      $this->cpdefniv->setCoraju($cpdefniv['coraju']);
    }
    if (isset($cpdefniv['corfue']))
    {
      $this->cpdefniv->setCorfue($cpdefniv['corfue']);
    }
    $this->cpdefniv->setBtnanu(isset($cpdefniv['btnanu']) ? $cpdefniv['btnanu'] : 0);
    $this->cpdefniv->setBtneli(isset($cpdefniv['btneli']) ? $cpdefniv['btneli'] : 0);
    if (isset($cpdefniv['conpar']))
    {
      $this->cpdefniv->setConpar($cpdefniv['conpar']);
    }
    if (isset($cpdefniv['tipcau']))
    {
      $this->cpdefniv->setTipcau($cpdefniv['tipcau']);
    }
    if (isset($cpdefniv['cedrif']))
    {
      $this->cpdefniv->setCedrif($cpdefniv['cedrif']);
    }
    if (isset($cpdefniv['tipcom']))
    {
      $this->cpdefniv->setTipcom($cpdefniv['tipcom']);
    }
    if (isset($cpdefniv['repsoladidis1']))
    {
      $this->cpdefniv->setRepsoladidis1($cpdefniv['repsoladidis1']);
    }
    if (isset($cpdefniv['repsoladidis2']))
    {
      $this->cpdefniv->setRepsoladidis2($cpdefniv['repsoladidis2']);
    }
    if (isset($cpdefniv['nomdirpre']))
    {
      $this->cpdefniv->setNomdirpre($cpdefniv['nomdirpre']);
    }
    if (isset($cpdefniv['cardirpre']))
    {
      $this->cpdefniv->setCardirpre($cpdefniv['cardirpre']);
    }
    if (isset($cpdefniv['repsoltrasla1']))
    {
      $this->cpdefniv->setRepsoltrasla1($cpdefniv['repsoltrasla1']);
    }
    if (isset($cpdefniv['repsoltrasla2']))
    {
      $this->cpdefniv->setRepsoltrasla2($cpdefniv['repsoltrasla2']);
    }

    if (isset($cpdefniv['defcod']))
    {
      $this->cpdefniv->setDefcod($cpdefniv['defcod']);
    }

  }

  /**
   * Retorna el registro del modelo del formulario
   * Identifica si es un registro nuevo o actual, y lo retorna
   *
   */
  protected function getCpdefnivOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $cpdefniv = new Cpdefniv();
    }
    else
    {
      $cpdefniv = CpdefnivPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($cpdefniv);
    }

    return $cpdefniv;
  }

  /**
   * Función para procesar los filtros aplicados a la lista de registros
   *
   */
  protected function processFilters()
  {
  }

  /**
   * Función para procesar el orden de los registros en la lista
   *
   */
  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/cpdefniv/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/cpdefniv/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/cpdefniv/sort'))
    {
    }
  }

  /**
   * Función para manejar los filtros de búsqueda
   * de la lista
   *
   */
  protected function addFiltersCriteria($c)
  {
  }

  /**
   * Función para colocar el criterio de ordenación de la lista de registros
   * en la acción List
   *
   */
  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/cpdefniv/sort'))
    {
      $sort_column = CpdefnivPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/cpdefniv/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  /**
   * Función para retornar las etiquetas del formulario
   *
   */
  protected function getLabels()
  {
    $arreglo=array(
                  'cpdefniv{nomemp}' => '.:',
                      'cpdefniv{rupcat}' => 'Clasifi. de Categorías:',
              'cpdefniv{ruppar}' => 'Clasifi. de Partidas:',
              'cpdefniv{nivdis}' => 'Nivel Disponibilidad:',
                      'cpdefniv{grid}' => '.:',
              'cpdefniv{forpre}' => 'Formato Código Presupuestario:',
                      'cpdefniv{fecini}' => 'Inicio de Ejercicio:',
              'cpdefniv{feccie}' => 'Fin de Ejercicio:',
              'cpdefniv{fecper}' => 'Período:',
              'cpdefniv{asiper}' => 'Asignación Periodica:',
              'cpdefniv{numper}' => 'Número de Períodos:',
              'cpdefniv{tipcom}' => 'Tipo Compromiso Cierre de Nómina:',
              'cpdefniv{cedrif}' => 'Cedula/Rif Cierre de Nómina:',
              'cpdefniv{tipcau}' => 'Tipo Causado Fondo de Anticipo:',
                      'cpdefniv{gridper}' => '.:',
                      'cpdefniv{repsoladidis1}' => 'Nombre Reporte Solicitud de Créditos/Adiciones:',
              'cpdefniv{repsoladidis2}' => 'Nombre Reporte Créditos/Adiciones:',
              'cpdefniv{nomdirpre}' => 'Nombre Director Presupuesto:',
              'cpdefniv{cardirpre}' => 'Cargo Director Presupuesto:',
                          'cpdefniv{codemp}' => 'Codemp:',
              'cpdefniv{loncod}' => 'Loncod:',
              'cpdefniv{rupcat}' => 'Clasifi. de Categorías:',
              'cpdefniv{ruppar}' => 'Clasifi. de Partidas:',
              'cpdefniv{nivdis}' => 'Nivel Disponibilidad:',
              'cpdefniv{forpre}' => 'Formato Código Presupuestario:',
              'cpdefniv{asiper}' => 'Asignación Periodica:',
              'cpdefniv{numper}' => 'Número de Períodos:',
              'cpdefniv{peract}' => 'Peract:',
              'cpdefniv{fecper}' => 'Período:',
              'cpdefniv{fecini}' => 'Inicio de Ejercicio:',
              'cpdefniv{feccie}' => 'Fin de Ejercicio:',
              'cpdefniv{etadef}' => 'Etadef:',
              'cpdefniv{staprc}' => 'Staprc:',
              'cpdefniv{coraep}' => 'Coraep:',
              'cpdefniv{gencom}' => 'Gencom:',
              'cpdefniv{numcom}' => 'Numcom:',
              'cpdefniv{caraep}' => 'Caraep:',
              'cpdefniv{tiptraprc}' => 'Tiptraprc:',
              'cpdefniv{fueord}' => 'Fueord:',
              'cpdefniv{fuecre}' => 'Fuecre:',
              'cpdefniv{fuetra}' => 'Fuetra:',
              'cpdefniv{nomgob}' => 'Nomgob:',
              'cpdefniv{nomsec}' => 'Nomsec:',
              'cpdefniv{unidad}' => 'Unidad:',
              'cpdefniv{cortrasla}' => 'Cortrasla:',
              'cpdefniv{coradidis}' => 'Coradidis:',
              'cpdefniv{corprc}' => 'Corprc:',
              'cpdefniv{corcom}' => 'Corcom:',
              'cpdefniv{corcau}' => 'Corcau:',
              'cpdefniv{corpag}' => 'Corpag:',
              'cpdefniv{corsoladidis}' => 'Corsoladidis:',
              'cpdefniv{corsoltra}' => 'Corsoltra:',
              'cpdefniv{coraju}' => 'Coraju:',
              'cpdefniv{corfue}' => 'Corfue:',
              'cpdefniv{btnanu}' => 'Btnanu:',
              'cpdefniv{btneli}' => 'Btneli:',
              'cpdefniv{conpar}' => 'Conpar:',
              'cpdefniv{tipcau}' => 'Tipo Causado Fondo de Anticipo:',
              'cpdefniv{cedrif}' => 'Cedula/Rif Cierre de Nómina:',
              'cpdefniv{tipcom}' => 'Tipo Compromiso Cierre de Nómina:',
              'cpdefniv{repsoladidis1}' => 'Nombre Reporte Solicitud de Créditos/Adiciones:',
              'cpdefniv{repsoladidis2}' => 'Nombre Reporte Créditos/Adiciones:',
              'cpdefniv{nomdirpre}' => 'Nombre Director Presupuesto:',
              'cpdefniv{cardirpre}' => 'Cargo Director Presupuesto:',
              'cpdefniv{repsoltrasla1}' => 'Nombre Reporte Solicitud de Traslados:',
              'cpdefniv{repsoltrasla2}' => 'Nombre Reporte Traslados:',
              'cpdefniv{id}' => 'Id:',
            );
   return $arreglo;
  }



  /**
   * Función para manejar el llamado Ajax automático con el
   * Helper Catalogo.
   *
   */
  public function executeCatalogo()
  {
    $codigo = $this->getRequestParameter('codigo','');
    $clase = $this->getRequestParameter('clase','');
    $nombre = $this->getRequestParameter('name','');
    $campobase = $this->getRequestParameter('campobase','');
    $campoprincipal = $this->getRequestParameter('campoprincipal','');
    $camposecundario = $this->getRequestParameter('camposecundario','');

    $c = new Criteria();
    eval('$c->add('.ucfirst(strtolower($clase)).'Peer::'.strtoupper($campoprincipal).','.chr(39).$codigo.chr(39).');');
    eval('$peer = '.ucfirst(strtolower($clase)).'Peer::doSelectOne($c);');

  eval('$cajasec = "'.strtolower($nombre).'_'.strtolower($camposecundario).'";');
  eval('$cajaid = "'.strtolower($nombre).'_'.strtolower($campobase).'";');
  if ($peer){
  eval('$valsec = $peer->get'.H::ObtenerNombreCampo($camposecundario).'();');
  eval('$valid = $peer->getId();');}
  else{
    $valsec='';
    $valid='';
  }
  $output = '[["'.$cajasec.'","'.$valsec.'",""],["'.$cajaid.'","'.$valid.'",""],["","",""]]';
    $this->getResponse()->setHttpHeader("X-JSON", '('.$output.')');
    return sfView::HEADER_ONLY;
  }


  /**
   * Función para guardar la bitacora de la aplicacion
   * TODO: mejorar la carga de información en la bitacora
   * Actualmente esta planteada información no muy relevante
   *
   */
 public function SalvarBitacora($id, $acc)
  {
    try{
      $segbitaco= new Segbitaco();
      $fecha=date('Y-m-d');

      $segbitaco->setCodintusu($this->getUser()->getAttribute('usuario_id'));
      $segbitaco->setTipope(substr($acc, 0, 1));
      $segbitaco->setCodmod('prenivpre');
      $segbitaco->setValcla('Cpdefniv');
      $segbitaco->setCodapl(substr(SF_APP, 0, 3));
      $segbitaco->setFecope($fecha);
      $segbitaco->setHorope(time('h:i:s'));
      $segbitaco->setRefmov($id);
      $segbitaco->save();
    }catch(Exception $e){

    }
  }

  public function Bitacora($acc)
  {
	$id= $this->cpdefniv->getId();
    $this->SalvarBitacora($id ,$acc);
  }






}

