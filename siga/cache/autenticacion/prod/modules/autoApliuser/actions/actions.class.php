<?php
// auto-generated by sfPropelAdmin
// date: 2017/02/13 05:36:53
?>
<?php

/**
 * autoApliuser actions.
 *
 * @package    Roraima
 * @subpackage autoApliuser 
 * @author     $Author: lhernandez $ <desarrollo@cidesa.com.ve>
 * @version    SVN: $Id: actions.class.php 32371 2009-09-01 16:06:59Z lhernandez $
 */
class autoApliuserActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('apliuser', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/apli_user/filters');


     // 15    // pager
    $this->pager = new sfPropelPager('ApliUser', 15);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('apliuser', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('apliuser', 'edit');
  }

  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  public function executeEdit()
  {
    $this->apli_user = $this->getApliUserOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateApliUserFromRequest();

      $this->saveApliUser($this->apli_user);

      $this->setFlash('notice', 'Your modifications have been saved');

    $this->Bitacora('Guardo');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('apliuser/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('apliuser/list');
      }
      else
      {
        return $this->redirect('apliuser/edit?id='.$this->apli_user->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->apli_user = ApliUserPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->apli_user);

    try
    {
      $this->deleteApliUser($this->apli_user);
      $this->Bitacora('Elimino');
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'No se pudo borrar la registro seleccionado. Asegúrese de que no tiene ningún tipo de registros asociados.');
      return $this->forward('apliuser', 'list');
    }

    return $this->redirect('apliuser/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->apli_user = $this->getApliUserOrCreate();
    $this->updateApliUserFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveApliUser($apli_user)
  {
    $apli_user->save();

  }

  protected function deleteApliUser($apli_user)
  {
    $apli_user->delete();
  }

  protected function updateApliUserFromRequest()
  {
    $apli_user = $this->getRequestParameter('apli_user');

    if (isset($apli_user['cedemp']))
    {
      $this->apli_user->setCedemp($apli_user['cedemp']);
    }
    if (isset($apli_user['nomuse']))
    {
      $this->apli_user->setNomuse($apli_user['nomuse']);
    }
    if (isset($apli_user['diremp']))
    {
      $this->apli_user->setDiremp($apli_user['diremp']);
    }
    if (isset($apli_user['telemp']))
    {
      $this->apli_user->setTelemp($apli_user['telemp']);
    }
    if (isset($apli_user['loguse']))
    {
      $this->apli_user->setLoguse($apli_user['loguse']);
    }
    if (isset($apli_user['pasuse']))
    {
      $this->apli_user->setPasuse($apli_user['pasuse']);
    }
    if (isset($apli_user['codapl']))
    {
      $this->apli_user->setCodapl($apli_user['codapl']);
    }
    if (isset($apli_user['codemp']))
    {
      $this->apli_user->setCodemp($apli_user['codemp']);
    }
    if (isset($apli_user['nomopc']))
    {
      $this->apli_user->setNomopc($apli_user['nomopc']);
    }
    if (isset($apli_user['priuse']))
    {
      $this->apli_user->setPriuse($apli_user['priuse']);
    }
    if (isset($apli_user['administrador']))
    {
      $this->apli_user->setAdministrador($apli_user['administrador']);
    }
  }

  protected function getApliUserOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $apli_user = new ApliUser();
    }
    else
    {
      $apli_user = ApliUserPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($apli_user);
    }

    return $apli_user;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/apli_user/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/apli_user/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/apli_user/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/apli_user/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/apli_user/sort'))
    {
      $this->getUser()->setAttribute('sort', 'loguse', 'sf_admin/apli_user/sort');
      $this->getUser()->setAttribute('type', 'asc', 'sf_admin/apli_user/sort');
    }
  }

   protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['loguse_is_empty']))
    {
      $criterion = $c->getNewCriterion(ApliUserPeer::LOGUSE, '');
      $criterion->addOr($c->getNewCriterion(ApliUserPeer::LOGUSE, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['loguse']) && $this->filters['loguse'] !== '')
    {
      $c->add(ApliUserPeer::LOGUSE, '%'.strtr($this->filters['loguse'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['codapl_is_empty']))
    {
      $criterion = $c->getNewCriterion(ApliUserPeer::CODAPL, '');
      $criterion->addOr($c->getNewCriterion(ApliUserPeer::CODAPL, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codapl']) && $this->filters['codapl'] !== '')
    {
      $c->add(ApliUserPeer::CODAPL, '%'.strtr($this->filters['codapl'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['nomopc_is_empty']))
    {
      $criterion = $c->getNewCriterion(ApliUserPeer::NOMOPC, '');
      $criterion->addOr($c->getNewCriterion(ApliUserPeer::NOMOPC, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['nomopc']) && $this->filters['nomopc'] !== '')
    {
      $c->add(ApliUserPeer::NOMOPC, '%'.strtr($this->filters['nomopc'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['priuse_is_empty']))
    {
      $criterion = $c->getNewCriterion(ApliUserPeer::PRIUSE, '');
      $criterion->addOr($c->getNewCriterion(ApliUserPeer::PRIUSE, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['priuse']) && $this->filters['priuse'] !== '')
    {
      $c->add(ApliUserPeer::PRIUSE, '%'.strtr($this->filters['priuse'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
  }
  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/apli_user/sort'))
    {
      $sort_column = ApliUserPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/apli_user/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'apli_user{cedemp}' => 'C.I:',
      'apli_user{nomuse}' => 'Nombre:',
      'apli_user{diremp}' => 'Dirección:',
      'apli_user{telemp}' => 'Teléfono:',
      'apli_user{loguse}' => 'Usuario:',
      'apli_user{pasuse}' => 'Contraseña:',
      'apli_user{codapl}' => 'Módulo:',
      'apli_user{codemp}' => 'Código Empresa:',
      'apli_user{nomopc}' => 'Módulo:',
      'apli_user{priuse}' => 'Privilegios:',
      'apli_user{administrador}' => 'Privilegio de Administrador:',
    );
  }

    public function executeCatalogo()
  {
    $codigo = $this->getRequestParameter('codigo','');
    $clase = $this->getRequestParameter('clase','');
    $nombre = $this->getRequestParameter('name','');
    $campobase = $this->getRequestParameter('campobase','');
    $campoprincipal = $this->getRequestParameter('campoprincipal','');
    $camposecundario = $this->getRequestParameter('camposecundario','');

    $c = new Criteria();
    eval('$c->add('.ucfirst(strtolower($clase)).'Peer::'.strtoupper($campoprincipal).','.chr(39).$codigo.chr(39).');');
    eval('$peer = '.ucfirst(strtolower($clase)).'Peer::doSelectOne($c);');

  eval('$cajasec = "'.strtolower($nombre).'_'.strtolower($camposecundario).'";');
  eval('$cajaid = "'.strtolower($nombre).'_'.strtolower($campobase).'";');
  $valsec="";
  $valid="";
  eval('if ($peer) $valsec = $peer->get'.H::ObtenerNombreCampo($camposecundario).'();');
  eval('if ($peer) $valid = $peer->getId();');
  $output = '[["'.$cajasec.'","'.$valsec.'",""],["'.$cajaid.'","'.$valid.'",""],["","",""]]';
    $this->getResponse()->setHttpHeader("X-JSON", '('.$output.')');
    return sfView::HEADER_ONLY;
  }

  public function SalvarBitacora($id, $acc)
  {
    try{
      $segbitaco= new Segbitaco();
      $fecha=date('Y-m-d');

      $segbitaco->setCodintusu($this->getUser()->getAttribute('usuario_id'));
      $segbitaco->setTipope(substr($acc, 0, 1));
      $segbitaco->setCodmod('apliuser');
      $segbitaco->setValcla('ApliUser');
      $segbitaco->setCodapl(substr(SF_APP, 0, 3));
      $segbitaco->setFecope($fecha);
      $segbitaco->setHorope(time('h:i:s'));
      $segbitaco->setRefmov($id);
      $segbitaco->save();
    }catch(Exception $e){

    }
  }

  public function Bitacora($acc)
  {
    if ($this->apli_user )
    {
      $id= $this->apli_user->getId();
      $this->SalvarBitacora($id ,$acc);
    }
  }

}
