<?php
// auto-generated by sfPropelAdmin
// date: 2017/02/13 05:45:12
?>
<?php

/**
 * autoNomdefespban actions.
 *
 * @package    Roraima
 * @subpackage autoNomdefespban 
 * @author     $Author: lhernandez $ <desarrollo@cidesa.com.ve>
 * @version    SVN: $Id: actions.class.php 32371 2009-09-01 16:06:59Z lhernandez $
 */
class autoNomdefespbanActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('nomdefespban', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/npbancos/filters');


     // 15    // pager
    $this->pager = new sfPropelPager('Npbancos', 15);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('nomdefespban', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('nomdefespban', 'edit');
  }

  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  public function executeEdit()
  {
    $this->npbancos = $this->getNpbancosOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateNpbancosFromRequest();

      $this->saveNpbancos($this->npbancos);

      $this->setFlash('notice', 'Your modifications have been saved');

    $this->Bitacora('Guardo');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('nomdefespban/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('nomdefespban/list');
      }
      else
      {
        return $this->redirect('nomdefespban/edit?id='.$this->npbancos->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->npbancos = NpbancosPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->npbancos);

    try
    {
      $this->deleteNpbancos($this->npbancos);
      $this->Bitacora('Elimino');
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'No se pudo borrar la registro seleccionado. Asegúrese de que no tiene ningún tipo de registros asociados.');
      return $this->forward('nomdefespban', 'list');
    }

    return $this->redirect('nomdefespban/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->npbancos = $this->getNpbancosOrCreate();
    $this->updateNpbancosFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveNpbancos($npbancos)
  {
    $npbancos->save();

  }

  protected function deleteNpbancos($npbancos)
  {
    $npbancos->delete();
  }

  protected function updateNpbancosFromRequest()
  {
    $npbancos = $this->getRequestParameter('npbancos');

    if (isset($npbancos['codban']))
    {
      $this->npbancos->setCodban($npbancos['codban']);
    }
    if (isset($npbancos['nomban']))
    {
      $this->npbancos->setNomban($npbancos['nomban']);
    }
    if (isset($npbancos['codbanele']))
    {
      $this->npbancos->setCodbanele($npbancos['codbanele']);
    }
  }

  protected function getNpbancosOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $npbancos = new Npbancos();
    }
    else
    {
      $npbancos = NpbancosPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($npbancos);
    }

    return $npbancos;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/npbancos/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/npbancos/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/npbancos/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/npbancos/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/npbancos/sort'))
    {
      $this->getUser()->setAttribute('sort', 'codban', 'sf_admin/npbancos/sort');
      $this->getUser()->setAttribute('type', 'asc', 'sf_admin/npbancos/sort');
    }
  }

   protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['codban_is_empty']))
    {
      $criterion = $c->getNewCriterion(NpbancosPeer::CODBAN, '');
      $criterion->addOr($c->getNewCriterion(NpbancosPeer::CODBAN, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codban']) && $this->filters['codban'] !== '')
    {
      $c->add(NpbancosPeer::CODBAN, '%'.strtr($this->filters['codban'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['nomban_is_empty']))
    {
      $criterion = $c->getNewCriterion(NpbancosPeer::NOMBAN, '');
      $criterion->addOr($c->getNewCriterion(NpbancosPeer::NOMBAN, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['nomban']) && $this->filters['nomban'] !== '')
    {
      $c->add(NpbancosPeer::NOMBAN, '%'.strtr($this->filters['nomban'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
  }
  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/npbancos/sort'))
    {
      $sort_column = NpbancosPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/npbancos/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'npbancos{codban}' => 'Código:',
      'npbancos{nomban}' => 'Descripcion:',
      'npbancos{codbanele}' => 'Código Alterno:',
    );
  }

    public function executeCatalogo()
  {
    $codigo = $this->getRequestParameter('codigo','');
    $clase = $this->getRequestParameter('clase','');
    $nombre = $this->getRequestParameter('name','');
    $campobase = $this->getRequestParameter('campobase','');
    $campoprincipal = $this->getRequestParameter('campoprincipal','');
    $camposecundario = $this->getRequestParameter('camposecundario','');

    $c = new Criteria();
    eval('$c->add('.ucfirst(strtolower($clase)).'Peer::'.strtoupper($campoprincipal).','.chr(39).$codigo.chr(39).');');
    eval('$peer = '.ucfirst(strtolower($clase)).'Peer::doSelectOne($c);');

  eval('$cajasec = "'.strtolower($nombre).'_'.strtolower($camposecundario).'";');
  eval('$cajaid = "'.strtolower($nombre).'_'.strtolower($campobase).'";');
  $valsec="";
  $valid="";
  eval('if ($peer) $valsec = $peer->get'.H::ObtenerNombreCampo($camposecundario).'();');
  eval('if ($peer) $valid = $peer->getId();');
  $output = '[["'.$cajasec.'","'.$valsec.'",""],["'.$cajaid.'","'.$valid.'",""],["","",""]]';
    $this->getResponse()->setHttpHeader("X-JSON", '('.$output.')');
    return sfView::HEADER_ONLY;
  }

  public function SalvarBitacora($id, $acc)
  {
    try{
      $segbitaco= new Segbitaco();
      $fecha=date('Y-m-d');

      $segbitaco->setCodintusu($this->getUser()->getAttribute('usuario_id'));
      $segbitaco->setTipope(substr($acc, 0, 1));
      $segbitaco->setCodmod('nomdefespban');
      $segbitaco->setValcla('Npbancos');
      $segbitaco->setCodapl(substr(SF_APP, 0, 3));
      $segbitaco->setFecope($fecha);
      $segbitaco->setHorope(time('h:i:s'));
      $segbitaco->setRefmov($id);
      $segbitaco->save();
    }catch(Exception $e){

    }
  }

  public function Bitacora($acc)
  {
    if ($this->npbancos )
    {
      $id= $this->npbancos->getId();
      $this->SalvarBitacora($id ,$acc);
    }
  }

}
