<?php
// auto-generated by sfPropelAdmin
// date: 2017/02/13 05:46:12
?>
<?php

/**
 * autoNomhojint actions.
 *
 * @package    Roraima
 * @subpackage autoNomhojint 
 * @author     $Author: lhernandez $ <desarrollo@cidesa.com.ve>
 * @version    SVN: $Id: actions.class.php 32371 2009-09-01 16:06:59Z lhernandez $
 */
class autoNomhojintActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('nomhojint', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/nphojint/filters');


     // 15    // pager
    $this->pager = new sfPropelPager('Nphojint', 15);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('nomhojint', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('nomhojint', 'edit');
  }

  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  public function executeEdit()
  {
    $this->nphojint = $this->getNphojintOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateNphojintFromRequest();

      $this->saveNphojint($this->nphojint);

      $this->setFlash('notice', 'Your modifications have been saved');

    $this->Bitacora('Guardo');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('nomhojint/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('nomhojint/list');
      }
      else
      {
        return $this->redirect('nomhojint/edit?id='.$this->nphojint->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->nphojint = NphojintPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->nphojint);

    try
    {
      $this->deleteNphojint($this->nphojint);
      $this->Bitacora('Elimino');
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'No se pudo borrar la registro seleccionado. Asegúrese de que no tiene ningún tipo de registros asociados.');
      return $this->forward('nomhojint', 'list');
    }

      $currentFile = sfConfig::get('sf_upload_dir')."/fotos/".$this->nphojint->getFotemp();
      if (is_file($currentFile))
      {
        unlink($currentFile);
      }

      $currentFile = sfConfig::get('sf_upload_dir')."/fotos/".$this->nphojint->getFotemp();
      if (is_file($currentFile))
      {
        unlink($currentFile);
      }

    return $this->redirect('nomhojint/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->nphojint = $this->getNphojintOrCreate();
    $this->updateNphojintFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveNphojint($nphojint)
  {
    $nphojint->save();

      // Update many-to-many for "incapacidades"
      $c = new Criteria();
      $c->add(NphojintincPeer::CODEMP, $nphojint->getPrimaryKey());
      NphojintincPeer::doDelete($c);

      $ids = $this->getRequestParameter('associated_incapacidades');
      if (is_array($ids))
      {
        foreach ($ids as $id)
        {
          $Nphojintinc = new Nphojintinc();
          $Nphojintinc->setCodemp($nphojint->getPrimaryKey());
          $Nphojintinc->setCodinc($id);
          $Nphojintinc->save();
        }
      }

  }

  protected function deleteNphojint($nphojint)
  {
    $nphojint->delete();
  }

  protected function updateNphojintFromRequest()
  {
    $nphojint = $this->getRequestParameter('nphojint');

    if (isset($nphojint['codemp']))
    {
      $this->nphojint->setCodemp($nphojint['codemp']);
    }
    if (isset($nphojint['nomemp']))
    {
      $this->nphojint->setNomemp($nphojint['nomemp']);
    }
    if (isset($nphojint['cedemp']))
    {
      $this->nphojint->setCedemp($nphojint['cedemp']);
    }
    if (isset($nphojint['rifemp']))
    {
      $this->nphojint->setRifemp($nphojint['rifemp']);
    }
    if (isset($nphojint['edociv']))
    {
      $this->nphojint->setEdociv($nphojint['edociv']);
    }
    if (isset($nphojint['numcon']))
    {
      $this->nphojint->setNumcon($nphojint['numcon']);
    }
    if (isset($nphojint['nacemp']))
    {
      $this->nphojint->setNacemp($nphojint['nacemp']);
    }
    if (isset($nphojint['sexemp']))
    {
      $this->nphojint->setSexemp($nphojint['sexemp']);
    }
    if (isset($nphojint['codniv']))
    {
      $this->nphojint->setCodniv($nphojint['codniv']);
    }
    $currentFile = sfConfig::get('sf_upload_dir')."/fotos/".$this->nphojint->getFotemp();
    if (!$this->getRequest()->hasErrors() && isset($nphojint['fotemp_remove']))
    {
      $this->nphojint->setFotemp('');
      if (is_file($currentFile))
      {
        unlink($currentFile);
      }
    }

    if (!$this->getRequest()->hasErrors() && $this->getRequest()->getFileSize('nphojint[fotemp]'))
    {
      $fileName = md5($this->getRequest()->getFileName('nphojint[fotemp]').time().rand(0, 99999));
      $ext = $this->getRequest()->getFileExtension('nphojint[fotemp]');
      if (is_file($currentFile))
      {
        unlink($currentFile);
      }
      $this->getRequest()->moveFile('nphojint[fotemp]', sfConfig::get('sf_upload_dir')."/fotos/".$fileName.$ext);
      $this->nphojint->setFotemp($fileName.$ext);
    }
    $currentFile = sfConfig::get('sf_upload_dir')."/fotos/".$this->nphojint->getFotemp();
    if (!$this->getRequest()->hasErrors() && isset($nphojint['fotemp_remove']))
    {
      $this->nphojint->setFotemp('');
      if (is_file($currentFile))
      {
        unlink($currentFile);
      }
    }

    if (!$this->getRequest()->hasErrors() && $this->getRequest()->getFileSize('nphojint[fotemp]'))
    {
      $fileName = md5($this->getRequest()->getFileName('nphojint[fotemp]').time().rand(0, 99999));
      $ext = $this->getRequest()->getFileExtension('nphojint[fotemp]');
      if (is_file($currentFile))
      {
        unlink($currentFile);
      }
      $this->getRequest()->moveFile('nphojint[fotemp]', sfConfig::get('sf_upload_dir')."/fotos/".$fileName.$ext);
      $this->nphojint->setFotemp($fileName.$ext);
    }
    if (isset($nphojint['lugnac']))
    {
      $this->nphojint->setLugnac($nphojint['lugnac']);
    }
    if (isset($nphojint['fecnac']))
    {
      if ($nphojint['fecnac'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($nphojint['fecnac']))
          {
            $value = $dateFormat->format($nphojint['fecnac'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $nphojint['fecnac'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->nphojint->setFecnac($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->nphojint->setFecnac(null);
      }
    }
    if (isset($nphojint['edaemp']))
    {
      $this->nphojint->setEdaemp($nphojint['edaemp']);
    }
    if (isset($nphojint['obsgen']))
    {
      $this->nphojint->setObsgen($nphojint['obsgen']);
    }
    if (isset($nphojint['dirhab']))
    {
      $this->nphojint->setDirhab($nphojint['dirhab']);
    }
    if (isset($nphojint['codpai']))
    {
      $this->nphojint->setCodpai($nphojint['codpai']);
    }
    if (isset($nphojint['codest']))
    {
      $this->nphojint->setCodest($nphojint['codest']);
    }
    if (isset($nphojint['codciu']))
    {
      $this->nphojint->setCodciu($nphojint['codciu']);
    }
    if (isset($nphojint['telhab']))
    {
      $this->nphojint->setTelhab($nphojint['telhab']);
    }
    if (isset($nphojint['telotr']))
    {
      $this->nphojint->setTelotr($nphojint['telotr']);
    }
    if (isset($nphojint['celemp']))
    {
      $this->nphojint->setCelemp($nphojint['celemp']);
    }
    if (isset($nphojint['dirotr']))
    {
      $this->nphojint->setDirotr($nphojint['dirotr']);
    }
    if (isset($nphojint['codpa2']))
    {
      $this->nphojint->setCodpa2($nphojint['codpa2']);
    }
    if (isset($nphojint['codes2']))
    {
      $this->nphojint->setCodes2($nphojint['codes2']);
    }
    if (isset($nphojint['codci2']))
    {
      $this->nphojint->setCodci2($nphojint['codci2']);
    }
    if (isset($nphojint['telha2']))
    {
      $this->nphojint->setTelha2($nphojint['telha2']);
    }
    if (isset($nphojint['telot2']))
    {
      $this->nphojint->setTelot2($nphojint['telot2']);
    }
    if (isset($nphojint['emaemp']))
    {
      $this->nphojint->setEmaemp($nphojint['emaemp']);
    }
    if (isset($nphojint['codpos']))
    {
      $this->nphojint->setCodpos($nphojint['codpos']);
    }
    if (isset($nphojint['fecing']))
    {
      if ($nphojint['fecing'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($nphojint['fecing']))
          {
            $value = $dateFormat->format($nphojint['fecing'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $nphojint['fecing'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->nphojint->setFecing($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->nphojint->setFecing(null);
      }
    }
    if (isset($nphojint['fecret']))
    {
      if ($nphojint['fecret'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($nphojint['fecret']))
          {
            $value = $dateFormat->format($nphojint['fecret'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $nphojint['fecret'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->nphojint->setFecret($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->nphojint->setFecret(null);
      }
    }
    if (isset($nphojint['fecrei']))
    {
      if ($nphojint['fecrei'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($nphojint['fecrei']))
          {
            $value = $dateFormat->format($nphojint['fecrei'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $nphojint['fecrei'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->nphojint->setFecrei($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->nphojint->setFecrei(null);
      }
    }
    if (isset($nphojint['codmot']))
    {
      $this->nphojint->setCodmot($nphojint['codmot']);
    }
    if (isset($nphojint['staemp']))
    {
      $this->nphojint->setStaemp($nphojint['staemp']);
    }
    if (isset($nphojint['codtippag']))
    {
      $this->nphojint->setCodtippag($nphojint['codtippag']);
    }
    if (isset($nphojint['codban']))
    {
      $this->nphojint->setCodban($nphojint['codban']);
    }
    if (isset($nphojint['numcue']))
    {
      $this->nphojint->setNumcue($nphojint['numcue']);
    }
    if (isset($nphojint['tipcue']))
    {
      $this->nphojint->setTipcue($nphojint['tipcue']);
    }
    if (isset($nphojint['numcueaho']))
    {
      $this->nphojint->setNumcueaho($nphojint['numcueaho']);
    }
    if (isset($nphojint['tipcueaho']))
    {
      $this->nphojint->setTipcueaho($nphojint['tipcueaho']);
    }
    if (isset($nphojint['fecadmpub']))
    {
      if ($nphojint['fecadmpub'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($nphojint['fecadmpub']))
          {
            $value = $dateFormat->format($nphojint['fecadmpub'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $nphojint['fecadmpub'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->nphojint->setFecadmpub($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->nphojint->setFecadmpub(null);
      }
    }
    if (isset($nphojint['numsso']))
    {
      $this->nphojint->setNumsso($nphojint['numsso']);
    }
    if (isset($nphojint['numpolseg']))
    {
      $this->nphojint->setNumpolseg($nphojint['numpolseg']);
    }
    if (isset($nphojint['feccotsso']))
    {
      if ($nphojint['feccotsso'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($nphojint['feccotsso']))
          {
            $value = $dateFormat->format($nphojint['feccotsso'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $nphojint['feccotsso'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->nphojint->setFeccotsso($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->nphojint->setFeccotsso(null);
      }
    }
    if (isset($nphojint['anoadmpub']))
    {
      $this->nphojint->setAnoadmpub($nphojint['anoadmpub']);
    }
    if (isset($nphojint['tiefid']))
    {
      $this->nphojint->setTiefid($nphojint['tiefid']);
    }
    if (isset($nphojint['talcam']))
    {
      $this->nphojint->setTalcam($nphojint['talcam']);
    }
    if (isset($nphojint['talpan']))
    {
      $this->nphojint->setTalpan($nphojint['talpan']);
    }
    if (isset($nphojint['talcal']))
    {
      $this->nphojint->setTalcal($nphojint['talcal']);
    }
    if (isset($nphojint['grusan']))
    {
      $this->nphojint->setGrusan($nphojint['grusan']);
    }
    if (isset($nphojint['codregpai']))
    {
      $this->nphojint->setCodregpai($nphojint['codregpai']);
    }
    if (isset($nphojint['codregest']))
    {
      $this->nphojint->setCodregest($nphojint['codregest']);
    }
    if (isset($nphojint['codregciu']))
    {
      $this->nphojint->setCodregciu($nphojint['codregciu']);
    }
    if (isset($nphojint['grulab']))
    {
      $this->nphojint->setGrulab($nphojint['grulab']);
    }
    if (isset($nphojint['gruotr']))
    {
      $this->nphojint->setGruotr($nphojint['gruotr']);
    }
    if (isset($nphojint['traslado']))
    {
      $this->nphojint->setTraslado($nphojint['traslado']);
    }
    if (isset($nphojint['traotr']))
    {
      $this->nphojint->setTraotr($nphojint['traotr']);
    }
    if (isset($nphojint['numexp']))
    {
      $this->nphojint->setNumexp($nphojint['numexp']);
    }
    if (isset($nphojint['detexp']))
    {
      $this->nphojint->setDetexp($nphojint['detexp']);
    }
    if (isset($nphojint['derzur']))
    {
      $this->nphojint->setDerzur($nphojint['derzur']);
    }
    if (isset($nphojint['tipviv']))
    {
      $this->nphojint->setTipviv($nphojint['tipviv']);
    }
    if (isset($nphojint['vivotr']))
    {
      $this->nphojint->setVivotr($nphojint['vivotr']);
    }
    if (isset($nphojint['forten']))
    {
      $this->nphojint->setForten($nphojint['forten']);
    }
    if (isset($nphojint['tenotr']))
    {
      $this->nphojint->setTenotr($nphojint['tenotr']);
    }
    if (isset($nphojint['sercon']))
    {
      $this->nphojint->setSercon($nphojint['sercon']);
    }
    if (isset($nphojint['temporal']))
    {
      $this->nphojint->setTemporal($nphojint['temporal']);
    }
    if (isset($nphojint['incapacidades']))
    {
      $this->nphojint->setIncapacidades($nphojint['incapacidades']);
    }
    if (isset($nphojint['situac']))
    {
      $this->nphojint->setSituac($nphojint['situac']);
    }
    if (isset($nphojint['profes']))
    {
      $this->nphojint->setProfes($nphojint['profes']);
    }
    if (isset($nphojint['codnivedu']))
    {
      $this->nphojint->setCodnivedu($nphojint['codnivedu']);
    }
    if (isset($nphojint['prinom']))
    {
      $this->nphojint->setPrinom($nphojint['prinom']);
    }
    if (isset($nphojint['segnom']))
    {
      $this->nphojint->setSegnom($nphojint['segnom']);
    }
    if (isset($nphojint['priape']))
    {
      $this->nphojint->setPriape($nphojint['priape']);
    }
    if (isset($nphojint['segape']))
    {
      $this->nphojint->setSegape($nphojint['segape']);
    }
    if (isset($nphojint['ubifis']))
    {
      $this->nphojint->setUbifis($nphojint['ubifis']);
    }
    if (isset($nphojint['codempant']))
    {
      $this->nphojint->setCodempant($nphojint['codempant']);
    }
    if (isset($nphojint['feccoracu']))
    {
      if ($nphojint['feccoracu'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($nphojint['feccoracu']))
          {
            $value = $dateFormat->format($nphojint['feccoracu'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $nphojint['feccoracu'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->nphojint->setFeccoracu($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->nphojint->setFeccoracu(null);
      }
    }
    if (isset($nphojint['capactacu']))
    {
      $this->nphojint->setCapactacu($nphojint['capactacu']);
    }
    if (isset($nphojint['intacu']))
    {
      $this->nphojint->setIntacu($nphojint['intacu']);
    }
    if (isset($nphojint['antacu']))
    {
      $this->nphojint->setAntacu($nphojint['antacu']);
    }
    if (isset($nphojint['diaacu']))
    {
      $this->nphojint->setDiaacu($nphojint['diaacu']);
    }
    if (isset($nphojint['diaadiacu']))
    {
      $this->nphojint->setDiaadiacu($nphojint['diaadiacu']);
    }
    if (isset($nphojint['codtipemp']))
    {
      $this->nphojint->setCodtipemp($nphojint['codtipemp']);
    }
    if (isset($nphojint['desniv']))
    {
      $this->nphojint->setDesniv($nphojint['desniv']);
    }
    if (isset($nphojint['desniv2']))
    {
      $this->nphojint->setDesniv2($nphojint['desniv2']);
    }
    if (isset($nphojint['fecinicon']))
    {
      if ($nphojint['fecinicon'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($nphojint['fecinicon']))
          {
            $value = $dateFormat->format($nphojint['fecinicon'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $nphojint['fecinicon'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->nphojint->setFecinicon($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->nphojint->setFecinicon(null);
      }
    }
    if (isset($nphojint['fecfincon']))
    {
      if ($nphojint['fecfincon'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($nphojint['fecfincon']))
          {
            $value = $dateFormat->format($nphojint['fecfincon'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $nphojint['fecfincon'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->nphojint->setFecfincon($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->nphojint->setFecfincon(null);
      }
    }
    if (isset($nphojint['obsembret']))
    {
      $this->nphojint->setObsembret($nphojint['obsembret']);
    }
    if (isset($nphojint['fecmat']))
    {
      if ($nphojint['fecmat'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($nphojint['fecmat']))
          {
            $value = $dateFormat->format($nphojint['fecmat'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $nphojint['fecmat'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->nphojint->setFecmat($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->nphojint->setFecmat(null);
      }
    }
    if (isset($nphojint['fecingsso']))
    {
      if ($nphojint['fecingsso'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($nphojint['fecingsso']))
          {
            $value = $dateFormat->format($nphojint['fecingsso'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $nphojint['fecingsso'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->nphojint->setFecingsso($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->nphojint->setFecingsso(null);
      }
    }
    $this->nphojint->setPosveh(isset($nphojint['posveh']) ? $nphojint['posveh'] : 0);
    if (isset($nphojint['marveh']))
    {
      $this->nphojint->setMarveh($nphojint['marveh']);
    }
    if (isset($nphojint['modveh']))
    {
      $this->nphojint->setModveh($nphojint['modveh']);
    }
    if (isset($nphojint['colveh']))
    {
      $this->nphojint->setColveh($nphojint['colveh']);
    }
    if (isset($nphojint['anoveh']))
    {
      $this->nphojint->setAnoveh($nphojint['anoveh']);
    }
    if (isset($nphojint['plaveh']))
    {
      $this->nphojint->setPlaveh($nphojint['plaveh']);
    }
    if (isset($nphojint['nomcar']))
    {
      $this->nphojint->setNomcar($nphojint['nomcar']);
    }
    if (isset($nphojint['sueldo']))
    {
      $this->nphojint->setSueldo($nphojint['sueldo']);
    }
    if (isset($nphojint['numpuncue']))
    {
      $this->nphojint->setNumpuncue($nphojint['numpuncue']);
    }
    if (isset($nphojint['emaopc']))
    {
      $this->nphojint->setEmaopc($nphojint['emaopc']);
    }
    $this->nphojint->setPrivehmot(isset($nphojint['privehmot']) ? $nphojint['privehmot'] : 0);
    $this->nphojint->setSoshog(isset($nphojint['soshog']) ? $nphojint['soshog'] : 0);
    $this->nphojint->setCapbie(isset($nphojint['capbie']) ? $nphojint['capbie'] : 0);
    if (isset($nphojint['tipmed']))
    {
      $this->nphojint->setTipmed($nphojint['tipmed']);
    }
    $this->nphojint->setEsalerg(isset($nphojint['esalerg']) ? $nphojint['esalerg'] : 0);
    if (isset($nphojint['desaler']))
    {
      $this->nphojint->setDesaler($nphojint['desaler']);
    }
    if (isset($nphojint['monindem']))
    {
      $this->nphojint->setMonindem($nphojint['monindem']);
    }
    if (isset($nphojint['tipetn']))
    {
      $this->nphojint->setTipetn($nphojint['tipetn']);
    }
    if (isset($nphojint['codpainac']))
    {
      $this->nphojint->setCodpainac($nphojint['codpainac']);
    }
    if (isset($nphojint['numpas']))
    {
      $this->nphojint->setNumpas($nphojint['numpas']);
    }
    if (isset($nphojint['codpro']))
    {
      $this->nphojint->setCodpro($nphojint['codpro']);
    }
    if (isset($nphojint['pesemp']))
    {
      $this->nphojint->setPesemp($nphojint['pesemp']);
    }
    if (isset($nphojint['estemp']))
    {
      $this->nphojint->setEstemp($nphojint['estemp']);
    }
    if (isset($nphojint['fectitular']))
    {
      if ($nphojint['fectitular'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($nphojint['fectitular']))
          {
            $value = $dateFormat->format($nphojint['fectitular'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $nphojint['fectitular'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->nphojint->setFectitular($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->nphojint->setFectitular(null);
      }
    }
    if (isset($nphojint['numcuefid']))
    {
      $this->nphojint->setNumcuefid($nphojint['numcuefid']);
    }
    if (isset($nphojint['tipcuefid']))
    {
      $this->nphojint->setTipcuefid($nphojint['tipcuefid']);
    }
    if (isset($nphojint['codbanfid']))
    {
      $this->nphojint->setCodbanfid($nphojint['codbanfid']);
    }
    $this->nphojint->setTiefun(isset($nphojint['tiefun']) ? $nphojint['tiefun'] : 0);
    if (isset($nphojint['numtarces']))
    {
      $this->nphojint->setNumtarces($nphojint['numtarces']);
    }
    if (isset($nphojint['pritra']))
    {
      $this->nphojint->setPritra($nphojint['pritra']);
    }
    if (isset($nphojint['cuebanmat']))
    {
      $this->nphojint->setCuebanmat($nphojint['cuebanmat']);
    }
    if (isset($nphojint['codofi']))
    {
      $this->nphojint->setCodofi($nphojint['codofi']);
    }
    if (isset($nphojint['coddep']))
    {
      $this->nphojint->setCoddep($nphojint['coddep']);
    }
    if (isset($nphojint['depen']))
    {
      $this->nphojint->setDepen($nphojint['depen']);
    }
    if (isset($nphojint['coddirec']))
    {
      $this->nphojint->setCoddirec($nphojint['coddirec']);
    }
    if (isset($nphojint['codubi']))
    {
      $this->nphojint->setCodubi($nphojint['codubi']);
    }
    if (isset($nphojint['coduniads']))
    {
      $this->nphojint->setCoduniads($nphojint['coduniads']);
    }
    if (isset($nphojint['codpagbon']))
    {
      $this->nphojint->setCodpagbon($nphojint['codpagbon']);
    }
    if (isset($nphojint['codbanbon']))
    {
      $this->nphojint->setCodbanbon($nphojint['codbanbon']);
    }
    if (isset($nphojint['numcuebon']))
    {
      $this->nphojint->setNumcuebon($nphojint['numcuebon']);
    }
    if (isset($nphojint['tipcuebon']))
    {
      $this->nphojint->setTipcuebon($nphojint['tipcuebon']);
    }
  }

  protected function getNphojintOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $nphojint = new Nphojint();
    }
    else
    {
      $nphojint = NphojintPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($nphojint);
    }

    return $nphojint;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/nphojint/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/nphojint/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/nphojint/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/nphojint/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/nphojint/sort'))
    {
      $this->getUser()->setAttribute('sort', 'codemp', 'sf_admin/nphojint/sort');
      $this->getUser()->setAttribute('type', 'asc', 'sf_admin/nphojint/sort');
    }
  }

   protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['codemp_is_empty']))
    {
      $criterion = $c->getNewCriterion(NphojintPeer::CODEMP, '');
      $criterion->addOr($c->getNewCriterion(NphojintPeer::CODEMP, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codemp']) && $this->filters['codemp'] !== '')
    {
      $c->add(NphojintPeer::CODEMP, '%'.strtr($this->filters['codemp'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['nomemp_is_empty']))
    {
      $criterion = $c->getNewCriterion(NphojintPeer::NOMEMP, '');
      $criterion->addOr($c->getNewCriterion(NphojintPeer::NOMEMP, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['nomemp']) && $this->filters['nomemp'] !== '')
    {
      $c->add(NphojintPeer::NOMEMP, '%'.strtr($this->filters['nomemp'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['cedemp_is_empty']))
    {
      $criterion = $c->getNewCriterion(NphojintPeer::CEDEMP, '');
      $criterion->addOr($c->getNewCriterion(NphojintPeer::CEDEMP, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['cedemp']) && $this->filters['cedemp'] !== '')
    {
      $c->add(NphojintPeer::CEDEMP, '%'.strtr($this->filters['cedemp'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['codniv_is_empty']))
    {
      $criterion = $c->getNewCriterion(NphojintPeer::CODNIV, '');
      $criterion->addOr($c->getNewCriterion(NphojintPeer::CODNIV, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codniv']) && $this->filters['codniv'] !== '')
    {
      $c->add(NphojintPeer::CODNIV, '%'.strtr($this->filters['codniv'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['desniv_is_empty']))
    {
      $criterion = $c->getNewCriterion(NphojintPeer::DESNIV, '');
      $criterion->addOr($c->getNewCriterion(NphojintPeer::DESNIV, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['desniv']) && $this->filters['desniv'] !== '')
    {
      $c->add(NphojintPeer::DESNIV, $this->filters['desniv']);
    }
    if (isset($this->filters['codtipemp_is_empty']))
    {
      $criterion = $c->getNewCriterion(NphojintPeer::CODTIPEMP, '');
      $criterion->addOr($c->getNewCriterion(NphojintPeer::CODTIPEMP, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codtipemp']) && $this->filters['codtipemp'] !== '')
    {
      $c->add(NphojintPeer::CODTIPEMP, '%'.strtr($this->filters['codtipemp'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['staemp_is_empty']))
    {
      $criterion = $c->getNewCriterion(NphojintPeer::STAEMP, '');
      $criterion->addOr($c->getNewCriterion(NphojintPeer::STAEMP, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['staemp']) && $this->filters['staemp'] !== '')
    {
      $c->add(NphojintPeer::STAEMP, '%'.strtr($this->filters['staemp'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
  }
  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/nphojint/sort'))
    {
      $sort_column = NphojintPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/nphojint/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'nphojint{codemp}' => 'No. Empleado:',
      'nphojint{nomemp}' => 'Apellido(s) y Nombre(s):',
      'nphojint{cedemp}' => 'C.I.:',
      'nphojint{rifemp}' => 'Rif:',
      'nphojint{edociv}' => 'Estado Civil:',
      'nphojint{numcon}' => 'No. Contrato:',
      'nphojint{nacemp}' => 'Nacionalidad:',
      'nphojint{sexemp}' => 'Sexo:',
      'nphojint{codniv}' => 'Nivel Organizacional:',
      'nphojint{fotemp}' => 'Foto:',
      'nphojint{fotemp}' => 'Foto:',
      'nphojint{lugnac}' => 'Lugar de Nacimiento:',
      'nphojint{fecnac}' => 'Fecha de Nacimiento:',
      'nphojint{edaemp}' => 'Edad:',
      'nphojint{obsgen}' => 'Observaciones:',
      'nphojint{dirhab}' => 'Dirección:',
      'nphojint{codpai}' => 'Estado:',
      'nphojint{codest}' => 'Municipio:',
      'nphojint{codciu}' => 'Parroquia:',
      'nphojint{telhab}' => 'Tlf. Hab:',
      'nphojint{telotr}' => 'Otro Tlf.:',
      'nphojint{celemp}' => 'Celular:',
      'nphojint{dirotr}' => 'Dirección:',
      'nphojint{codpa2}' => 'Estado:',
      'nphojint{codes2}' => 'Municipio:',
      'nphojint{codci2}' => 'Parroquia:',
      'nphojint{telha2}' => 'Telefono:',
      'nphojint{telot2}' => 'Otro Tlf.:',
      'nphojint{emaemp}' => 'Email:',
      'nphojint{codpos}' => 'Código Postal:',
      'nphojint{fecing}' => 'Ingreso:',
      'nphojint{fecret}' => 'Egreso:',
      'nphojint{fecrei}' => 'Reingreso:',
      'nphojint{codmot}' => 'Motivo de Egreso:',
      'nphojint{staemp}' => 'Estatus del Empleado:',
      'nphojint{codtippag}' => 'Forma de Pago:',
      'nphojint{codban}' => 'Banco:',
      'nphojint{numcue}' => 'Número de Cuenta:',
      'nphojint{tipcue}' => 'Tipo de Cuenta:',
      'nphojint{numcueaho}' => 'N° Cuenta:',
      'nphojint{tipcueaho}' => 'Tipo de Cuenta:',
      'nphojint{fecadmpub}' => 'Fecha en la Administración Pública:',
      'nphojint{numsso}' => 'Numero de S.S.O:',
      'nphojint{numpolseg}' => 'Número dde Póliza de Seguro:',
      'nphojint{feccotsso}' => 'Fecha de Cotización de S.S.O:',
      'nphojint{anoadmpub}' => 'Años de Continuidad en la Administración Pública:',
      'nphojint{tiefid}' => 'Fideicomiso:',
      'nphojint{talcam}' => 'Talla Camisa:',
      'nphojint{talpan}' => 'Talla Pantalón:',
      'nphojint{talcal}' => 'No. de Calzado:',
      'nphojint{grusan}' => 'Grupo Sanguineo:',
      'nphojint{codregpai}' => 'Estado:',
      'nphojint{codregest}' => 'Municipio:',
      'nphojint{codregciu}' => 'Parroquia:',
      'nphojint{grulab}' => 'Grupo Laboral:',
      'nphojint{gruotr}' => 'Descripción:',
      'nphojint{traslado}' => 'Forma de Translado:',
      'nphojint{traotr}' => 'Descripción:',
      'nphojint{numexp}' => 'Número:',
      'nphojint{detexp}' => 'Contenido:',
      'nphojint{derzur}' => 'DerechoZurdo:',
      'nphojint{tipviv}' => 'Tipo de Vivienda:',
      'nphojint{vivotr}' => 'Descripción:',
      'nphojint{forten}' => 'Forma de Tenencia:',
      'nphojint{tenotr}' => 'Descripción:',
      'nphojint{sercon}' => 'Servicios:',
      'nphojint{temporal}' => 'Temporal:',
      'nphojint{incapacidades}' => 'Discapacidades:',
      'nphojint{situac}' => 'Situación:',
      'nphojint{profes}' => 'Profesional:',
      'nphojint{codnivedu}' => 'Grado de Prima Profesional:',
      'nphojint{prinom}' => 'Primer Nombre:',
      'nphojint{segnom}' => 'Segundo Nombre:',
      'nphojint{priape}' => 'Primer Apellido:',
      'nphojint{segape}' => 'Segundo Apellido:',
      'nphojint{ubifis}' => 'Ubicacion Fisica:',
      'nphojint{codempant}' => 'No. Empleado Anterior:',
      'nphojint{feccoracu}' => 'Fecha de Corte Acumulado:',
      'nphojint{capactacu}' => 'Capital Actual Acumulado:',
      'nphojint{intacu}' => 'Interes Acumulado:',
      'nphojint{antacu}' => 'Anticipos Acumulados:',
      'nphojint{diaacu}' => 'Dias Acumulados:',
      'nphojint{diaadiacu}' => 'Dias Adicionales Acumulados:',
      'nphojint{codtipemp}' => 'Tipo de Empleado:',
      'nphojint{desniv}' => 'Descripción:',
      'nphojint{desniv2}' => 'Descripción:',
      'nphojint{fecinicon}' => 'Fecha Inicio Contrato:',
      'nphojint{fecfincon}' => 'Fecha Fin Contrato:',
      'nphojint{obsembret}' => 'Datos:',
      'nphojint{fecmat}' => 'Fecha en que se Caso:',
      'nphojint{fecingsso}' => 'Fecha Inscripción SSO:',
      'nphojint{posveh}' => '¿Posee Vehiculo Propio?:',
      'nphojint{marveh}' => 'Marca:',
      'nphojint{modveh}' => 'Modelo:',
      'nphojint{colveh}' => 'Color:',
      'nphojint{anoveh}' => 'Año:',
      'nphojint{plaveh}' => 'Placa:',
      'nphojint{nomcar}' => 'Cargo:',
      'nphojint{sueldo}' => 'Sueldo:',
      'nphojint{numpuncue}' => 'n° Punto de Cuenta:',
      'nphojint{emaopc}' => 'Email Opcional:',
      'nphojint{privehmot}' => 'Tiene Prima por vehiculo ó Moto?:',
      'nphojint{soshog}' => 'Sósten de Hogar?:',
      'nphojint{capbie}' => 'Su Matrimonio es por Capitulación?:',
      'nphojint{tipmed}' => 'Tipos de Medicamentos que consume:',
      'nphojint{esalerg}' => 'Es alérgico?:',
      'nphojint{desaler}' => 'Describa aque es alérgico:',
      'nphojint{monindem}' => 'Monto de Indemnización de vida:',
      'nphojint{tipetn}' => 'Tipo de Étnia:',
      'nphojint{codpainac}' => 'País de Nacimiento:',
      'nphojint{numpas}' => 'Número de Pasaporte:',
      'nphojint{codpro}' => 'Proyecto:',
      'nphojint{pesemp}' => 'Peso:',
      'nphojint{estemp}' => 'Estatura:',
      'nphojint{fectitular}' => 'Fecha de Titularidad:',
      'nphojint{numcuefid}' => 'Cuenta Fideicomiso:',
      'nphojint{tipcuefid}' => 'Tipo Cta. Fideicomiso:',
      'nphojint{codbanfid}' => 'Banco Fideicomiso:',
      'nphojint{tiefun}' => 'Tiene Seguro Funerario?:',
      'nphojint{numtarces}' => 'N° Tarjeta Cestatickets:',
      'nphojint{pritra}' => '¿Tiene Prima Transporte?:',
      'nphojint{cuebanmat}' => 'Cuenta Bancaria Matriz:',
      'nphojint{codofi}' => 'Oficina:',
      'nphojint{coddep}' => 'Dependencia:',
      'nphojint{depen}' => 'Dependencia:',
      'nphojint{coddirec}' => 'Estado:',
      'nphojint{codubi}' => 'Localidad:',
      'nphojint{coduniads}' => 'Unidad de Adscripción:',
      'nphojint{codpagbon}' => 'Forma de Pago:',
      'nphojint{codbanbon}' => 'Banco:',
      'nphojint{numcuebon}' => 'Número de Cuenta:',
      'nphojint{tipcuebon}' => 'Tipo de Cuenta:',
    );
  }

    public function executeCatalogo()
  {
    $codigo = $this->getRequestParameter('codigo','');
    $clase = $this->getRequestParameter('clase','');
    $nombre = $this->getRequestParameter('name','');
    $campobase = $this->getRequestParameter('campobase','');
    $campoprincipal = $this->getRequestParameter('campoprincipal','');
    $camposecundario = $this->getRequestParameter('camposecundario','');

    $c = new Criteria();
    eval('$c->add('.ucfirst(strtolower($clase)).'Peer::'.strtoupper($campoprincipal).','.chr(39).$codigo.chr(39).');');
    eval('$peer = '.ucfirst(strtolower($clase)).'Peer::doSelectOne($c);');

  eval('$cajasec = "'.strtolower($nombre).'_'.strtolower($camposecundario).'";');
  eval('$cajaid = "'.strtolower($nombre).'_'.strtolower($campobase).'";');
  $valsec="";
  $valid="";
  eval('if ($peer) $valsec = $peer->get'.H::ObtenerNombreCampo($camposecundario).'();');
  eval('if ($peer) $valid = $peer->getId();');
  $output = '[["'.$cajasec.'","'.$valsec.'",""],["'.$cajaid.'","'.$valid.'",""],["","",""]]';
    $this->getResponse()->setHttpHeader("X-JSON", '('.$output.')');
    return sfView::HEADER_ONLY;
  }

  public function SalvarBitacora($id, $acc)
  {
    try{
      $segbitaco= new Segbitaco();
      $fecha=date('Y-m-d');

      $segbitaco->setCodintusu($this->getUser()->getAttribute('usuario_id'));
      $segbitaco->setTipope(substr($acc, 0, 1));
      $segbitaco->setCodmod('nomhojint');
      $segbitaco->setValcla('Nphojint');
      $segbitaco->setCodapl(substr(SF_APP, 0, 3));
      $segbitaco->setFecope($fecha);
      $segbitaco->setHorope(time('h:i:s'));
      $segbitaco->setRefmov($id);
      $segbitaco->save();
    }catch(Exception $e){

    }
  }

  public function Bitacora($acc)
  {
    if ($this->nphojint )
    {
      $id= $this->nphojint->getId();
      $this->SalvarBitacora($id ,$acc);
    }
  }

}
