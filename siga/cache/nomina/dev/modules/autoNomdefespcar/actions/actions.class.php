<?php
// auto-generated by sfPropelAdmin
// date: 2017/02/13 06:09:07
?>
<?php

/**
 * autoNomdefespcar actions.
 *
 * @package    Roraima
 * @subpackage autoNomdefespcar 
 * @author     $Author: lhernandez $ <desarrollo@cidesa.com.ve>
 * @version    SVN: $Id: actions.class.php 32371 2009-09-01 16:06:59Z lhernandez $
 */
class autoNomdefespcarActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('nomdefespcar', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/npcargos/filters');


     // 15    // pager
    $this->pager = new sfPropelPager('Npcargos', 15);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('nomdefespcar', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('nomdefespcar', 'edit');
  }

  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  public function executeEdit()
  {
    $this->npcargos = $this->getNpcargosOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateNpcargosFromRequest();

      $this->saveNpcargos($this->npcargos);

      $this->setFlash('notice', 'Your modifications have been saved');

    $this->Bitacora('Guardo');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('nomdefespcar/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('nomdefespcar/list');
      }
      else
      {
        return $this->redirect('nomdefespcar/edit?id='.$this->npcargos->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->npcargos = NpcargosPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->npcargos);

    try
    {
      $this->deleteNpcargos($this->npcargos);
      $this->Bitacora('Elimino');
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'No se pudo borrar la registro seleccionado. Asegúrese de que no tiene ningún tipo de registros asociados.');
      return $this->forward('nomdefespcar', 'list');
    }

    return $this->redirect('nomdefespcar/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->npcargos = $this->getNpcargosOrCreate();
    $this->updateNpcargosFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveNpcargos($npcargos)
  {
    $npcargos->save();

      // Update many-to-many for "profecargo"
      $c = new Criteria();
      $c->add(NpprocarPeer::CODCAR, $npcargos->getPrimaryKey());
      NpprocarPeer::doDelete($c);

      $ids = $this->getRequestParameter('associated_profecargo');
      if (is_array($ids))
      {
        foreach ($ids as $id)
        {
          $Npprocar = new Npprocar();
          $Npprocar->setCodcar($npcargos->getPrimaryKey());
          $Npprocar->setCodprofes($id);
          $Npprocar->save();
        }
      }

  }

  protected function deleteNpcargos($npcargos)
  {
    $npcargos->delete();
  }

  protected function updateNpcargosFromRequest()
  {
    $npcargos = $this->getRequestParameter('npcargos');

    if (isset($npcargos['codcar']))
    {
      $this->npcargos->setCodcar($npcargos['codcar']);
    }
    if (isset($npcargos['nomcar']))
    {
      $this->npcargos->setNomcar($npcargos['nomcar']);
    }
    if (isset($npcargos['codtip']))
    {
      $this->npcargos->setCodtip($npcargos['codtip']);
    }
    if (isset($npcargos['graocp']))
    {
      $this->npcargos->setGraocp($npcargos['graocp']);
    }
    if (isset($npcargos['suecar']))
    {
      $this->npcargos->setSuecar($npcargos['suecar']);
    }
    if (isset($npcargos['punmin']))
    {
      $this->npcargos->setPunmin($npcargos['punmin']);
    }
    if (isset($npcargos['stacar']))
    {
      $this->npcargos->setStacar($npcargos['stacar']);
    }
    if (isset($npcargos['profecargo']))
    {
      $this->npcargos->setProfecargo($npcargos['profecargo']);
    }
    if (isset($npcargos['comcar']))
    {
      $this->npcargos->setComcar($npcargos['comcar']);
    }
    if (isset($npcargos['pricar']))
    {
      $this->npcargos->setPricar($npcargos['pricar']);
    }
    if (isset($npcargos['canmuj']))
    {
      $this->npcargos->setCanmuj($npcargos['canmuj']);
    }
    if (isset($npcargos['canhom']))
    {
      $this->npcargos->setCanhom($npcargos['canhom']);
    }
    if (isset($npcargos['canpmuj']))
    {
      $this->npcargos->setCanpmuj($npcargos['canpmuj']);
    }
    if (isset($npcargos['canphom']))
    {
      $this->npcargos->setCanphom($npcargos['canphom']);
    }
    if (isset($npcargos['canvmuj']))
    {
      $this->npcargos->setCanvmuj($npcargos['canvmuj']);
    }
    if (isset($npcargos['canvhom']))
    {
      $this->npcargos->setCanvhom($npcargos['canvhom']);
    }
    if (isset($npcargos['carvan']))
    {
      $this->npcargos->setCarvan($npcargos['carvan']);
    }
    if (isset($npcargos['carasi']))
    {
      $this->npcargos->setCarasi($npcargos['carasi']);
    }
    if (isset($npcargos['porcen']))
    {
      $this->npcargos->setPorcen($npcargos['porcen']);
    }
    if (isset($npcargos['canmix']))
    {
      $this->npcargos->setCanmix($npcargos['canmix']);
    }
    if (isset($npcargos['canpmix']))
    {
      $this->npcargos->setCanpmix($npcargos['canpmix']);
    }
    if (isset($npcargos['canvmix']))
    {
      $this->npcargos->setCanvmix($npcargos['canvmix']);
    }
    if (isset($npcargos['codniv']))
    {
      $this->npcargos->setCodniv($npcargos['codniv']);
    }
    if (isset($npcargos['retcar']))
    {
      $this->npcargos->setRetcar($npcargos['retcar']);
    }
  }

  protected function getNpcargosOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $npcargos = new Npcargos();
    }
    else
    {
      $npcargos = NpcargosPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($npcargos);
    }

    return $npcargos;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/npcargos/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/npcargos/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/npcargos/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/npcargos/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/npcargos/sort'))
    {
      $this->getUser()->setAttribute('sort', 'codcar', 'sf_admin/npcargos/sort');
      $this->getUser()->setAttribute('type', 'asc', 'sf_admin/npcargos/sort');
    }
  }

   protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['codcar_is_empty']))
    {
      $criterion = $c->getNewCriterion(NpcargosPeer::CODCAR, '');
      $criterion->addOr($c->getNewCriterion(NpcargosPeer::CODCAR, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codcar']) && $this->filters['codcar'] !== '')
    {
      $c->add(NpcargosPeer::CODCAR, '%'.strtr($this->filters['codcar'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['nomcar_is_empty']))
    {
      $criterion = $c->getNewCriterion(NpcargosPeer::NOMCAR, '');
      $criterion->addOr($c->getNewCriterion(NpcargosPeer::NOMCAR, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['nomcar']) && $this->filters['nomcar'] !== '')
    {
      $c->add(NpcargosPeer::NOMCAR, '%'.strtr($this->filters['nomcar'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
  }
  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/npcargos/sort'))
    {
      $sort_column = NpcargosPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/npcargos/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'npcargos{codcar}' => 'Código:',
      'npcargos{nomcar}' => 'Descripción:',
      'npcargos{codtip}' => 'Tipo de Cargo:',
      'npcargos{graocp}' => 'Grado:',
      'npcargos{suecar}' => 'Sueldo:',
      'npcargos{punmin}' => 'Puntuacion Mínima:',
      'npcargos{stacar}' => 'Categoria del Cargo:',
      'npcargos{profecargo}' => 'Profesiones por Cargos:',
      'npcargos{comcar}' => 'Compensación:',
      'npcargos{pricar}' => 'Prima:',
      'npcargos{canmuj}' => 'Cargos para Mujeres:',
      'npcargos{canhom}' => 'Cargos para Hombres:',
      'npcargos{canpmuj}' => 'Cargos para Mujeres:',
      'npcargos{canphom}' => 'Cargos para Hombres:',
      'npcargos{canvmuj}' => 'Cargos para Mujeres:',
      'npcargos{canvhom}' => 'Cargos para Hombres:',
      'npcargos{carvan}' => 'Cargos Vacantes:',
      'npcargos{carasi}' => 'Cargos Asignados:',
      'npcargos{porcen}' => 'Porcentaje:',
      'npcargos{canmix}' => 'Cargos Mixtos:',
      'npcargos{canpmix}' => 'Cargos Mixtos:',
      'npcargos{canvmix}' => 'Cargos Mixtos:',
      'npcargos{codniv}' => 'Nivel del Trabajador:',
      'npcargos{retcar}' => 'Retribución:',
    );
  }

    public function executeCatalogo()
  {
    $codigo = $this->getRequestParameter('codigo','');
    $clase = $this->getRequestParameter('clase','');
    $nombre = $this->getRequestParameter('name','');
    $campobase = $this->getRequestParameter('campobase','');
    $campoprincipal = $this->getRequestParameter('campoprincipal','');
    $camposecundario = $this->getRequestParameter('camposecundario','');

    $c = new Criteria();
    eval('$c->add('.ucfirst(strtolower($clase)).'Peer::'.strtoupper($campoprincipal).','.chr(39).$codigo.chr(39).');');
    eval('$peer = '.ucfirst(strtolower($clase)).'Peer::doSelectOne($c);');

  eval('$cajasec = "'.strtolower($nombre).'_'.strtolower($camposecundario).'";');
  eval('$cajaid = "'.strtolower($nombre).'_'.strtolower($campobase).'";');
  $valsec="";
  $valid="";
  eval('if ($peer) $valsec = $peer->get'.H::ObtenerNombreCampo($camposecundario).'();');
  eval('if ($peer) $valid = $peer->getId();');
  $output = '[["'.$cajasec.'","'.$valsec.'",""],["'.$cajaid.'","'.$valid.'",""],["","",""]]';
    $this->getResponse()->setHttpHeader("X-JSON", '('.$output.')');
    return sfView::HEADER_ONLY;
  }

  public function SalvarBitacora($id, $acc)
  {
    try{
      $segbitaco= new Segbitaco();
      $fecha=date('Y-m-d');

      $segbitaco->setCodintusu($this->getUser()->getAttribute('usuario_id'));
      $segbitaco->setTipope(substr($acc, 0, 1));
      $segbitaco->setCodmod('nomdefespcar');
      $segbitaco->setValcla('Npcargos');
      $segbitaco->setCodapl(substr(SF_APP, 0, 3));
      $segbitaco->setFecope($fecha);
      $segbitaco->setHorope(time('h:i:s'));
      $segbitaco->setRefmov($id);
      $segbitaco->save();
    }catch(Exception $e){

    }
  }

  public function Bitacora($acc)
  {
    if ($this->npcargos )
    {
      $id= $this->npcargos->getId();
      $this->SalvarBitacora($id ,$acc);
    }
  }

}
