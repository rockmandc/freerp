<?php
// auto-generated by sfPropelAdmin
// date: 2017/02/13 05:41:41
?>
<?php

/**
 * autoNomdefespgen actions.
 *
 * @package    Roraima
 * @subpackage autoNomdefespgen 
 * @author     $Author: lhernandez $ <desarrollo@cidesa.com.ve>
 * @version    SVN: $Id: actions.class.php 32371 2009-09-01 16:06:59Z lhernandez $
 */
class autoNomdefespgenActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('nomdefespgen', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/npdefgen/filters');


     // 15    // pager
    $this->pager = new sfPropelPager('Npdefgen', 15);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('nomdefespgen', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('nomdefespgen', 'edit');
  }

  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  public function executeEdit()
  {
    $this->npdefgen = $this->getNpdefgenOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateNpdefgenFromRequest();

      $this->saveNpdefgen($this->npdefgen);

      $this->setFlash('notice', 'Your modifications have been saved');

    $this->Bitacora('Guardo');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('nomdefespgen/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('nomdefespgen/list');
      }
      else
      {
        return $this->redirect('nomdefespgen/edit?id='.$this->npdefgen->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->npdefgen = NpdefgenPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->npdefgen);

    try
    {
      $this->deleteNpdefgen($this->npdefgen);
      $this->Bitacora('Elimino');
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'No se pudo borrar la registro seleccionado. Asegúrese de que no tiene ningún tipo de registros asociados.');
      return $this->forward('nomdefespgen', 'list');
    }

    return $this->redirect('nomdefespgen/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->npdefgen = $this->getNpdefgenOrCreate();
    $this->updateNpdefgenFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveNpdefgen($npdefgen)
  {
    $npdefgen->save();

  }

  protected function deleteNpdefgen($npdefgen)
  {
    $npdefgen->delete();
  }

  protected function updateNpdefgenFromRequest()
  {
    $npdefgen = $this->getRequestParameter('npdefgen');

    if (isset($npdefgen['codemp']))
    {
      $this->npdefgen->setCodemp($npdefgen['codemp']);
    }
    if (isset($npdefgen['nomemp']))
    {
      $this->npdefgen->setNomemp($npdefgen['nomemp']);
    }
    if (isset($npdefgen['forcar']))
    {
      $this->npdefgen->setForcar($npdefgen['forcar']);
    }
    if (isset($npdefgen['foremp']))
    {
      $this->npdefgen->setForemp($npdefgen['foremp']);
    }
    if (isset($npdefgen['fororg']))
    {
      $this->npdefgen->setFororg($npdefgen['fororg']);
    }
    if (isset($npdefgen['foruni']))
    {
      $this->npdefgen->setForuni($npdefgen['foruni']);
    }
    if (isset($npdefgen['foresc']))
    {
      $this->npdefgen->setForesc($npdefgen['foresc']);
    }
    if (isset($npdefgen['numrec']))
    {
      $this->npdefgen->setNumrec($npdefgen['numrec']);
    }
    if (isset($npdefgen['unitrib']))
    {
      $this->npdefgen->setUnitrib($npdefgen['unitrib']);
    }
    if (isset($npdefgen['redmon']))
    {
      $this->npdefgen->setRedmon($npdefgen['redmon']);
    }
    if (isset($npdefgen['codpre']))
    {
      $this->npdefgen->setCodpre($npdefgen['codpre']);
    }
    if (isset($npdefgen['asiconnom']))
    {
      $this->npdefgen->setAsiconnom($npdefgen['asiconnom']);
    }
    if (isset($npdefgen['redondeo']))
    {
      $this->npdefgen->setRedondeo($npdefgen['redondeo']);
    }
    if (isset($npdefgen['forced']))
    {
      $this->npdefgen->setForced($npdefgen['forced']);
    }
    if (isset($npdefgen['corayu']))
    {
      $this->npdefgen->setCorayu($npdefgen['corayu']);
    }
    if (isset($npdefgen['suemin']))
    {
      $this->npdefgen->setSuemin($npdefgen['suemin']);
    }
    if (isset($npdefgen['codsitemp']))
    {
      $this->npdefgen->setCodsitemp($npdefgen['codsitemp']);
    }
    if (isset($npdefgen['codestemp']))
    {
      $this->npdefgen->setCodestemp($npdefgen['codestemp']);
    }
    if (isset($npdefgen['codtipgas']))
    {
      $this->npdefgen->setCodtipgas($npdefgen['codtipgas']);
    }
    if (isset($npdefgen['corpto']))
    {
      $this->npdefgen->setCorpto($npdefgen['corpto']);
    }
  }

  protected function getNpdefgenOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $npdefgen = new Npdefgen();
    }
    else
    {
      $npdefgen = NpdefgenPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($npdefgen);
    }

    return $npdefgen;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/npdefgen/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/npdefgen/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/npdefgen/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/npdefgen/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/npdefgen/sort'))
    {
    }
  }

   protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['codemp_is_empty']))
    {
      $criterion = $c->getNewCriterion(NpdefgenPeer::CODEMP, '');
      $criterion->addOr($c->getNewCriterion(NpdefgenPeer::CODEMP, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codemp']) && $this->filters['codemp'] !== '')
    {
      $c->add(NpdefgenPeer::CODEMP, '%'.strtr($this->filters['codemp'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
  }
  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/npdefgen/sort'))
    {
      $sort_column = NpdefgenPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/npdefgen/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'npdefgen{codemp}' => 'Código Empresa:',
      'npdefgen{nomemp}' => 'Nombre Empresa:',
      'npdefgen{forcar}' => 'Cargo:',
      'npdefgen{foremp}' => 'Empleado:',
      'npdefgen{fororg}' => 'Nivel Organizacional:',
      'npdefgen{foruni}' => 'Unidad Ejecutora:',
      'npdefgen{foresc}' => 'Escuelas:',
      'npdefgen{numrec}' => 'Num. Recibo:',
      'npdefgen{unitrib}' => 'Valor Unidad Tributaria:',
      'npdefgen{redmon}' => 'Redondeo para los Calculos:',
      'npdefgen{codpre}' => 'Presupuestar Cargos:',
      'npdefgen{asiconnom}' => 'Asignar Conceptos a la Nómina:',
      'npdefgen{redondeo}' => 'Convertir Capital de Prestaciones a Bsf. a Partir del 2008:',
      'npdefgen{forced}' => 'Formato Cédula:',
      'npdefgen{corayu}' => 'Correlativo de Solicitud de Ayuda:',
      'npdefgen{suemin}' => 'Valor Sueldo Minimo:',
      'npdefgen{codsitemp}' => 'Situación del Empleado:',
      'npdefgen{codestemp}' => 'Estatus del Empleado:',
      'npdefgen{codtipgas}' => 'Tipo de Gasto del Empleado:',
      'npdefgen{corpto}' => 'Correlativo de Punto de Cuenta:',
    );
  }

    public function executeCatalogo()
  {
    $codigo = $this->getRequestParameter('codigo','');
    $clase = $this->getRequestParameter('clase','');
    $nombre = $this->getRequestParameter('name','');
    $campobase = $this->getRequestParameter('campobase','');
    $campoprincipal = $this->getRequestParameter('campoprincipal','');
    $camposecundario = $this->getRequestParameter('camposecundario','');

    $c = new Criteria();
    eval('$c->add('.ucfirst(strtolower($clase)).'Peer::'.strtoupper($campoprincipal).','.chr(39).$codigo.chr(39).');');
    eval('$peer = '.ucfirst(strtolower($clase)).'Peer::doSelectOne($c);');

  eval('$cajasec = "'.strtolower($nombre).'_'.strtolower($camposecundario).'";');
  eval('$cajaid = "'.strtolower($nombre).'_'.strtolower($campobase).'";');
  $valsec="";
  $valid="";
  eval('if ($peer) $valsec = $peer->get'.H::ObtenerNombreCampo($camposecundario).'();');
  eval('if ($peer) $valid = $peer->getId();');
  $output = '[["'.$cajasec.'","'.$valsec.'",""],["'.$cajaid.'","'.$valid.'",""],["","",""]]';
    $this->getResponse()->setHttpHeader("X-JSON", '('.$output.')');
    return sfView::HEADER_ONLY;
  }

  public function SalvarBitacora($id, $acc)
  {
    try{
      $segbitaco= new Segbitaco();
      $fecha=date('Y-m-d');

      $segbitaco->setCodintusu($this->getUser()->getAttribute('usuario_id'));
      $segbitaco->setTipope(substr($acc, 0, 1));
      $segbitaco->setCodmod('nomdefespgen');
      $segbitaco->setValcla('Npdefgen');
      $segbitaco->setCodapl(substr(SF_APP, 0, 3));
      $segbitaco->setFecope($fecha);
      $segbitaco->setHorope(time('h:i:s'));
      $segbitaco->setRefmov($id);
      $segbitaco->save();
    }catch(Exception $e){

    }
  }

  public function Bitacora($acc)
  {
    if ($this->npdefgen )
    {
      $id= $this->npdefgen->getId();
      $this->SalvarBitacora($id ,$acc);
    }
  }

}
