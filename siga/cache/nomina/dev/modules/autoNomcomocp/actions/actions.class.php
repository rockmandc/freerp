<?php
// auto-generated by sfPropelAdmin
// date: 2017/02/13 06:11:03
?>
<?php

/**
 * autoNomcomocp actions.
 *
 * @package    Roraima
 * @subpackage autoNomcomocp 
 * @author     $Author: lhernandez $ <desarrollo@cidesa.com.ve>
 * @version    SVN: $Id: actions.class.php 32371 2009-09-01 16:06:59Z lhernandez $
 */
class autoNomcomocpActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('nomcomocp', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/npcomocp/filters');


     // 15    // pager
    $this->pager = new sfPropelPager('Npcomocp', 15);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('nomcomocp', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('nomcomocp', 'edit');
  }

  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  public function executeEdit()
  {
    $this->npcomocp = $this->getNpcomocpOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateNpcomocpFromRequest();

      $this->saveNpcomocp($this->npcomocp);

      $this->setFlash('notice', 'Your modifications have been saved');

    $this->Bitacora('Guardo');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('nomcomocp/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('nomcomocp/list');
      }
      else
      {
        return $this->redirect('nomcomocp/edit?id='.$this->npcomocp->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->npcomocp = NpcomocpPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->npcomocp);

    try
    {
      $this->deleteNpcomocp($this->npcomocp);
      $this->Bitacora('Elimino');
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'No se pudo borrar la registro seleccionado. Asegúrese de que no tiene ningún tipo de registros asociados.');
      return $this->forward('nomcomocp', 'list');
    }

    return $this->redirect('nomcomocp/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->npcomocp = $this->getNpcomocpOrCreate();
    $this->updateNpcomocpFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveNpcomocp($npcomocp)
  {
    $npcomocp->save();

  }

  protected function deleteNpcomocp($npcomocp)
  {
    $npcomocp->delete();
  }

  protected function updateNpcomocpFromRequest()
  {
    $npcomocp = $this->getRequestParameter('npcomocp');

    if (isset($npcomocp['codtipcar']))
    {
      $this->npcomocp->setCodtipcar($npcomocp['codtipcar']);
    }
    if (isset($npcomocp['pascar']))
    {
      $this->npcomocp->setPascar($npcomocp['pascar']);
    }
    if (isset($npcomocp['fecdes']))
    {
      if ($npcomocp['fecdes'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($npcomocp['fecdes']))
          {
            $value = $dateFormat->format($npcomocp['fecdes'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $npcomocp['fecdes'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->npcomocp->setFecdes($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->npcomocp->setFecdes(null);
      }
    }
    if (isset($npcomocp['grades']))
    {
      $this->npcomocp->setGrades($npcomocp['grades']);
    }
    if (isset($npcomocp['grahas']))
    {
      $this->npcomocp->setGrahas($npcomocp['grahas']);
    }
  }

  protected function getNpcomocpOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $npcomocp = new Npcomocp();
    }
    else
    {
      $npcomocp = NpcomocpPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($npcomocp);
    }

    return $npcomocp;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');
      if (isset($filters['fecdes']['from']) && $filters['fecdes']['from'] !== '')
      {
        $filters['fecdes']['from'] = sfI18N::getTimestampForCulture($filters['fecdes']['from'], $this->getUser()->getCulture());
      }
      if (isset($filters['fecdes']['to']) && $filters['fecdes']['to'] !== '')
      {
        $filters['fecdes']['to'] = sfI18N::getTimestampForCulture($filters['fecdes']['to'], $this->getUser()->getCulture());
      }

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/npcomocp/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/npcomocp/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/npcomocp/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/npcomocp/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/npcomocp/sort'))
    {
    }
  }

   protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['codtipcar_is_empty']))
    {
      $criterion = $c->getNewCriterion(NpcomocpPeer::CODTIPCAR, '');
      $criterion->addOr($c->getNewCriterion(NpcomocpPeer::CODTIPCAR, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codtipcar']) && $this->filters['codtipcar'] !== '')
    {
      $c->add(NpcomocpPeer::CODTIPCAR, '%'.strtr($this->filters['codtipcar'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['fecdes_is_empty']))
    {
      $criterion = $c->getNewCriterion(NpcomocpPeer::FECDES, '');
      $criterion->addOr($c->getNewCriterion(NpcomocpPeer::FECDES, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['fecdes']))
    {
      if (isset($this->filters['fecdes']['from']) && $this->filters['fecdes']['from'] !== '')
      {
        $criterion = $c->getNewCriterion(NpcomocpPeer::FECDES, date('Y-m-d', $this->filters['fecdes']['from']), Criteria::GREATER_EQUAL);
      }
      if (isset($this->filters['fecdes']['to']) && $this->filters['fecdes']['to'] !== '')
      {
        if (isset($criterion))
        {
          $criterion->addAnd($c->getNewCriterion(NpcomocpPeer::FECDES, date('Y-m-d', $this->filters['fecdes']['to']), Criteria::LESS_EQUAL));
        }
        else
        {
          $criterion = $c->getNewCriterion(NpcomocpPeer::FECDES, date('Y-m-d', $this->filters['fecdes']['to']), Criteria::LESS_EQUAL);
        }
      }

      if (isset($criterion))
      {
        $c->add($criterion);
      }
    }
  }
  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/npcomocp/sort'))
    {
      $sort_column = NpcomocpPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/npcomocp/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'npcomocp{codtipcar}' => 'Cod. Tipo Cargo:',
      'npcomocp{pascar}' => 'Nro. Pasos:',
      'npcomocp{fecdes}' => 'Vigencia:',
      'npcomocp{grades}' => 'Grado Desde:',
      'npcomocp{grahas}' => 'Grado Hasta:',
    );
  }

    public function executeCatalogo()
  {
    $codigo = $this->getRequestParameter('codigo','');
    $clase = $this->getRequestParameter('clase','');
    $nombre = $this->getRequestParameter('name','');
    $campobase = $this->getRequestParameter('campobase','');
    $campoprincipal = $this->getRequestParameter('campoprincipal','');
    $camposecundario = $this->getRequestParameter('camposecundario','');

    $c = new Criteria();
    eval('$c->add('.ucfirst(strtolower($clase)).'Peer::'.strtoupper($campoprincipal).','.chr(39).$codigo.chr(39).');');
    eval('$peer = '.ucfirst(strtolower($clase)).'Peer::doSelectOne($c);');

  eval('$cajasec = "'.strtolower($nombre).'_'.strtolower($camposecundario).'";');
  eval('$cajaid = "'.strtolower($nombre).'_'.strtolower($campobase).'";');
  $valsec="";
  $valid="";
  eval('if ($peer) $valsec = $peer->get'.H::ObtenerNombreCampo($camposecundario).'();');
  eval('if ($peer) $valid = $peer->getId();');
  $output = '[["'.$cajasec.'","'.$valsec.'",""],["'.$cajaid.'","'.$valid.'",""],["","",""]]';
    $this->getResponse()->setHttpHeader("X-JSON", '('.$output.')');
    return sfView::HEADER_ONLY;
  }

  public function SalvarBitacora($id, $acc)
  {
    try{
      $segbitaco= new Segbitaco();
      $fecha=date('Y-m-d');

      $segbitaco->setCodintusu($this->getUser()->getAttribute('usuario_id'));
      $segbitaco->setTipope(substr($acc, 0, 1));
      $segbitaco->setCodmod('nomcomocp');
      $segbitaco->setValcla('Npcomocp');
      $segbitaco->setCodapl(substr(SF_APP, 0, 3));
      $segbitaco->setFecope($fecha);
      $segbitaco->setHorope(time('h:i:s'));
      $segbitaco->setRefmov($id);
      $segbitaco->save();
    }catch(Exception $e){

    }
  }

  public function Bitacora($acc)
  {
    if ($this->npcomocp )
    {
      $id= $this->npcomocp->getId();
      $this->SalvarBitacora($id ,$acc);
    }
  }

}
