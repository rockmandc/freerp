<?php
// auto-generated by sfPropelAdmin
// date: 2017/02/13 06:10:26
?>
<?php

/**
 * autoNomasicarconnom actions.
 *
 * @package    Roraima
 * @subpackage autoNomasicarconnom 
 * @author     $Author: lhernandez $ <desarrollo@cidesa.com.ve>
 * @version    SVN: $Id: actions.class.php 32371 2009-09-01 16:06:59Z lhernandez $
 */
class autoNomasicarconnomActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('nomasicarconnom', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/npasicaremp/filters');


     // 15    // pager
    $this->pager = new sfPropelPager('Npasicaremp', 15);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('nomasicarconnom', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('nomasicarconnom', 'edit');
  }

  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  public function executeEdit()
  {
    $this->npasicaremp = $this->getNpasicarempOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateNpasicarempFromRequest();

      $this->saveNpasicaremp($this->npasicaremp);

      $this->setFlash('notice', 'Your modifications have been saved');

    $this->Bitacora('Guardo');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('nomasicarconnom/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('nomasicarconnom/list');
      }
      else
      {
        return $this->redirect('nomasicarconnom/edit?id='.$this->npasicaremp->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->npasicaremp = NpasicarempPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->npasicaremp);

    try
    {
      $this->deleteNpasicaremp($this->npasicaremp);
      $this->Bitacora('Elimino');
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'No se pudo borrar la registro seleccionado. Asegúrese de que no tiene ningún tipo de registros asociados.');
      return $this->forward('nomasicarconnom', 'list');
    }

    return $this->redirect('nomasicarconnom/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->npasicaremp = $this->getNpasicarempOrCreate();
    $this->updateNpasicarempFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveNpasicaremp($npasicaremp)
  {
    $npasicaremp->save();

  }

  protected function deleteNpasicaremp($npasicaremp)
  {
    $npasicaremp->delete();
  }

  protected function updateNpasicarempFromRequest()
  {
    $npasicaremp = $this->getRequestParameter('npasicaremp');

    if (isset($npasicaremp['codemp']))
    {
      $this->npasicaremp->setCodemp($npasicaremp['codemp']);
    }
    if (isset($npasicaremp['nomemp']))
    {
      $this->npasicaremp->setNomemp($npasicaremp['nomemp']);
    }
    if (isset($npasicaremp['codnom']))
    {
      $this->npasicaremp->setCodnom($npasicaremp['codnom']);
    }
    if (isset($npasicaremp['nomnom']))
    {
      $this->npasicaremp->setNomnom($npasicaremp['nomnom']);
    }
    if (isset($npasicaremp['codcar']))
    {
      $this->npasicaremp->setCodcar($npasicaremp['codcar']);
    }
    if (isset($npasicaremp['nomcar']))
    {
      $this->npasicaremp->setNomcar($npasicaremp['nomcar']);
    }
    if (isset($npasicaremp['paso']))
    {
      $this->npasicaremp->setPaso($npasicaremp['paso']);
    }
    if (isset($npasicaremp['despaso']))
    {
      $this->npasicaremp->setDespaso($npasicaremp['despaso']);
    }
    if (isset($npasicaremp['fecasi']))
    {
      if ($npasicaremp['fecasi'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($npasicaremp['fecasi']))
          {
            $value = $dateFormat->format($npasicaremp['fecasi'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $npasicaremp['fecasi'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->npasicaremp->setFecasi($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->npasicaremp->setFecasi(null);
      }
    }
    if (isset($npasicaremp['codtipgas']))
    {
      $this->npasicaremp->setCodtipgas($npasicaremp['codtipgas']);
    }
    if (isset($npasicaremp['destipgas']))
    {
      $this->npasicaremp->setDestipgas($npasicaremp['destipgas']);
    }
    if (isset($npasicaremp['codcat']))
    {
      $this->npasicaremp->setCodcat($npasicaremp['codcat']);
    }
    if (isset($npasicaremp['nomcat']))
    {
      $this->npasicaremp->setNomcat($npasicaremp['nomcat']);
    }
    if (isset($npasicaremp['codtipded']))
    {
      $this->npasicaremp->setCodtipded($npasicaremp['codtipded']);
    }
    if (isset($npasicaremp['codtipcat']))
    {
      $this->npasicaremp->setCodtipcat($npasicaremp['codtipcat']);
    }
    if (isset($npasicaremp['codtie']))
    {
      $this->npasicaremp->setCodtie($npasicaremp['codtie']);
    }
    if (isset($npasicaremp['codcen']))
    {
      $this->npasicaremp->setCodcen($npasicaremp['codcen']);
    }
    if (isset($npasicaremp['nivel']))
    {
      $this->npasicaremp->setNivel($npasicaremp['nivel']);
    }
    if (isset($npasicaremp['codtipcar']))
    {
      $this->npasicaremp->setCodtipcar($npasicaremp['codtipcar']);
    }
    if (isset($npasicaremp['grado']))
    {
      $this->npasicaremp->setGrado($npasicaremp['grado']);
    }
    $this->npasicaremp->setCarlibnom(isset($npasicaremp['carlibnom']) ? $npasicaremp['carlibnom'] : 0);
    if (isset($npasicaremp['sueldocar']))
    {
      $this->npasicaremp->setSueldocar($npasicaremp['sueldocar']);
    }
    if (isset($npasicaremp['codtipemp']))
    {
      $this->npasicaremp->setCodtipemp($npasicaremp['codtipemp']);
    }
    if (isset($npasicaremp['codnivc']))
    {
      $this->npasicaremp->setCodnivc($npasicaremp['codnivc']);
    }
    if (isset($npasicaremp['codeve']))
    {
      $this->npasicaremp->setCodeve($npasicaremp['codeve']);
    }
    if (isset($npasicaremp['numpta']))
    {
      $this->npasicaremp->setNumpta($npasicaremp['numpta']);
    }
  }

  protected function getNpasicarempOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $npasicaremp = new Npasicaremp();
    }
    else
    {
      $npasicaremp = NpasicarempPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($npasicaremp);
    }

    return $npasicaremp;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/npasicaremp/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/npasicaremp/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/npasicaremp/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/npasicaremp/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/npasicaremp/sort'))
    {
    }
  }

   protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['codemp_is_empty']))
    {
      $criterion = $c->getNewCriterion(NpasicarempPeer::CODEMP, '');
      $criterion->addOr($c->getNewCriterion(NpasicarempPeer::CODEMP, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codemp']) && $this->filters['codemp'] !== '')
    {
      $c->add(NpasicarempPeer::CODEMP, '%'.strtr($this->filters['codemp'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['codnom_is_empty']))
    {
      $criterion = $c->getNewCriterion(NpasicarempPeer::CODNOM, '');
      $criterion->addOr($c->getNewCriterion(NpasicarempPeer::CODNOM, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codnom']) && $this->filters['codnom'] !== '')
    {
      $c->add(NpasicarempPeer::CODNOM, '%'.strtr($this->filters['codnom'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['nomemp_is_empty']))
    {
      $criterion = $c->getNewCriterion(NpasicarempPeer::NOMEMP, '');
      $criterion->addOr($c->getNewCriterion(NpasicarempPeer::NOMEMP, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['nomemp']) && $this->filters['nomemp'] !== '')
    {
      $c->add(NpasicarempPeer::NOMEMP, '%'.strtr($this->filters['nomemp'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['codcar_is_empty']))
    {
      $criterion = $c->getNewCriterion(NpasicarempPeer::CODCAR, '');
      $criterion->addOr($c->getNewCriterion(NpasicarempPeer::CODCAR, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codcar']) && $this->filters['codcar'] !== '')
    {
      $c->add(NpasicarempPeer::CODCAR, '%'.strtr($this->filters['codcar'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['codcen_is_empty']))
    {
      $criterion = $c->getNewCriterion(NpasicarempPeer::CODCEN, '');
      $criterion->addOr($c->getNewCriterion(NpasicarempPeer::CODCEN, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codcen']) && $this->filters['codcen'] !== '')
    {
      $c->add(NpasicarempPeer::CODCEN, '%'.strtr($this->filters['codcen'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['codniv2_is_empty']))
    {
      $criterion = $c->getNewCriterion(NpasicarempPeer::CODNIV2, '');
      $criterion->addOr($c->getNewCriterion(NpasicarempPeer::CODNIV2, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codniv2']) && $this->filters['codniv2'] !== '')
    {
      $c->add(NpasicarempPeer::CODNIV2, $this->filters['codniv2']);
    }
    if (isset($this->filters['desniv_is_empty']))
    {
      $criterion = $c->getNewCriterion(NpasicarempPeer::DESNIV, '');
      $criterion->addOr($c->getNewCriterion(NpasicarempPeer::DESNIV, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['desniv']) && $this->filters['desniv'] !== '')
    {
      $c->add(NpasicarempPeer::DESNIV, $this->filters['desniv']);
    }
  }
  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/npasicaremp/sort'))
    {
      $sort_column = NpasicarempPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/npasicaremp/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'npasicaremp{codemp}' => 'Empleado:',
      'npasicaremp{nomemp}' => 'Nombre:',
      'npasicaremp{codnom}' => 'Nómina:',
      'npasicaremp{nomnom}' => 'Descripción:',
      'npasicaremp{codcar}' => 'Cargo:',
      'npasicaremp{nomcar}' => 'Descripción:',
      'npasicaremp{paso}' => 'Paso:',
      'npasicaremp{despaso}' => 'Descripción Paso:',
      'npasicaremp{fecasi}' => 'Fecha de Asignación:',
      'npasicaremp{codtipgas}' => 'Tipo de Gasto:',
      'npasicaremp{destipgas}' => 'Tipo de Gasto:',
      'npasicaremp{codcat}' => 'Categoria Presupuestaria:',
      'npasicaremp{nomcat}' => 'Nombre Categoria:',
      'npasicaremp{codtipded}' => 'Dedicacion:',
      'npasicaremp{codtipcat}' => 'Categoria del Profesor:',
      'npasicaremp{codtie}' => 'Tiempo:',
      'npasicaremp{codcen}' => 'Centro de Costo:',
      'npasicaremp{nivel}' => 'Ubicación Administrativa:',
      'npasicaremp{codtipcar}' => 'Tipo de Cargo:',
      'npasicaremp{grado}' => 'Grado:',
      'npasicaremp{carlibnom}' => 'Cargo de Libre Nombramiento?:',
      'npasicaremp{sueldocar}' => 'Sueldo:',
      'npasicaremp{codtipemp}' => 'Tipo de Empleado:',
      'npasicaremp{codnivc}' => 'Nivel:',
      'npasicaremp{codeve}' => 'Evento:',
      'npasicaremp{numpta}' => 'Punto de Cuenta:',
    );
  }

    public function executeCatalogo()
  {
    $codigo = $this->getRequestParameter('codigo','');
    $clase = $this->getRequestParameter('clase','');
    $nombre = $this->getRequestParameter('name','');
    $campobase = $this->getRequestParameter('campobase','');
    $campoprincipal = $this->getRequestParameter('campoprincipal','');
    $camposecundario = $this->getRequestParameter('camposecundario','');

    $c = new Criteria();
    eval('$c->add('.ucfirst(strtolower($clase)).'Peer::'.strtoupper($campoprincipal).','.chr(39).$codigo.chr(39).');');
    eval('$peer = '.ucfirst(strtolower($clase)).'Peer::doSelectOne($c);');

  eval('$cajasec = "'.strtolower($nombre).'_'.strtolower($camposecundario).'";');
  eval('$cajaid = "'.strtolower($nombre).'_'.strtolower($campobase).'";');
  $valsec="";
  $valid="";
  eval('if ($peer) $valsec = $peer->get'.H::ObtenerNombreCampo($camposecundario).'();');
  eval('if ($peer) $valid = $peer->getId();');
  $output = '[["'.$cajasec.'","'.$valsec.'",""],["'.$cajaid.'","'.$valid.'",""],["","",""]]';
    $this->getResponse()->setHttpHeader("X-JSON", '('.$output.')');
    return sfView::HEADER_ONLY;
  }

  public function SalvarBitacora($id, $acc)
  {
    try{
      $segbitaco= new Segbitaco();
      $fecha=date('Y-m-d');

      $segbitaco->setCodintusu($this->getUser()->getAttribute('usuario_id'));
      $segbitaco->setTipope(substr($acc, 0, 1));
      $segbitaco->setCodmod('nomasicarconnom');
      $segbitaco->setValcla('Npasicaremp');
      $segbitaco->setCodapl(substr(SF_APP, 0, 3));
      $segbitaco->setFecope($fecha);
      $segbitaco->setHorope(time('h:i:s'));
      $segbitaco->setRefmov($id);
      $segbitaco->save();
    }catch(Exception $e){

    }
  }

  public function Bitacora($acc)
  {
    if ($this->npasicaremp )
    {
      $id= $this->npasicaremp->getId();
      $this->SalvarBitacora($id ,$acc);
    }
  }

}
