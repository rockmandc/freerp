<?php
// auto-generated by sfValidatorConfigHandler
// date: 2017/02/13 06:00:33

if ($_SERVER['REQUEST_METHOD'] == 'GET')
{
  $validators = array();
  $context->getRequest()->setAttribute('fillin', array (
), 'symfony/filter');
}
else if ($_SERVER['REQUEST_METHOD'] == 'POST')
{
  $validators = array();
  $validators['UniqueValidator'] = new sfPropelUniqueValidator();
  $validators['UniqueValidator']->initialize($context, array (
  'class' => 'Nphojint',
  'column' => 'codemp',
  'unique_error' => 'Datos Personales- El Código del Empleado ya existe. Por Favor, Cambiélo por otro.',
));
  $validators['fotoValidator'] = new sfFileValidator();
  $validators['fotoValidator']->initialize($context, array (
  'max_size' => 1000000,
  'max_size_error' => 'Tamaño máximo 1 MB',
  'mime_types' => 
  array (
    0 => 'image/jpeg',
    1 => 'image/png',
    2 => 'image/gif',
  ),
  'mime_types_error' => 'Datos Personales- Sólo puedes guardar archivos JPEG, PNG o GIF',
));
  $validators['NivelValidator'] = new CidesaExistValidator();
  $validators['NivelValidator']->initialize($context, array (
  'class' => 'Npestorg',
  'column' => 'codniv',
  'unique_error' => 'Datos Personales- El Nivel Organizacional no existe.',
));
  $validators['FechaValidator'] = new sfRegexValidator();
  $validators['FechaValidator']->initialize($context, array (
  'match' => true,
  'pattern' => '/^(3[01]|2?[0-9]|1?[0-9]|0?[1-9]|[12]d)\\/(0?[1-9]|1[012])\\/(\\d{4})$/',
  'match_error' => 'La Fecha  introducida es invalida',
));
  $validators['FechaValidatorNowNac'] = new CidesaDateNow();
  $validators['FechaValidatorNowNac']->initialize($context, array (
  'compare' => 'now',
  'compare_error' => 'Datos Personales- Esta Fecha no puede ser mayor a la Fecha Actual',
  'operator' => '<=',
  'date_error' => 'Fecha Inválida',
));
  $validators['EmailValidator'] = new sfEmailValidator();
  $validators['EmailValidator']->initialize($context, array (
  'strict' => true,
  'email_error' => 'Habitacion- La Dirección del Email es Inválida.',
));
  $validators['FechaValidatorNowRet'] = new CidesaDateNow();
  $validators['FechaValidatorNowRet']->initialize($context, array (
  'compare' => 'now',
  'compare_error' => 'Ingresos- Esta Fecha no puede ser mayor a la Fecha Actual',
  'operator' => '<=',
  'date_error' => 'Fecha Inválida',
));
  $validators['FechaValidatorNowRei'] = new CidesaDateNow();
  $validators['FechaValidatorNowRei']->initialize($context, array (
  'compare' => 'now',
  'compare_error' => 'Ingresos- Esta Fecha no puede ser mayor a la Fecha Actual',
  'operator' => '<=',
  'date_error' => 'Fecha Inválida',
));
  $validators['MotivoValidator'] = new CidesaExistValidator();
  $validators['MotivoValidator']->initialize($context, array (
  'class' => 'Npmotegr',
  'column' => 'codmot',
  'unique_error' => 'Ingresos- El Motivo de Egreso no existe.',
));
  $validators['FechaValidatorNowAdmpub'] = new CidesaDateNow();
  $validators['FechaValidatorNowAdmpub']->initialize($context, array (
  'compare' => 'now',
  'compare_error' => 'Admon Publica- Esta Fecha no puede ser mayor a la Fecha Actual',
  'operator' => '<',
  'date_error' => 'Fecha Inválida',
));
  $validators['FechaValidatorNowCotsso'] = new CidesaDateNow();
  $validators['FechaValidatorNowCotsso']->initialize($context, array (
  'compare' => 'now',
  'compare_error' => 'Admon Publica- Esta Fecha no puede ser mayor a la Fecha Actual',
  'operator' => '<',
  'date_error' => 'Fecha Inválida',
));
  $validators['EmailValidator2'] = new sfEmailValidator();
  $validators['EmailValidator2']->initialize($context, array (
  'strict' => true,
  'email_error' => 'La Dirección del Email Opcional es Inválida.',
));
  $validatorManager->registerName('codemp', 1, 'Datos Personales- El Código del Empleado no puedo estar en Blanco', 'nphojint', null, false);
  $validatorManager->registerValidator('codemp', $validators['UniqueValidator'], 'nphojint');
  $validatorManager->registerName('fotemp', 0, 'Required', 'nphojint', null, 1);
  $validatorManager->registerValidator('fotemp', $validators['fotoValidator'], 'nphojint');
  $validatorManager->registerName('cedemp', 1, 'Datos Personales- La Cédula del Empleado no puedo estar en Blanco', 'nphojint', null, false);
  $validatorManager->registerName('codniv', 0, 'Required', 'nphojint', null, false);
  $validatorManager->registerValidator('codniv', $validators['NivelValidator'], 'nphojint');
  $validatorManager->registerName('fecnac', 1, 'Datos Personales- La Fecha de Nacimiento no puede estar en Blanco', 'nphojint', null, false);
  $validatorManager->registerValidator('fecnac', $validators['FechaValidator'], 'nphojint');
  $validatorManager->registerValidator('fecnac', $validators['FechaValidatorNowNac'], 'nphojint');
  $validatorManager->registerName('emaemp', 0, 'Required', 'nphojint', null, false);
  $validatorManager->registerValidator('emaemp', $validators['EmailValidator'], 'nphojint');
  $validatorManager->registerName('fecing', 0, 'Required', 'nphojint', null, false);
  $validatorManager->registerName('fecret', 0, 'Required', 'nphojint', null, false);
  $validatorManager->registerValidator('fecret', $validators['FechaValidator'], 'nphojint');
  $validatorManager->registerValidator('fecret', $validators['FechaValidatorNowRet'], 'nphojint');
  $validatorManager->registerName('fecrei', 0, 'Required', 'nphojint', null, false);
  $validatorManager->registerValidator('fecrei', $validators['FechaValidator'], 'nphojint');
  $validatorManager->registerValidator('fecrei', $validators['FechaValidatorNowRei'], 'nphojint');
  $validatorManager->registerName('codmot', 0, 'Required', 'nphojint', null, false);
  $validatorManager->registerValidator('codmot', $validators['MotivoValidator'], 'nphojint');
  $validatorManager->registerName('staemp', 0, 'Required', 'nphojint', null, false);
  $validatorManager->registerName('fecadmpub', 0, 'Required', 'nphojint', null, false);
  $validatorManager->registerValidator('fecadmpub', $validators['FechaValidator'], 'nphojint');
  $validatorManager->registerValidator('fecadmpub', $validators['FechaValidatorNowAdmpub'], 'nphojint');
  $validatorManager->registerName('feccotsso', 0, 'Required', 'nphojint', null, false);
  $validatorManager->registerValidator('feccotsso', $validators['FechaValidator'], 'nphojint');
  $validatorManager->registerValidator('feccotsso', $validators['FechaValidatorNowCotsso'], 'nphojint');
  $validatorManager->registerName('talpan', 0, 'Required', 'nphojint', null, false);
  $validatorManager->registerName('emaopc', 0, 'Required', 'nphojint', null, false);
  $validatorManager->registerValidator('emaopc', $validators['EmailValidator2'], 'nphojint');
  $validatorManager->registerName('codtippag', 0, 'Required', 'nphojint', null, false);
  $context->getRequest()->setAttribute('fillin', array (
), 'symfony/filter');
}
