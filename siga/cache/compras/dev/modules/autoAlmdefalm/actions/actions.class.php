<?php
// auto-generated by sfPropelAdmin
// date: 2017/02/13 06:32:17
?>
<?php

/**
 * autoAlmdefalm actions.
 *
 * @package    Roraima
 * @subpackage autoAlmdefalm 
 * @author     $Author: lhernandez $ <desarrollo@cidesa.com.ve>
 * @version    SVN: $Id: actions.class.php 32371 2009-09-01 16:06:59Z lhernandez $
 */
class autoAlmdefalmActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('almdefalm', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/cadefalm/filters');


     // 15    // pager
    $this->pager = new sfPropelPager('Cadefalm', 15);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('almdefalm', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('almdefalm', 'edit');
  }

  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  public function executeEdit()
  {
    $this->cadefalm = $this->getCadefalmOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateCadefalmFromRequest();

      $this->saveCadefalm($this->cadefalm);

      $this->setFlash('notice', 'Your modifications have been saved');

    $this->Bitacora('Guardo');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('almdefalm/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('almdefalm/list');
      }
      else
      {
        return $this->redirect('almdefalm/edit?id='.$this->cadefalm->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->cadefalm = CadefalmPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->cadefalm);

    try
    {
      $this->deleteCadefalm($this->cadefalm);
      $this->Bitacora('Elimino');
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'No se pudo borrar la registro seleccionado. Asegúrese de que no tiene ningún tipo de registros asociados.');
      return $this->forward('almdefalm', 'list');
    }

    return $this->redirect('almdefalm/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->cadefalm = $this->getCadefalmOrCreate();
    $this->updateCadefalmFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveCadefalm($cadefalm)
  {
    $cadefalm->save();

  }

  protected function deleteCadefalm($cadefalm)
  {
    $cadefalm->delete();
  }

  protected function updateCadefalmFromRequest()
  {
    $cadefalm = $this->getRequestParameter('cadefalm');

    if (isset($cadefalm['codalm']))
    {
      $this->cadefalm->setCodalm($cadefalm['codalm']);
    }
    if (isset($cadefalm['nomalm']))
    {
      $this->cadefalm->setNomalm($cadefalm['nomalm']);
    }
    if (isset($cadefalm['codcat']))
    {
      $this->cadefalm->setCodcat($cadefalm['codcat']);
    }
    if (isset($cadefalm['codtip']))
    {
    $this->cadefalm->setCodtip($cadefalm['codtip'] ? $cadefalm['codtip'] : null);
    }
    if (isset($cadefalm['diralm']))
    {
      $this->cadefalm->setDiralm($cadefalm['diralm']);
    }
    if (isset($cadefalm['codedo']))
    {
      $this->cadefalm->setCodedo($cadefalm['codedo']);
    }
    $this->cadefalm->setEsptoven(isset($cadefalm['esptoven']) ? $cadefalm['esptoven'] : 0);
    if (isset($cadefalm['codtippv']))
    {
      $this->cadefalm->setCodtippv($cadefalm['codtippv']);
    }
    if (isset($cadefalm['codcta']))
    {
      $this->cadefalm->setCodcta($cadefalm['codcta']);
    }
    if (isset($cadefalm['codemp']))
    {
      $this->cadefalm->setCodemp($cadefalm['codemp']);
    }
    if (isset($cadefalm['codalmsap']))
    {
      $this->cadefalm->setCodalmsap($cadefalm['codalmsap']);
    }
    if (isset($cadefalm['codzon']))
    {
      $this->cadefalm->setCodzon($cadefalm['codzon']);
    }
    if (isset($cadefalm['unicor']))
    {
      $this->cadefalm->setUnicor($cadefalm['unicor']);
    }
    if (isset($cadefalm['corfac']))
    {
      $this->cadefalm->setCorfac($cadefalm['corfac']);
    }
    if (isset($cadefalm['cornumctr']))
    {
      $this->cadefalm->setCornumctr($cadefalm['cornumctr']);
    }
  }

  protected function getCadefalmOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $cadefalm = new Cadefalm();
    }
    else
    {
      $cadefalm = CadefalmPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($cadefalm);
    }

    return $cadefalm;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/cadefalm/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/cadefalm/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/cadefalm/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/cadefalm/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/cadefalm/sort'))
    {
      $this->getUser()->setAttribute('sort', 'codalm', 'sf_admin/cadefalm/sort');
      $this->getUser()->setAttribute('type', 'asc', 'sf_admin/cadefalm/sort');
    }
  }

   protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['codalm_is_empty']))
    {
      $criterion = $c->getNewCriterion(CadefalmPeer::CODALM, '');
      $criterion->addOr($c->getNewCriterion(CadefalmPeer::CODALM, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codalm']) && $this->filters['codalm'] !== '')
    {
      $c->add(CadefalmPeer::CODALM, '%'.strtr($this->filters['codalm'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['nomalm_is_empty']))
    {
      $criterion = $c->getNewCriterion(CadefalmPeer::NOMALM, '');
      $criterion->addOr($c->getNewCriterion(CadefalmPeer::NOMALM, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['nomalm']) && $this->filters['nomalm'] !== '')
    {
      $c->add(CadefalmPeer::NOMALM, '%'.strtr($this->filters['nomalm'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['codcat_is_empty']))
    {
      $criterion = $c->getNewCriterion(CadefalmPeer::CODCAT, '');
      $criterion->addOr($c->getNewCriterion(CadefalmPeer::CODCAT, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codcat']) && $this->filters['codcat'] !== '')
    {
      $c->add(CadefalmPeer::CODCAT, '%'.strtr($this->filters['codcat'], '*', '%').'%', Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
  }
  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/cadefalm/sort'))
    {
      $sort_column = CadefalmPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/cadefalm/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'cadefalm{codalm}' => 'Código:',
      'cadefalm{nomalm}' => 'Descripción:',
      'cadefalm{codcat}' => 'Cod. Unidad Asociada:',
      'cadefalm{codtip}' => 'Tipo:',
      'cadefalm{diralm}' => 'Direccion de Localidad:',
      'cadefalm{codedo}' => 'Estado:',
      'cadefalm{esptoven}' => '¿Es Punto de Venta?:',
      'cadefalm{codtippv}' => 'Tipo de Punto de Venta:',
      'cadefalm{codcta}' => 'Codigo Contable:',
      'cadefalm{codemp}' => 'Responsable de la Localidad:',
      'cadefalm{codalmsap}' => 'Código SAP:',
      'cadefalm{codzon}' => 'Zona:',
      'cadefalm{unicor}' => '¿Correlativo Único para Factura?:',
      'cadefalm{corfac}' => 'Correlativo de Factura:',
      'cadefalm{cornumctr}' => 'Correlativo Nº de Control:',
    );
  }

    public function executeCatalogo()
  {
    $codigo = $this->getRequestParameter('codigo','');
    $clase = $this->getRequestParameter('clase','');
    $nombre = $this->getRequestParameter('name','');
    $campobase = $this->getRequestParameter('campobase','');
    $campoprincipal = $this->getRequestParameter('campoprincipal','');
    $camposecundario = $this->getRequestParameter('camposecundario','');

    $c = new Criteria();
    eval('$c->add('.ucfirst(strtolower($clase)).'Peer::'.strtoupper($campoprincipal).','.chr(39).$codigo.chr(39).');');
    eval('$peer = '.ucfirst(strtolower($clase)).'Peer::doSelectOne($c);');

  eval('$cajasec = "'.strtolower($nombre).'_'.strtolower($camposecundario).'";');
  eval('$cajaid = "'.strtolower($nombre).'_'.strtolower($campobase).'";');
  $valsec="";
  $valid="";
  eval('if ($peer) $valsec = $peer->get'.H::ObtenerNombreCampo($camposecundario).'();');
  eval('if ($peer) $valid = $peer->getId();');
  $output = '[["'.$cajasec.'","'.$valsec.'",""],["'.$cajaid.'","'.$valid.'",""],["","",""]]';
    $this->getResponse()->setHttpHeader("X-JSON", '('.$output.')');
    return sfView::HEADER_ONLY;
  }

  public function SalvarBitacora($id, $acc)
  {
    try{
      $segbitaco= new Segbitaco();
      $fecha=date('Y-m-d');

      $segbitaco->setCodintusu($this->getUser()->getAttribute('usuario_id'));
      $segbitaco->setTipope(substr($acc, 0, 1));
      $segbitaco->setCodmod('almdefalm');
      $segbitaco->setValcla('Cadefalm');
      $segbitaco->setCodapl(substr(SF_APP, 0, 3));
      $segbitaco->setFecope($fecha);
      $segbitaco->setHorope(time('h:i:s'));
      $segbitaco->setRefmov($id);
      $segbitaco->save();
    }catch(Exception $e){

    }
  }

  public function Bitacora($acc)
  {
    if ($this->cadefalm )
    {
      $id= $this->cadefalm->getId();
      $this->SalvarBitacora($id ,$acc);
    }
  }

}
