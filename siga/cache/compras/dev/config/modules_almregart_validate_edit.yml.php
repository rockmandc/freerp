<?php
// auto-generated by sfValidatorConfigHandler
// date: 2017/02/17 10:38:54

if ($_SERVER['REQUEST_METHOD'] == 'GET')
{
  $validators = array();
  $context->getRequest()->setAttribute('fillin', array (
), 'symfony/filter');
}
else if ($_SERVER['REQUEST_METHOD'] == 'POST')
{
  $validators = array();
  $validators['UniqueValidator'] = new sfPropelUniqueValidator();
  $validators['UniqueValidator']->initialize($context, array (
  'class' => 'Caregart',
  'column' => 'codart',
  'unique_error' => 'El Código del Articulo ya existe. Por Favor, Cambiélo por otro.',
));
  $validators['DescripcionValidator'] = new sfStringValidator();
  $validators['DescripcionValidator']->initialize($context, array (
  'min' => 2,
  'min_error' => 'La Descripción no puede tener menos de 2 caracteres',
  'max' => 1500,
  'max_error' => 'La Descripción no puede pasar mas de 1500 caracteres',
));
  $validators['RamoValidator'] = new CidesaExistValidator();
  $validators['RamoValidator']->initialize($context, array (
  'class' => 'Caramart',
  'column' => 'ramart',
  'unique_error' => 'El Código del Ramo no existe.',
));
  $validators['CuentaValidator'] = new CidesaExistValidator();
  $validators['CuentaValidator']->initialize($context, array (
  'class' => 'Contabb',
  'column' => 'codcta',
  'unique_error' => 'El Código de la Cuenta Contable no existe.',
));
  $validators['UnidadValidator'] = new sfStringValidator();
  $validators['UnidadValidator']->initialize($context, array (
  'min' => 2,
  'min_error' => 'La Unidad de Medida no puede tener menos de 2 caracteres',
  'max' => 15,
  'max_error' => 'La Unidad de Medida no puede pasar mas de 15 caracteres',
));
  $validators['UnidadaltValidator'] = new sfStringValidator();
  $validators['UnidadaltValidator']->initialize($context, array (
  'min' => 2,
  'min_error' => 'La Unidad Alternativa no puede tener menos de 2 caracteres',
  'max' => 15,
  'max_error' => 'La Unidad Alternativa no puede pasar mas de 15 caracteres',
));
  $validators['RelacionValidator'] = new sfStringValidator();
  $validators['RelacionValidator']->initialize($context, array (
  'min' => 2,
  'min_error' => 'La Relación no puede tener menos de 2 caracteres',
  'max' => 25,
  'max_error' => 'La Relación no puede pasar mas de 25 caracteres',
));
  $validators['MontoValidator'] = new CidesaStringValidator();
  $validators['MontoValidator']->initialize($context, array (
  'values' => 
  array (
    0 => '/^([0-9]*(\\.*([0-9]{2,}))*\\,?[0-9]+|[0-9]+\\,?[0-9]*)?$/',
  ),
  'values_error' => 'El valor introducido no cumple con el formato para montos',
));
  $validators['FechaValidator'] = new sfRegexValidator();
  $validators['FechaValidator']->initialize($context, array (
  'match' => true,
  'pattern' => '/^(3[01]|2?[0-9]|1?[0-9]|0?[1-9]|[12]d)\\/(0?[1-9]|1[012])\\/(\\d{4})$/',
  'match_error' => 'La Fecha  introducida es invalida',
));
  $validators['FechaValidator1'] = new CidesaDateNow();
  $validators['FechaValidator1']->initialize($context, array (
  'compare' => 'now',
  'compare_error' => 'Esta Fecha no puede ser mayor a la Fecha Actual',
  'operator' => '<=',
  'date_error' => 'Fecha Inválida',
));
  $validators['SncValidator'] = new CidesaExistValidator();
  $validators['SncValidator']->initialize($context, array (
  'class' => 'Cacatsnc',
  'column' => 'codsnc',
  'unique_error' => 'El Código del Catalogo SNC  no existe.',
));
  $validators['PartidaValidator'] = new CidesaExistValidator();
  $validators['PartidaValidator']->initialize($context, array (
  'class' => 'Nppartidas',
  'column' => 'codpar',
  'unique_error' => 'El Código de la Partida no existe.',
));
  $validators['CodingValidator'] = new CidesaExistValidator();
  $validators['CodingValidator']->initialize($context, array (
  'class' => 'Cideftit',
  'column' => 'codpre',
  'unique_error' => 'El Código de Ingresos no existe.',
));
  $validatorManager->registerName('codart', 1, 'El Código del Articulo no puedo estar en Blanco', 'caregart', null, false);
  $validatorManager->registerValidator('codart', $validators['UniqueValidator'], 'caregart');
  $validatorManager->registerName('desart', 1, 'El Descripción no puedo estar en Blanco', 'caregart', null, false);
  $validatorManager->registerValidator('desart', $validators['DescripcionValidator'], 'caregart');
  $validatorManager->registerName('ramart', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('ramart', $validators['RamoValidator'], 'caregart');
  $validatorManager->registerName('codcta', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('codcta', $validators['CuentaValidator'], 'caregart');
  $validatorManager->registerName('unimed', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('unimed', $validators['UnidadValidator'], 'caregart');
  $validatorManager->registerName('unialt', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('unialt', $validators['UnidadaltValidator'], 'caregart');
  $validatorManager->registerName('relart', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('relart', $validators['RelacionValidator'], 'caregart');
  $validatorManager->registerName('exitot', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('exitot', $validators['MontoValidator'], 'caregart');
  $validatorManager->registerName('cosult', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('cosult', $validators['MontoValidator'], 'caregart');
  $validatorManager->registerName('cospro', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('cospro', $validators['MontoValidator'], 'caregart');
  $validatorManager->registerName('invini', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('invini', $validators['MontoValidator'], 'caregart');
  $validatorManager->registerName('fecult', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('fecult', $validators['FechaValidator'], 'caregart');
  $validatorManager->registerValidator('fecult', $validators['FechaValidator1'], 'caregart');
  $validatorManager->registerName('codartsnc', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('codartsnc', $validators['SncValidator'], 'caregart');
  $validatorManager->registerName('codpar', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('codpar', $validators['PartidaValidator'], 'caregart');
  $validatorManager->registerName('codtra', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('codtra', $validators['CuentaValidator'], 'caregart');
  $validatorManager->registerName('coddef', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('coddef', $validators['CuentaValidator'], 'caregart');
  $validatorManager->registerName('coding', 0, 'Required', 'caregart', null, false);
  $validatorManager->registerValidator('coding', $validators['CodingValidator'], 'caregart');
  $context->getRequest()->setAttribute('fillin', array (
), 'symfony/filter');
}
