<?php
// auto-generated by PropelCidesa
// date: 2017/02/13 06:34:53
?>
<?php

/**
 * autoFacliente actions.
 *
 * @package    Roraima
 * @subpackage autoFacliente 
 * @author     $Author: cramirez $ <desarrollo@cidesa.com.ve>
 * @version    SVN: $Id: actions.class.php 43817 2011-04-22 21:28:42Z cramirez $
 * @license    http://opensource.org/licenses/gpl-2.0.php GPLv2
 * @copyright  Copyright 2007, Cide S.A.
 */
class autoFaclienteActions extends sfActions
{

  // variable donde se debe colocar el código de error generado en el validateEdit 
  // para que sea procesado por el handleErrorEdit.
  protected $coderr = -1;

  public function executeIndex()
  {
    return $this->forward('facliente', 'list');
  }

  /**
   * Función para incluir funcionalidades adicionales en el executeList.
   * Esta funcion debe ser reescrita en la clase que hereda.
   *
   */
  protected function listing()
  {     


  }

  /**
   * Función principal para el manejo de la accion list
   * del formulario.
   *
   */
  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->listing();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/facliente/filters');


     // 15    // pager
    $this->pager = new sfPropelPager('Facliente', 15);
    $c = new Criteria();
    $this->c ? $c=$this->c : '';
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('facliente', 'edit');
  }

  /**
   * Función principal para el manejo de la acción save
   * del formulario.
   *
   */
  public function executeSave()
  {

    return $this->forward('facliente', 'edit');

  }

  /**
   * Función para incluir funcionalidades adicionales en el executeEdit.
   * Esta funcion debe ser reescrita en la clase que hereda.
   *
   */
  protected function editing()
  {


  }

  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  public function executeEdit()
  {
    $this->params=array();
    $this->facliente = $this->getFaclienteOrCreate();

    $this->editing();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateFaclienteFromRequest();

      if($this->saveFacliente($this->facliente) ==-1){
        {$this->setFlash('notice', 'Your modifications have been saved');

         $id= $this->facliente->getId();
         $this->SalvarBitacora($id ,'Guardo');}

        if ($this->getRequestParameter('save_and_add'))
        {
          return $this->redirect('facliente/create');
        }
        else if ($this->getRequestParameter('save_and_list'))
        {
          return $this->redirect('facliente/list');
        }
        else
        {
            return $this->redirect('facliente/edit?id='.$this->facliente->getId());
        }

      }else{
        $this->labels = $this->getLabels();
      }

    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->facliente = FaclientePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->facliente);

    try
    {
      $this->deleteFacliente($this->facliente);
      $id= $this->facliente->getId();
      $this->SalvarBitacora($id ,'Elimino');
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'No se pudo borrar la registro seleccionado. Asegúrese de que no tiene ningún tipo de registros asociados.');
      return $this->forward('facliente', 'list');
    }


    return $this->forward('facliente', 'list');
  }

  /**
   * Función para manejar la captura de errores del negocio, tanto que se
   * produzcan por algún validator y por un valor false retornado por el validateEdit
   *
   */
  public function handleErrorEdit()
  {
    $this->params=array();
    $this->preExecute();
    $this->facliente = $this->getFaclienteOrCreate();
    $this->updateFaclienteFromRequest();
	$this->updateError();
    $this->labels = $this->getLabels();
    if($this->getRequest()->getMethod() == sfRequest::POST)
    {
      if($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('',$err);
      }
    }
    return sfView::SUCCESS;
  }

  /**
   * Función para manejar de el salvado de registros del formulario.
   * cabe destacar que llama internamente a la función $this->saving
   * que es reescrita en la clase que hereda con el proceso que el usuario
   * necesite implementar.
   * Esta función saving siempre debe retornar un valor >=-1.
   *
   */
  protected function saveFacliente($facliente)
  {

    // habilitar la siguiente línea si se usa grid
    //$grid=Herramientas::CargarDatosGrid($this,$this->obj);

    try {

      // Modificar la siguiente línea para llamar al método
      // correcto en la clase del negocio, ej:
      // $coderr = Compras::salvarAlmaujoc($caajuoc,$grid);

      // OJO ----> Eliminar esta linea al modificar este método
      $this->coderr = $this->saving($facliente);

      // Update many-to-many for "recargo"
      $c = new Criteria();
      $c->add(FarecproPeer::CODPRO, $facliente->getPrimaryKey());
      FarecproPeer::doDelete($c);

      $ids = $this->getRequestParameter('associated_recargo');
      if (is_array($ids))
      {
        foreach ($ids as $id)
        {
          $Farecpro = new Farecpro();
          $Farecpro->setCodpro($facliente->getPrimaryKey());
          $Farecpro->setCodrec($id);
          $Farecpro->save();
        }
      }


      if(is_array($this->coderr)){
        foreach ($this->coderr as $ERR){
          $err = Herramientas::obtenerMensajeError($ERR);
          $this->getRequest()->setError('',$err);
          $this->updateError();}
          return sfView::SUCCESS;
      }elseif($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('',$err);
        $this->updateError();
        return sfView::SUCCESS;
      }else
      return -1;

    } catch (Exception $ex) {

      $this->coderr = 0;
      $err = Herramientas::obtenerMensajeError($this->coderr);
      $this->getRequest()->setError('',$err);
      $this->updateError();
    return sfView::SUCCESS;
    }


  }

  /**
   * Función que debe ser reescrita en la clase que hereda para
   * implementar el proceso de guardado adecuado para cada formulario.
   *
   */
  protected function saving($facliente)
  {
    $facliente->save();
    return -1;

  }

  /**
   * Función que debe ser reescrita en la clase que hereda para
   * implementar el proceso de eliminación adecuado para cada formulario.
   *
   */
  protected function deleting($facliente)
  {
  	$facliente->delete();
    return -1;

  }

  /**
   * Función para manejar la eliminación de registros del formulario.
   * cabe destacar que llama internamente a la función $this->deleting
   * que es reescrita en la clase que hereda con el proceso que el usuario
   * necesite implementar.
   * Esta función deleting siempre debe retornar un valor >=-1.
   *
   */
  protected function deleteFacliente($facliente)
  {
    try {

      // Modificar la siguiente línea para llamar al método
      // correcto en la clase del negocio, ej:
      // $coderr = Compras::salvarAlmaujoc($caajuoc,$grid);

      // OJO ----> Eliminar esta linea al modificar este método
      $this->coderr = $this->deleting($facliente);

      if(is_array($this->coderr)){
        foreach ($this->coderr as $ERR){
          $err = Herramientas::obtenerMensajeError($ERR);
          $this->getRequest()->setError('delete',$err);
          $this->updateError();
        }
      }elseif($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('delete',$err);
        $this->updateError();
      }

      //return -1;

    } catch (Exception $ex) {
      $this->coderr = 6;
      $err = Herramientas::obtenerMensajeError($this->coderr);
      $this->getRequest()->setError('delete',$err);
      $this->updateError();
    }

  }

  // Funcion para validar los datos de la vista luego de detectado un error
  // se usa por ejemplo para recargar la informacion y configuración de un grid
  protected function updateError()
  {
    return true;
  }

  /**
   * Actualiza la informacion que viene de la vista 
   * luego de un get/post en el obejto del modelo base del formulario.
   *
   */
  protected function updateFaclienteFromRequest()
  {
    $facliente = $this->getRequestParameter('facliente');

    $fields = FaclientePeer::getFieldNames();

    if(array_search('Codalmusu', $fields))
    {
      if (isset($facliente['codalmusu']))
      {
        $this->facliente->setCodalmusu($facliente['codalmusu']);
      }
    }
    if (isset($facliente['codpro']))
    {
      $this->facliente->setCodpro($facliente['codpro']);
    }
    if (isset($facliente['nompro']))
    {
      $this->facliente->setNompro($facliente['nompro']);
    }
    if (isset($facliente['rifpro']))
    {
      $this->facliente->setRifpro($facliente['rifpro']);
    }
    if (isset($facliente['fatipcte_id']))
    {
    $this->facliente->setFatipcteId($facliente['fatipcte_id'] ? $facliente['fatipcte_id'] : null);
    }
    if (isset($facliente['nitpro']))
    {
      $this->facliente->setNitpro($facliente['nitpro']);
    }
    if (isset($facliente['dirpro']))
    {
      $this->facliente->setDirpro($facliente['dirpro']);
    }
    if (isset($facliente['telpro']))
    {
      $this->facliente->setTelpro($facliente['telpro']);
    }
    if (isset($facliente['nrocei']))
    {
      $this->facliente->setNrocei($facliente['nrocei']);
    }
    if (isset($facliente['email']))
    {
      $this->facliente->setEmail($facliente['email']);
    }
    if (isset($facliente['pagweb']))
    {
      $this->facliente->setPagweb($facliente['pagweb']);
    }
    if (isset($facliente['codram']))
    {
      $this->facliente->setCodram($facliente['codram']);
    }
    if (isset($facliente['nomram']))
    {
      $this->facliente->setNomram($facliente['nomram']);
    }
    if (isset($facliente['limcre']))
    {
      $this->facliente->setLimcre($facliente['limcre']);
    }
    if (isset($facliente['codcta']))
    {
      $this->facliente->setCodcta($facliente['codcta']);
    }
    if (isset($facliente['descta']))
    {
      $this->facliente->setDescta($facliente['descta']);
    }
    if (isset($facliente['codord']))
    {
      $this->facliente->setCodord($facliente['codord']);
    }
    if (isset($facliente['desctacodord']))
    {
      $this->facliente->setDesctacodord($facliente['desctacodord']);
    }
    if (isset($facliente['codpercon']))
    {
      $this->facliente->setCodpercon($facliente['codpercon']);
    }
    if (isset($facliente['desctacodpercon']))
    {
      $this->facliente->setDesctacodpercon($facliente['desctacodpercon']);
    }
    if (isset($facliente['fecinscir']))
    {
      if ($facliente['fecinscir'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($facliente['fecinscir']))
          {
            $value = $dateFormat->format($facliente['fecinscir'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $facliente['fecinscir'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->facliente->setFecinscir($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->facliente->setFecinscir(null);
      }
    }
    if (isset($facliente['faxpro']))
    {
      $this->facliente->setFaxpro($facliente['faxpro']);
    }
    if (isset($facliente['numinscir']))
    {
      $this->facliente->setNuminscir($facliente['numinscir']);
    }
    if (isset($facliente['regmer']))
    {
      $this->facliente->setRegmer($facliente['regmer']);
    }
    if (isset($facliente['tomreg']))
    {
      $this->facliente->setTomreg($facliente['tomreg']);
    }
    if (isset($facliente['capsus']))
    {
      $this->facliente->setCapsus($facliente['capsus']);
    }
    if (isset($facliente['fecreg']))
    {
      if ($facliente['fecreg'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($facliente['fecreg']))
          {
            $value = $dateFormat->format($facliente['fecreg'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $facliente['fecreg'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->facliente->setFecreg($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->facliente->setFecreg(null);
      }
    }
    if (isset($facliente['folreg']))
    {
      $this->facliente->setFolreg($facliente['folreg']);
    }
    if (isset($facliente['cappag']))
    {
      $this->facliente->setCappag($facliente['cappag']);
    }
    if (isset($facliente['fecven']))
    {
      if ($facliente['fecven'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($facliente['fecven']))
          {
            $value = $dateFormat->format($facliente['fecven'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $facliente['fecven'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->facliente->setFecven($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->facliente->setFecven(null);
      }
    }
    if (isset($facliente['rifpercon']))
    {
      $this->facliente->setRifpercon($facliente['rifpercon']);
    }
    if (isset($facliente['nompercon']))
    {
      $this->facliente->setNompercon($facliente['nompercon']);
    }
    if (isset($facliente['dirpercon']))
    {
      $this->facliente->setDirpercon($facliente['dirpercon']);
    }
    if (isset($facliente['telpercon']))
    {
      $this->facliente->setTelpercon($facliente['telpercon']);
    }
    if (isset($facliente['corpercon']))
    {
      $this->facliente->setCorpercon($facliente['corpercon']);
    }
    if (isset($facliente['rifrepleg']))
    {
      $this->facliente->setRifrepleg($facliente['rifrepleg']);
    }
    if (isset($facliente['nomrepleg']))
    {
      $this->facliente->setNomrepleg($facliente['nomrepleg']);
    }
    if (isset($facliente['dirrepleg']))
    {
      $this->facliente->setDirrepleg($facliente['dirrepleg']);
    }
    if (isset($facliente['telrepleg']))
    {
      $this->facliente->setTelrepleg($facliente['telrepleg']);
    }
    if (isset($facliente['correpleg']))
    {
      $this->facliente->setCorrepleg($facliente['correpleg']);
    }
    if (isset($facliente['codtiprec']))
    {
      $this->facliente->setCodtiprec($facliente['codtiprec']);
    }
    if (isset($facliente['destiprec']))
    {
      $this->facliente->setDestiprec($facliente['destiprec']);
    }
    if (isset($facliente['nacpro']))
    {
      $this->facliente->setNacpro($facliente['nacpro']);
    }
    if (isset($facliente['tipo']))
    {
      $this->facliente->setTipo($facliente['tipo']);
    }
    if (isset($facliente['codctasec']))
    {
      $this->facliente->setCodctasec($facliente['codctasec']);
    }
    if (isset($facliente['desctacodctasec']))
    {
      $this->facliente->setDesctacodctasec($facliente['desctacodctasec']);
    }
    if (isset($facliente['codordadi']))
    {
      $this->facliente->setCodordadi($facliente['codordadi']);
    }
    if (isset($facliente['desctacodordadi']))
    {
      $this->facliente->setDesctacodordadi($facliente['desctacodordadi']);
    }
    if (isset($facliente['codperconadi']))
    {
      $this->facliente->setCodperconadi($facliente['codperconadi']);
    }
    if (isset($facliente['desctacodperconadi']))
    {
      $this->facliente->setDesctacodperconadi($facliente['desctacodperconadi']);
    }
    if (isset($facliente['codordmercon']))
    {
      $this->facliente->setCodordmercon($facliente['codordmercon']);
    }
    if (isset($facliente['desctacodordmercon']))
    {
      $this->facliente->setDesctacodordmercon($facliente['desctacodordmercon']);
    }
    if (isset($facliente['codpermercon']))
    {
      $this->facliente->setCodpermercon($facliente['codpermercon']);
    }
    if (isset($facliente['desctacodpermercon']))
    {
      $this->facliente->setDesctacodpermercon($facliente['desctacodpermercon']);
    }
    if (isset($facliente['codordcontra']))
    {
      $this->facliente->setCodordcontra($facliente['codordcontra']);
    }
    if (isset($facliente['desctacodordcontra']))
    {
      $this->facliente->setDesctacodordcontra($facliente['desctacodordcontra']);
    }
    if (isset($facliente['codpercontra']))
    {
      $this->facliente->setCodpercontra($facliente['codpercontra']);
    }
    if (isset($facliente['desctacodpercontra']))
    {
      $this->facliente->setDesctacodpercontra($facliente['desctacodpercontra']);
    }
    if (isset($facliente['recargo']))
    {
      $this->facliente->setRecargo($facliente['recargo']);
    }
    if (isset($facliente['codtipemp']))
    {
      $this->facliente->setCodtipemp($facliente['codtipemp']);
    }
    if (isset($facliente['destip']))
    {
      $this->facliente->setDestip($facliente['destip']);
    }
    $this->facliente->setEscontrib(isset($facliente['escontrib']) ? $facliente['escontrib'] : 0);
    if (isset($facliente['codedo']))
    {
      $this->facliente->setCodedo($facliente['codedo']);
    }
    if (isset($facliente['poriva']))
    {
      $this->facliente->setPoriva($facliente['poriva']);
    }
    $this->facliente->setEsprospec(isset($facliente['esprospec']) ? $facliente['esprospec'] : 0);
    if (isset($facliente['valdoc']))
    {
      $this->facliente->setValdoc($facliente['valdoc']);
    }
    if (isset($facliente['codctaant']))
    {
      $this->facliente->setCodctaant($facliente['codctaant']);
    }
    if (isset($facliente['grid']))
    {
      $this->facliente->setGrid($facliente['grid']);
    }

    if (isset($facliente['codpro']))
    {
      $this->facliente->setCodpro($facliente['codpro']);
    }
    if (isset($facliente['nompro']))
    {
      $this->facliente->setNompro($facliente['nompro']);
    }
    if (isset($facliente['rifpro']))
    {
      $this->facliente->setRifpro($facliente['rifpro']);
    }
    if (isset($facliente['nitpro']))
    {
      $this->facliente->setNitpro($facliente['nitpro']);
    }
    if (isset($facliente['dirpro']))
    {
      $this->facliente->setDirpro($facliente['dirpro']);
    }
    if (isset($facliente['telpro']))
    {
      $this->facliente->setTelpro($facliente['telpro']);
    }
    if (isset($facliente['faxpro']))
    {
      $this->facliente->setFaxpro($facliente['faxpro']);
    }
    if (isset($facliente['email']))
    {
      $this->facliente->setEmail($facliente['email']);
    }
    if (isset($facliente['limcre']))
    {
      $this->facliente->setLimcre($facliente['limcre']);
    }
    if (isset($facliente['codcta']))
    {
      $this->facliente->setCodcta($facliente['codcta']);
    }
    if (isset($facliente['regmer']))
    {
      $this->facliente->setRegmer($facliente['regmer']);
    }
    if (isset($facliente['fecreg']))
    {
      if ($facliente['fecreg'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($facliente['fecreg']))
          {
            $value = $dateFormat->format($facliente['fecreg'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $facliente['fecreg'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->facliente->setFecreg($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->facliente->setFecreg(null);
      }
    }
    if (isset($facliente['tomreg']))
    {
      $this->facliente->setTomreg($facliente['tomreg']);
    }
    if (isset($facliente['folreg']))
    {
      $this->facliente->setFolreg($facliente['folreg']);
    }
    if (isset($facliente['capsus']))
    {
      $this->facliente->setCapsus($facliente['capsus']);
    }
    if (isset($facliente['cappag']))
    {
      $this->facliente->setCappag($facliente['cappag']);
    }
    if (isset($facliente['rifrepleg']))
    {
      $this->facliente->setRifrepleg($facliente['rifrepleg']);
    }
    if (isset($facliente['nomrepleg']))
    {
      $this->facliente->setNomrepleg($facliente['nomrepleg']);
    }
    if (isset($facliente['dirrepleg']))
    {
      $this->facliente->setDirrepleg($facliente['dirrepleg']);
    }
    if (isset($facliente['nrocei']))
    {
      $this->facliente->setNrocei($facliente['nrocei']);
    }
    if (isset($facliente['codram']))
    {
      $this->facliente->setCodram($facliente['codram']);
    }
    if (isset($facliente['fecinscir']))
    {
      if ($facliente['fecinscir'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($facliente['fecinscir']))
          {
            $value = $dateFormat->format($facliente['fecinscir'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $facliente['fecinscir'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->facliente->setFecinscir($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->facliente->setFecinscir(null);
      }
    }
    if (isset($facliente['numinscir']))
    {
      $this->facliente->setNuminscir($facliente['numinscir']);
    }
    if (isset($facliente['nacpro']))
    {
      $this->facliente->setNacpro($facliente['nacpro']);
    }
    if (isset($facliente['codord']))
    {
      $this->facliente->setCodord($facliente['codord']);
    }
    if (isset($facliente['codpercon']))
    {
      $this->facliente->setCodpercon($facliente['codpercon']);
    }
    if (isset($facliente['codtiprec']))
    {
      $this->facliente->setCodtiprec($facliente['codtiprec']);
    }
    if (isset($facliente['codordadi']))
    {
      $this->facliente->setCodordadi($facliente['codordadi']);
    }
    if (isset($facliente['codperconadi']))
    {
      $this->facliente->setCodperconadi($facliente['codperconadi']);
    }
    if (isset($facliente['tipo']))
    {
      $this->facliente->setTipo($facliente['tipo']);
    }
    if (isset($facliente['fecven']))
    {
      if ($facliente['fecven'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($facliente['fecven']))
          {
            $value = $dateFormat->format($facliente['fecven'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $facliente['fecven'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->facliente->setFecven($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->facliente->setFecven(null);
      }
    }
    if (isset($facliente['ciudad']))
    {
      $this->facliente->setCiudad($facliente['ciudad']);
    }
    if (isset($facliente['codordmercon']))
    {
      $this->facliente->setCodordmercon($facliente['codordmercon']);
    }
    if (isset($facliente['codpermercon']))
    {
      $this->facliente->setCodpermercon($facliente['codpermercon']);
    }
    if (isset($facliente['codordcontra']))
    {
      $this->facliente->setCodordcontra($facliente['codordcontra']);
    }
    if (isset($facliente['codpercontra']))
    {
      $this->facliente->setCodpercontra($facliente['codpercontra']);
    }
    if (isset($facliente['temcodpro']))
    {
      $this->facliente->setTemcodpro($facliente['temcodpro']);
    }
    if (isset($facliente['temrifpro']))
    {
      $this->facliente->setTemrifpro($facliente['temrifpro']);
    }
    if (isset($facliente['codctasec']))
    {
      $this->facliente->setCodctasec($facliente['codctasec']);
    }
    if (isset($facliente['codtipemp']))
    {
      $this->facliente->setCodtipemp($facliente['codtipemp']);
    }
    if (isset($facliente['tipper']))
    {
      $this->facliente->setTipper($facliente['tipper']);
    }
    if (isset($facliente['pagweb']))
    {
      $this->facliente->setPagweb($facliente['pagweb']);
    }
    if (isset($facliente['telrepleg']))
    {
      $this->facliente->setTelrepleg($facliente['telrepleg']);
    }
    if (isset($facliente['correpleg']))
    {
      $this->facliente->setCorrepleg($facliente['correpleg']);
    }
    if (isset($facliente['rifpercon']))
    {
      $this->facliente->setRifpercon($facliente['rifpercon']);
    }
    if (isset($facliente['nompercon']))
    {
      $this->facliente->setNompercon($facliente['nompercon']);
    }
    if (isset($facliente['dirpercon']))
    {
      $this->facliente->setDirpercon($facliente['dirpercon']);
    }
    if (isset($facliente['telpercon']))
    {
      $this->facliente->setTelpercon($facliente['telpercon']);
    }
    if (isset($facliente['corpercon']))
    {
      $this->facliente->setCorpercon($facliente['corpercon']);
    }
    $this->facliente->setEscontrib(isset($facliente['escontrib']) ? $facliente['escontrib'] : 0);
    if (isset($facliente['codedo']))
    {
      $this->facliente->setCodedo($facliente['codedo']);
    }
    if (isset($facliente['poriva']))
    {
      $this->facliente->setPoriva($facliente['poriva']);
    }
    if (isset($facliente['fatipcte_id']))
    {
    $this->facliente->setFatipcteId($facliente['fatipcte_id'] ? $facliente['fatipcte_id'] : null);
    }
    $this->facliente->setEsprospec(isset($facliente['esprospec']) ? $facliente['esprospec'] : 0);
    if (isset($facliente['valdoc']))
    {
      $this->facliente->setValdoc($facliente['valdoc']);
    }
    if (isset($facliente['codctaant']))
    {
      $this->facliente->setCodctaant($facliente['codctaant']);
    }

    if (isset($facliente['codpro']))
    {
      $this->facliente->setCodpro($facliente['codpro']);
    }
    if (isset($facliente['nompro']))
    {
      $this->facliente->setNompro($facliente['nompro']);
    }
    if (isset($facliente['rifpro']))
    {
      $this->facliente->setRifpro($facliente['rifpro']);
    }
    if (isset($facliente['nitpro']))
    {
      $this->facliente->setNitpro($facliente['nitpro']);
    }
    if (isset($facliente['dirpro']))
    {
      $this->facliente->setDirpro($facliente['dirpro']);
    }
    if (isset($facliente['telpro']))
    {
      $this->facliente->setTelpro($facliente['telpro']);
    }
    if (isset($facliente['faxpro']))
    {
      $this->facliente->setFaxpro($facliente['faxpro']);
    }
    if (isset($facliente['email']))
    {
      $this->facliente->setEmail($facliente['email']);
    }
    if (isset($facliente['limcre']))
    {
      $this->facliente->setLimcre($facliente['limcre']);
    }
    if (isset($facliente['codcta']))
    {
      $this->facliente->setCodcta($facliente['codcta']);
    }
    if (isset($facliente['regmer']))
    {
      $this->facliente->setRegmer($facliente['regmer']);
    }
    if (isset($facliente['fecreg']))
    {
      if ($facliente['fecreg'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($facliente['fecreg']))
          {
            $value = $dateFormat->format($facliente['fecreg'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $facliente['fecreg'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->facliente->setFecreg($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->facliente->setFecreg(null);
      }
    }
    if (isset($facliente['tomreg']))
    {
      $this->facliente->setTomreg($facliente['tomreg']);
    }
    if (isset($facliente['folreg']))
    {
      $this->facliente->setFolreg($facliente['folreg']);
    }
    if (isset($facliente['capsus']))
    {
      $this->facliente->setCapsus($facliente['capsus']);
    }
    if (isset($facliente['cappag']))
    {
      $this->facliente->setCappag($facliente['cappag']);
    }
    if (isset($facliente['rifrepleg']))
    {
      $this->facliente->setRifrepleg($facliente['rifrepleg']);
    }
    if (isset($facliente['nomrepleg']))
    {
      $this->facliente->setNomrepleg($facliente['nomrepleg']);
    }
    if (isset($facliente['dirrepleg']))
    {
      $this->facliente->setDirrepleg($facliente['dirrepleg']);
    }
    if (isset($facliente['nrocei']))
    {
      $this->facliente->setNrocei($facliente['nrocei']);
    }
    if (isset($facliente['codram']))
    {
      $this->facliente->setCodram($facliente['codram']);
    }
    if (isset($facliente['fecinscir']))
    {
      if ($facliente['fecinscir'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($facliente['fecinscir']))
          {
            $value = $dateFormat->format($facliente['fecinscir'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $facliente['fecinscir'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->facliente->setFecinscir($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->facliente->setFecinscir(null);
      }
    }
    if (isset($facliente['numinscir']))
    {
      $this->facliente->setNuminscir($facliente['numinscir']);
    }
    if (isset($facliente['nacpro']))
    {
      $this->facliente->setNacpro($facliente['nacpro']);
    }
    if (isset($facliente['codord']))
    {
      $this->facliente->setCodord($facliente['codord']);
    }
    if (isset($facliente['codpercon']))
    {
      $this->facliente->setCodpercon($facliente['codpercon']);
    }
    if (isset($facliente['codtiprec']))
    {
      $this->facliente->setCodtiprec($facliente['codtiprec']);
    }
    if (isset($facliente['codordadi']))
    {
      $this->facliente->setCodordadi($facliente['codordadi']);
    }
    if (isset($facliente['codperconadi']))
    {
      $this->facliente->setCodperconadi($facliente['codperconadi']);
    }
    if (isset($facliente['tipo']))
    {
      $this->facliente->setTipo($facliente['tipo']);
    }
    if (isset($facliente['fecven']))
    {
      if ($facliente['fecven'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($facliente['fecven']))
          {
            $value = $dateFormat->format($facliente['fecven'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $facliente['fecven'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->facliente->setFecven($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->facliente->setFecven(null);
      }
    }
    if (isset($facliente['ciudad']))
    {
      $this->facliente->setCiudad($facliente['ciudad']);
    }
    if (isset($facliente['codordmercon']))
    {
      $this->facliente->setCodordmercon($facliente['codordmercon']);
    }
    if (isset($facliente['codpermercon']))
    {
      $this->facliente->setCodpermercon($facliente['codpermercon']);
    }
    if (isset($facliente['codordcontra']))
    {
      $this->facliente->setCodordcontra($facliente['codordcontra']);
    }
    if (isset($facliente['codpercontra']))
    {
      $this->facliente->setCodpercontra($facliente['codpercontra']);
    }
    if (isset($facliente['temcodpro']))
    {
      $this->facliente->setTemcodpro($facliente['temcodpro']);
    }
    if (isset($facliente['temrifpro']))
    {
      $this->facliente->setTemrifpro($facliente['temrifpro']);
    }
    if (isset($facliente['codctasec']))
    {
      $this->facliente->setCodctasec($facliente['codctasec']);
    }
    if (isset($facliente['codtipemp']))
    {
      $this->facliente->setCodtipemp($facliente['codtipemp']);
    }
    if (isset($facliente['tipper']))
    {
      $this->facliente->setTipper($facliente['tipper']);
    }
    if (isset($facliente['pagweb']))
    {
      $this->facliente->setPagweb($facliente['pagweb']);
    }
    if (isset($facliente['telrepleg']))
    {
      $this->facliente->setTelrepleg($facliente['telrepleg']);
    }
    if (isset($facliente['correpleg']))
    {
      $this->facliente->setCorrepleg($facliente['correpleg']);
    }
    if (isset($facliente['rifpercon']))
    {
      $this->facliente->setRifpercon($facliente['rifpercon']);
    }
    if (isset($facliente['nompercon']))
    {
      $this->facliente->setNompercon($facliente['nompercon']);
    }
    if (isset($facliente['dirpercon']))
    {
      $this->facliente->setDirpercon($facliente['dirpercon']);
    }
    if (isset($facliente['telpercon']))
    {
      $this->facliente->setTelpercon($facliente['telpercon']);
    }
    if (isset($facliente['corpercon']))
    {
      $this->facliente->setCorpercon($facliente['corpercon']);
    }
    $this->facliente->setEscontrib(isset($facliente['escontrib']) ? $facliente['escontrib'] : 0);
    if (isset($facliente['codedo']))
    {
      $this->facliente->setCodedo($facliente['codedo']);
    }
    if (isset($facliente['poriva']))
    {
      $this->facliente->setPoriva($facliente['poriva']);
    }
    if (isset($facliente['fatipcte_id']))
    {
    $this->facliente->setFatipcteId($facliente['fatipcte_id'] ? $facliente['fatipcte_id'] : null);
    }
    $this->facliente->setEsprospec(isset($facliente['esprospec']) ? $facliente['esprospec'] : 0);
    if (isset($facliente['valdoc']))
    {
      $this->facliente->setValdoc($facliente['valdoc']);
    }
    if (isset($facliente['codctaant']))
    {
      $this->facliente->setCodctaant($facliente['codctaant']);
    }

  }

  /**
   * Retorna el registro del modelo del formulario
   * Identifica si es un registro nuevo o actual, y lo retorna
   *
   */
  protected function getFaclienteOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $facliente = new Facliente();
    }
    else
    {
      $facliente = FaclientePeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($facliente);
    }

    return $facliente;
  }

  /**
   * Función para procesar los filtros aplicados a la lista de registros
   *
   */
  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/facliente/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/facliente/filters');
    }
  }

  /**
   * Función para procesar el orden de los registros en la lista
   *
   */
  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/facliente/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/facliente/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/facliente/sort'))
    {
      $this->getUser()->setAttribute('sort', 'codpro', 'sf_admin/facliente/sort');
      $this->getUser()->setAttribute('type', 'asc', 'sf_admin/facliente/sort');
    }
  }

  /**
   * Función para manejar los filtros de búsqueda
   * de la lista
   *
   */
  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['codpro_is_empty']))
    {
      $criterion = $c->getNewCriterion(FaclientePeer::CODPRO, '');
      $criterion->addOr($c->getNewCriterion(FaclientePeer::CODPRO, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codpro']) && $this->filters['codpro'] !== '')
    {
      $c->add(FaclientePeer::CODPRO, strtr("%".$this->filters['codpro']."%", '*', '%'), Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['nompro_is_empty']))
    {
      $criterion = $c->getNewCriterion(FaclientePeer::NOMPRO, '');
      $criterion->addOr($c->getNewCriterion(FaclientePeer::NOMPRO, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['nompro']) && $this->filters['nompro'] !== '')
    {
      $c->add(FaclientePeer::NOMPRO, strtr("%".$this->filters['nompro']."%", '*', '%'), Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['rifpro_is_empty']))
    {
      $criterion = $c->getNewCriterion(FaclientePeer::RIFPRO, '');
      $criterion->addOr($c->getNewCriterion(FaclientePeer::RIFPRO, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['rifpro']) && $this->filters['rifpro'] !== '')
    {
      $c->add(FaclientePeer::RIFPRO, strtr("%".$this->filters['rifpro']."%", '*', '%'), Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
  }

  /**
   * Función para colocar el criterio de ordenación de la lista de registros
   * en la acción List
   *
   */
  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/facliente/sort'))
    {
      $sort_column = FaclientePeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/facliente/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  /**
   * Función para retornar las etiquetas del formulario
   *
   */
  protected function getLabels()
  {
    $arreglo=array(
                  'facliente{codpro}' => 'Código:',
              'facliente{nompro}' => 'Nombre:',
              'facliente{rifpro}' => 'C.I./RIF:',
              'facliente{fatipcte_id}' => 'Tipo de Cliente:',
              'facliente{nitpro}' => 'NIT:',
              'facliente{dirpro}' => 'Dirección:',
              'facliente{telpro}' => 'Teléfono:',
              'facliente{nrocei}' => 'Nro.RNC:',
              'facliente{email}' => 'Correo Electrónico:',
              'facliente{pagweb}' => 'Página Web:',
              'facliente{codram}' => 'Ramo:',
              'facliente{nomram}' => 'Nombre del Ramo:',
              'facliente{limcre}' => 'Limite de Crédito:',
              'facliente{codcta}' => 'Cta. Contable Asoc.:',
              'facliente{descta}' => 'Descripción:',
              'facliente{codord}' => 'Cta. de Orden Asoc.:',
              'facliente{desctacodord}' => 'Descripción:',
              'facliente{codpercon}' => 'Cta.PerContra Asoc.:',
              'facliente{desctacodpercon}' => 'Descripción:',
              'facliente{fecinscir}' => 'Fecha de Registro:',
              'facliente{faxpro}' => 'Fax:',
              'facliente{numinscir}' => 'Circunscripción Judicial:',
              'facliente{regmer}' => 'Registro Mercantil:',
              'facliente{tomreg}' => 'Tomo:',
              'facliente{capsus}' => 'Capital Suscrito:',
              'facliente{fecreg}' => 'Fecha Reg:',
              'facliente{folreg}' => 'Folio:',
              'facliente{cappag}' => 'Capital Pagado:',
              'facliente{fecven}' => 'Fecha Venc:',
              'facliente{rifpercon}' => 'C.I./R.I.F.:',
              'facliente{nompercon}' => 'Nombre:',
              'facliente{dirpercon}' => 'Dirección:',
              'facliente{telpercon}' => 'Teléfono:',
              'facliente{corpercon}' => 'Correo:',
              'facliente{rifrepleg}' => 'C.I./R.I.F.:',
              'facliente{nomrepleg}' => 'Nombre:',
              'facliente{dirrepleg}' => 'Dirección:',
              'facliente{telrepleg}' => 'Teléfono:',
              'facliente{correpleg}' => 'Correo:',
              'facliente{codtiprec}' => 'Grupo:',
              'facliente{destiprec}' => 'Descripción:',
              'facliente{nacpro}' => 'Nacionalidad:',
              'facliente{tipo}' => 'Actividad Principal:',
              'facliente{codctasec}' => 'Cta. Contable Asoc:',
              'facliente{desctacodctasec}' => 'Descripción:',
              'facliente{codordadi}' => 'Cta. de Orden Asoc:',
              'facliente{desctacodordadi}' => 'Descripción:',
              'facliente{codperconadi}' => 'Cta. PerContra Asoc:',
              'facliente{desctacodperconadi}' => 'Descripción:',
              'facliente{codordmercon}' => 'Cta. de Orden:',
              'facliente{desctacodordmercon}' => 'Descripción:',
              'facliente{codpermercon}' => 'Cta. PerContra:',
              'facliente{desctacodpermercon}' => 'Descripción:',
              'facliente{codordcontra}' => 'Cta. de Orden:',
              'facliente{desctacodordcontra}' => 'Descripción:',
              'facliente{codpercontra}' => 'Cta. PerContra:',
              'facliente{desctacodpercontra}' => 'Descripción:',
              'facliente{recargo}' => 'Recaudos:',
              'facliente{codtipemp}' => 'Tipo de Empresa:',
              'facliente{destip}' => 'Descripción:',
              'facliente{escontrib}' => 'Es Contribuyente:',
              'facliente{codedo}' => 'Estado:',
              'facliente{poriva}' => 'Porcentaje IVA:',
              'facliente{esprospec}' => 'Es Prospecto:',
              'facliente{valdoc}' => 'Vencimiento del Documento (Días):',
              'facliente{codctaant}' => 'Cta. Contable Anticipo:',
              'facliente{grid}' => '.:',
                          'facliente{codpro}' => 'Código:',
              'facliente{nompro}' => 'Nombre:',
              'facliente{rifpro}' => 'C.I./RIF:',
              'facliente{nitpro}' => 'NIT:',
              'facliente{dirpro}' => 'Dirección:',
              'facliente{telpro}' => 'Teléfono:',
              'facliente{faxpro}' => 'Fax:',
              'facliente{email}' => 'Correo Electrónico:',
              'facliente{limcre}' => 'Limite de Crédito:',
              'facliente{codcta}' => 'Cta. Contable Asoc.:',
              'facliente{regmer}' => 'Registro Mercantil:',
              'facliente{fecreg}' => 'Fecha Reg:',
              'facliente{tomreg}' => 'Tomo:',
              'facliente{folreg}' => 'Folio:',
              'facliente{capsus}' => 'Capital Suscrito:',
              'facliente{cappag}' => 'Capital Pagado:',
              'facliente{rifrepleg}' => 'C.I./R.I.F.:',
              'facliente{nomrepleg}' => 'Nombre:',
              'facliente{dirrepleg}' => 'Dirección:',
              'facliente{nrocei}' => 'Nro.RNC:',
              'facliente{codram}' => 'Ramo:',
              'facliente{fecinscir}' => 'Fecha de Registro:',
              'facliente{numinscir}' => 'Circunscripción Judicial:',
              'facliente{nacpro}' => 'Nacionalidad:',
              'facliente{codord}' => 'Cta. de Orden Asoc.:',
              'facliente{codpercon}' => 'Cta.PerContra Asoc.:',
              'facliente{codtiprec}' => 'Grupo:',
              'facliente{codordadi}' => 'Cta. de Orden Asoc:',
              'facliente{codperconadi}' => 'Cta. PerContra Asoc:',
              'facliente{tipo}' => 'Actividad Principal:',
              'facliente{fecven}' => 'Fecha Venc:',
              'facliente{ciudad}' => 'Ciudad:',
              'facliente{codordmercon}' => 'Cta. de Orden:',
              'facliente{codpermercon}' => 'Cta. PerContra:',
              'facliente{codordcontra}' => 'Cta. de Orden:',
              'facliente{codpercontra}' => 'Cta. PerContra:',
              'facliente{temcodpro}' => 'Temcodpro:',
              'facliente{temrifpro}' => 'Temrifpro:',
              'facliente{codctasec}' => 'Cta. Contable Asoc:',
              'facliente{codtipemp}' => 'Tipo de Empresa:',
              'facliente{tipper}' => 'Tipo de Persona:',
              'facliente{pagweb}' => 'Página Web:',
              'facliente{telrepleg}' => 'Teléfono:',
              'facliente{correpleg}' => 'Correo:',
              'facliente{rifpercon}' => 'C.I./R.I.F.:',
              'facliente{nompercon}' => 'Nombre:',
              'facliente{dirpercon}' => 'Dirección:',
              'facliente{telpercon}' => 'Teléfono:',
              'facliente{corpercon}' => 'Correo:',
              'facliente{escontrib}' => 'Es Contribuyente:',
              'facliente{codedo}' => 'Estado:',
              'facliente{poriva}' => 'Porcentaje IVA:',
              'facliente{fatipcte_id}' => 'Tipo de Cliente:',
              'facliente{esprospec}' => 'Es Prospecto:',
              'facliente{valdoc}' => 'Vencimiento del Documento (Días):',
              'facliente{codctaant}' => 'Cta. Contable Anticipo:',
              'facliente{id}' => 'Id:',
            );
   return $arreglo;
  }



  /**
   * Función para manejar el llamado Ajax automático con el
   * Helper Catalogo.
   *
   */
  public function executeCatalogo()
  {
    $codigo = $this->getRequestParameter('codigo','');
    $clase = $this->getRequestParameter('clase','');
    $nombre = $this->getRequestParameter('name','');
    $campobase = $this->getRequestParameter('campobase','');
    $campoprincipal = $this->getRequestParameter('campoprincipal','');
    $camposecundario = $this->getRequestParameter('camposecundario','');

    $c = new Criteria();
    eval('$c->add('.ucfirst(strtolower($clase)).'Peer::'.strtoupper($campoprincipal).','.chr(39).$codigo.chr(39).');');
    eval('$peer = '.ucfirst(strtolower($clase)).'Peer::doSelectOne($c);');

  eval('$cajasec = "'.strtolower($nombre).'_'.strtolower($camposecundario).'";');
  eval('$cajaid = "'.strtolower($nombre).'_'.strtolower($campobase).'";');
  if ($peer){
  eval('$valsec = $peer->get'.H::ObtenerNombreCampo($camposecundario).'();');
  eval('$valid = $peer->getId();');}
  else{
    $valsec='';
    $valid='';
  }
  $output = '[["'.$cajasec.'","'.$valsec.'",""],["'.$cajaid.'","'.$valid.'",""],["","",""]]';
    $this->getResponse()->setHttpHeader("X-JSON", '('.$output.')');
    return sfView::HEADER_ONLY;
  }


  /**
   * Función para guardar la bitacora de la aplicacion
   * TODO: mejorar la carga de información en la bitacora
   * Actualmente esta planteada información no muy relevante
   *
   */
 public function SalvarBitacora($id, $acc)
  {
    try{
      $segbitaco= new Segbitaco();
      $fecha=date('Y-m-d');

      $segbitaco->setCodintusu($this->getUser()->getAttribute('usuario_id'));
      $segbitaco->setTipope(substr($acc, 0, 1));
      $segbitaco->setCodmod('facliente');
      $segbitaco->setValcla('Facliente');
      $segbitaco->setCodapl(substr(SF_APP, 0, 3));
      $segbitaco->setFecope($fecha);
      $segbitaco->setHorope(time('h:i:s'));
      $segbitaco->setRefmov($id);
      $segbitaco->save();
    }catch(Exception $e){

    }
  }

  public function Bitacora($acc)
  {
	$id= $this->facliente->getId();
    $this->SalvarBitacora($id ,$acc);
  }






}

