<?php
// auto-generated by PropelCidesa
// date: 2017/02/13 06:36:15
?>
<?php

/**
 * autoFaconpag actions.
 *
 * @package    Roraima
 * @subpackage autoFaconpag 
 * @author     $Author: cramirez $ <desarrollo@cidesa.com.ve>
 * @version    SVN: $Id: actions.class.php 43817 2011-04-22 21:28:42Z cramirez $
 * @license    http://opensource.org/licenses/gpl-2.0.php GPLv2
 * @copyright  Copyright 2007, Cide S.A.
 */
class autoFaconpagActions extends sfActions
{

  // variable donde se debe colocar el código de error generado en el validateEdit 
  // para que sea procesado por el handleErrorEdit.
  protected $coderr = -1;

  public function executeIndex()
  {
    return $this->forward('faconpag', 'list');
  }

  /**
   * Función para incluir funcionalidades adicionales en el executeList.
   * Esta funcion debe ser reescrita en la clase que hereda.
   *
   */
  protected function listing()
  {     


  }

  /**
   * Función principal para el manejo de la accion list
   * del formulario.
   *
   */
  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->listing();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/faconpag/filters');


     // 15    // pager
    $this->pager = new sfPropelPager('Faconpag', 15);
    $c = new Criteria();
    $this->c ? $c=$this->c : '';
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('faconpag', 'edit');
  }

  /**
   * Función principal para el manejo de la acción save
   * del formulario.
   *
   */
  public function executeSave()
  {

    return $this->forward('faconpag', 'edit');

  }

  /**
   * Función para incluir funcionalidades adicionales en el executeEdit.
   * Esta funcion debe ser reescrita en la clase que hereda.
   *
   */
  protected function editing()
  {


  }

  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  public function executeEdit()
  {
    $this->params=array();
    $this->faconpag = $this->getFaconpagOrCreate();

    $this->editing();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateFaconpagFromRequest();

      if($this->saveFaconpag($this->faconpag) ==-1){
        {$this->setFlash('notice', 'Your modifications have been saved');

         $id= $this->faconpag->getId();
         $this->SalvarBitacora($id ,'Guardo');}

        if ($this->getRequestParameter('save_and_add'))
        {
          return $this->redirect('faconpag/create');
        }
        else if ($this->getRequestParameter('save_and_list'))
        {
          return $this->redirect('faconpag/list');
        }
        else
        {
            return $this->redirect('faconpag/edit?id='.$this->faconpag->getId());
        }

      }else{
        $this->labels = $this->getLabels();
      }

    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->faconpag = FaconpagPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->faconpag);

    try
    {
      $this->deleteFaconpag($this->faconpag);
      $id= $this->faconpag->getId();
      $this->SalvarBitacora($id ,'Elimino');
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'No se pudo borrar la registro seleccionado. Asegúrese de que no tiene ningún tipo de registros asociados.');
      return $this->forward('faconpag', 'list');
    }


    return $this->forward('faconpag', 'list');
  }

  /**
   * Función para manejar la captura de errores del negocio, tanto que se
   * produzcan por algún validator y por un valor false retornado por el validateEdit
   *
   */
  public function handleErrorEdit()
  {
    $this->params=array();
    $this->preExecute();
    $this->faconpag = $this->getFaconpagOrCreate();
    $this->updateFaconpagFromRequest();
	$this->updateError();
    $this->labels = $this->getLabels();
    if($this->getRequest()->getMethod() == sfRequest::POST)
    {
      if($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('',$err);
      }
    }
    return sfView::SUCCESS;
  }

  /**
   * Función para manejar de el salvado de registros del formulario.
   * cabe destacar que llama internamente a la función $this->saving
   * que es reescrita en la clase que hereda con el proceso que el usuario
   * necesite implementar.
   * Esta función saving siempre debe retornar un valor >=-1.
   *
   */
  protected function saveFaconpag($faconpag)
  {

    // habilitar la siguiente línea si se usa grid
    //$grid=Herramientas::CargarDatosGrid($this,$this->obj);

    try {

      // Modificar la siguiente línea para llamar al método
      // correcto en la clase del negocio, ej:
      // $coderr = Compras::salvarAlmaujoc($caajuoc,$grid);

      // OJO ----> Eliminar esta linea al modificar este método
      $this->coderr = $this->saving($faconpag);


      if(is_array($this->coderr)){
        foreach ($this->coderr as $ERR){
          $err = Herramientas::obtenerMensajeError($ERR);
          $this->getRequest()->setError('',$err);
          $this->updateError();}
          return sfView::SUCCESS;
      }elseif($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('',$err);
        $this->updateError();
        return sfView::SUCCESS;
      }else
      return -1;

    } catch (Exception $ex) {

      $this->coderr = 0;
      $err = Herramientas::obtenerMensajeError($this->coderr);
      $this->getRequest()->setError('',$err);
      $this->updateError();
    return sfView::SUCCESS;
    }


  }

  /**
   * Función que debe ser reescrita en la clase que hereda para
   * implementar el proceso de guardado adecuado para cada formulario.
   *
   */
  protected function saving($faconpag)
  {
    $faconpag->save();
    return -1;

  }

  /**
   * Función que debe ser reescrita en la clase que hereda para
   * implementar el proceso de eliminación adecuado para cada formulario.
   *
   */
  protected function deleting($faconpag)
  {
  	$faconpag->delete();
    return -1;

  }

  /**
   * Función para manejar la eliminación de registros del formulario.
   * cabe destacar que llama internamente a la función $this->deleting
   * que es reescrita en la clase que hereda con el proceso que el usuario
   * necesite implementar.
   * Esta función deleting siempre debe retornar un valor >=-1.
   *
   */
  protected function deleteFaconpag($faconpag)
  {
    try {

      // Modificar la siguiente línea para llamar al método
      // correcto en la clase del negocio, ej:
      // $coderr = Compras::salvarAlmaujoc($caajuoc,$grid);

      // OJO ----> Eliminar esta linea al modificar este método
      $this->coderr = $this->deleting($faconpag);

      if(is_array($this->coderr)){
        foreach ($this->coderr as $ERR){
          $err = Herramientas::obtenerMensajeError($ERR);
          $this->getRequest()->setError('delete',$err);
          $this->updateError();
        }
      }elseif($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('delete',$err);
        $this->updateError();
      }

      //return -1;

    } catch (Exception $ex) {
      $this->coderr = 6;
      $err = Herramientas::obtenerMensajeError($this->coderr);
      $this->getRequest()->setError('delete',$err);
      $this->updateError();
    }

  }

  // Funcion para validar los datos de la vista luego de detectado un error
  // se usa por ejemplo para recargar la informacion y configuración de un grid
  protected function updateError()
  {
    return true;
  }

  /**
   * Actualiza la informacion que viene de la vista 
   * luego de un get/post en el obejto del modelo base del formulario.
   *
   */
  protected function updateFaconpagFromRequest()
  {
    $faconpag = $this->getRequestParameter('faconpag');

    $fields = FaconpagPeer::getFieldNames();

    if(array_search('Codalmusu', $fields))
    {
      if (isset($faconpag['codalmusu']))
      {
        $this->faconpag->setCodalmusu($faconpag['codalmusu']);
      }
    }
    if (isset($faconpag['desconpag']))
    {
      $this->faconpag->setDesconpag($faconpag['desconpag']);
    }
    if (isset($faconpag['numdia']))
    {
      $this->faconpag->setNumdia($faconpag['numdia']);
    }
    if (isset($faconpag['tipconpag']))
    {
      $this->faconpag->setTipconpag($faconpag['tipconpag']);
    }

    if (isset($faconpag['desconpag']))
    {
      $this->faconpag->setDesconpag($faconpag['desconpag']);
    }
    if (isset($faconpag['tipconpag']))
    {
      $this->faconpag->setTipconpag($faconpag['tipconpag']);
    }
    if (isset($faconpag['numdia']))
    {
      $this->faconpag->setNumdia($faconpag['numdia']);
    }
    if (isset($faconpag['generaop']))
    {
      $this->faconpag->setGeneraop($faconpag['generaop']);
    }
    if (isset($faconpag['asiparrec']))
    {
      $this->faconpag->setAsiparrec($faconpag['asiparrec']);
    }
    if (isset($faconpag['generacom']))
    {
      $this->faconpag->setGeneracom($faconpag['generacom']);
    }
    if (isset($faconpag['mercon']))
    {
      $this->faconpag->setMercon($faconpag['mercon']);
    }
    if (isset($faconpag['ctadev']))
    {
      $this->faconpag->setCtadev($faconpag['ctadev']);
    }
    if (isset($faconpag['ctavco']))
    {
      $this->faconpag->setCtavco($faconpag['ctavco']);
    }
    if (isset($faconpag['univta']))
    {
      $this->faconpag->setUnivta($faconpag['univta']);
    }

    if (isset($faconpag['desconpag']))
    {
      $this->faconpag->setDesconpag($faconpag['desconpag']);
    }
    if (isset($faconpag['tipconpag']))
    {
      $this->faconpag->setTipconpag($faconpag['tipconpag']);
    }
    if (isset($faconpag['numdia']))
    {
      $this->faconpag->setNumdia($faconpag['numdia']);
    }
    if (isset($faconpag['generaop']))
    {
      $this->faconpag->setGeneraop($faconpag['generaop']);
    }
    if (isset($faconpag['asiparrec']))
    {
      $this->faconpag->setAsiparrec($faconpag['asiparrec']);
    }
    if (isset($faconpag['generacom']))
    {
      $this->faconpag->setGeneracom($faconpag['generacom']);
    }
    if (isset($faconpag['mercon']))
    {
      $this->faconpag->setMercon($faconpag['mercon']);
    }
    if (isset($faconpag['ctadev']))
    {
      $this->faconpag->setCtadev($faconpag['ctadev']);
    }
    if (isset($faconpag['ctavco']))
    {
      $this->faconpag->setCtavco($faconpag['ctavco']);
    }
    if (isset($faconpag['univta']))
    {
      $this->faconpag->setUnivta($faconpag['univta']);
    }

  }

  /**
   * Retorna el registro del modelo del formulario
   * Identifica si es un registro nuevo o actual, y lo retorna
   *
   */
  protected function getFaconpagOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $faconpag = new Faconpag();
    }
    else
    {
      $faconpag = FaconpagPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($faconpag);
    }

    return $faconpag;
  }

  /**
   * Función para procesar los filtros aplicados a la lista de registros
   *
   */
  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/faconpag/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/faconpag/filters');
    }
  }

  /**
   * Función para procesar el orden de los registros en la lista
   *
   */
  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/faconpag/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/faconpag/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/faconpag/sort'))
    {
      $this->getUser()->setAttribute('sort', 'desconpag', 'sf_admin/faconpag/sort');
      $this->getUser()->setAttribute('type', 'asc', 'sf_admin/faconpag/sort');
    }
  }

  /**
   * Función para manejar los filtros de búsqueda
   * de la lista
   *
   */
  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['desconpag_is_empty']))
    {
      $criterion = $c->getNewCriterion(FaconpagPeer::DESCONPAG, '');
      $criterion->addOr($c->getNewCriterion(FaconpagPeer::DESCONPAG, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['desconpag']) && $this->filters['desconpag'] !== '')
    {
      $c->add(FaconpagPeer::DESCONPAG, strtr("%".$this->filters['desconpag']."%", '*', '%'), Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
  }

  /**
   * Función para colocar el criterio de ordenación de la lista de registros
   * en la acción List
   *
   */
  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/faconpag/sort'))
    {
      $sort_column = FaconpagPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/faconpag/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  /**
   * Función para retornar las etiquetas del formulario
   *
   */
  protected function getLabels()
  {
    $arreglo=array(
                  'faconpag{desconpag}' => 'Descripción:',
              'faconpag{numdia}' => 'Número de Días:',
              'faconpag{tipconpag}' => 'Tipo:',
                          'faconpag{desconpag}' => 'Descripción:',
              'faconpag{tipconpag}' => 'Tipo:',
              'faconpag{numdia}' => 'Número de Días:',
              'faconpag{generaop}' => 'Generaop:',
              'faconpag{asiparrec}' => 'Asiparrec:',
              'faconpag{generacom}' => 'Generacom:',
              'faconpag{mercon}' => 'Mercon:',
              'faconpag{ctadev}' => 'Ctadev:',
              'faconpag{ctavco}' => 'Ctavco:',
              'faconpag{univta}' => 'Univta:',
              'faconpag{id}' => 'Id:',
            );
   return $arreglo;
  }



  /**
   * Función para manejar el llamado Ajax automático con el
   * Helper Catalogo.
   *
   */
  public function executeCatalogo()
  {
    $codigo = $this->getRequestParameter('codigo','');
    $clase = $this->getRequestParameter('clase','');
    $nombre = $this->getRequestParameter('name','');
    $campobase = $this->getRequestParameter('campobase','');
    $campoprincipal = $this->getRequestParameter('campoprincipal','');
    $camposecundario = $this->getRequestParameter('camposecundario','');

    $c = new Criteria();
    eval('$c->add('.ucfirst(strtolower($clase)).'Peer::'.strtoupper($campoprincipal).','.chr(39).$codigo.chr(39).');');
    eval('$peer = '.ucfirst(strtolower($clase)).'Peer::doSelectOne($c);');

  eval('$cajasec = "'.strtolower($nombre).'_'.strtolower($camposecundario).'";');
  eval('$cajaid = "'.strtolower($nombre).'_'.strtolower($campobase).'";');
  if ($peer){
  eval('$valsec = $peer->get'.H::ObtenerNombreCampo($camposecundario).'();');
  eval('$valid = $peer->getId();');}
  else{
    $valsec='';
    $valid='';
  }
  $output = '[["'.$cajasec.'","'.$valsec.'",""],["'.$cajaid.'","'.$valid.'",""],["","",""]]';
    $this->getResponse()->setHttpHeader("X-JSON", '('.$output.')');
    return sfView::HEADER_ONLY;
  }


  /**
   * Función para guardar la bitacora de la aplicacion
   * TODO: mejorar la carga de información en la bitacora
   * Actualmente esta planteada información no muy relevante
   *
   */
 public function SalvarBitacora($id, $acc)
  {
    try{
      $segbitaco= new Segbitaco();
      $fecha=date('Y-m-d');

      $segbitaco->setCodintusu($this->getUser()->getAttribute('usuario_id'));
      $segbitaco->setTipope(substr($acc, 0, 1));
      $segbitaco->setCodmod('faconpag');
      $segbitaco->setValcla('Faconpag');
      $segbitaco->setCodapl(substr(SF_APP, 0, 3));
      $segbitaco->setFecope($fecha);
      $segbitaco->setHorope(time('h:i:s'));
      $segbitaco->setRefmov($id);
      $segbitaco->save();
    }catch(Exception $e){

    }
  }

  public function Bitacora($acc)
  {
	$id= $this->faconpag->getId();
    $this->SalvarBitacora($id ,$acc);
  }






}

