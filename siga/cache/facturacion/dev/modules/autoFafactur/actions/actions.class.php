<?php
// auto-generated by PropelCidesa
// date: 2017/02/17 10:31:16
?>
<?php

/**
 * autoFafactur actions.
 *
 * @package    Roraima
 * @subpackage autoFafactur 
 * @author     $Author: cramirez $ <desarrollo@cidesa.com.ve>
 * @version    SVN: $Id: actions.class.php 43817 2011-04-22 21:28:42Z cramirez $
 * @license    http://opensource.org/licenses/gpl-2.0.php GPLv2
 * @copyright  Copyright 2007, Cide S.A.
 */
class autoFafacturActions extends sfActions
{

  // variable donde se debe colocar el código de error generado en el validateEdit 
  // para que sea procesado por el handleErrorEdit.
  protected $coderr = -1;

  public function executeIndex()
  {
    return $this->forward('fafactur', 'list');
  }

  /**
   * Función para incluir funcionalidades adicionales en el executeList.
   * Esta funcion debe ser reescrita en la clase que hereda.
   *
   */
  protected function listing()
  {     


  }

  /**
   * Función principal para el manejo de la accion list
   * del formulario.
   *
   */
  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->listing();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/fafactur/filters');


     // 15    // pager
    $this->pager = new sfPropelPager('Fafactur', 15);
    $c = new Criteria();
    $this->c ? $c=$this->c : '';
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('fafactur', 'edit');
  }

  /**
   * Función principal para el manejo de la acción save
   * del formulario.
   *
   */
  public function executeSave()
  {

    return $this->forward('fafactur', 'edit');

  }

  /**
   * Función para incluir funcionalidades adicionales en el executeEdit.
   * Esta funcion debe ser reescrita en la clase que hereda.
   *
   */
  protected function editing()
  {


  }

  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  public function executeEdit()
  {
    $this->params=array();
    $this->fafactur = $this->getFafacturOrCreate();

    $this->editing();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateFafacturFromRequest();

      if($this->saveFafactur($this->fafactur) ==-1){
        {$this->setFlash('notice', 'Your modifications have been saved');

         $id= $this->fafactur->getId();
         $this->SalvarBitacora($id ,'Guardo');}

        if ($this->getRequestParameter('save_and_add'))
        {
          return $this->redirect('fafactur/create');
        }
        else if ($this->getRequestParameter('save_and_list'))
        {
          return $this->redirect('fafactur/list');
        }
        else
        {
            return $this->redirect('fafactur/edit?id='.$this->fafactur->getId());
        }

      }else{
        $this->labels = $this->getLabels();
      }

    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->fafactur = FafacturPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->fafactur);

    try
    {
      $this->deleteFafactur($this->fafactur);
      $id= $this->fafactur->getId();
      $this->SalvarBitacora($id ,'Elimino');
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'No se pudo borrar la registro seleccionado. Asegúrese de que no tiene ningún tipo de registros asociados.');
      return $this->forward('fafactur', 'list');
    }


    return $this->forward('fafactur', 'list');
  }

  /**
   * Función para manejar la captura de errores del negocio, tanto que se
   * produzcan por algún validator y por un valor false retornado por el validateEdit
   *
   */
  public function handleErrorEdit()
  {
    $this->params=array();
    $this->preExecute();
    $this->fafactur = $this->getFafacturOrCreate();
    $this->updateFafacturFromRequest();
	$this->updateError();
    $this->labels = $this->getLabels();
    if($this->getRequest()->getMethod() == sfRequest::POST)
    {
      if($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('',$err);
      }
    }
    return sfView::SUCCESS;
  }

  /**
   * Función para manejar de el salvado de registros del formulario.
   * cabe destacar que llama internamente a la función $this->saving
   * que es reescrita en la clase que hereda con el proceso que el usuario
   * necesite implementar.
   * Esta función saving siempre debe retornar un valor >=-1.
   *
   */
  protected function saveFafactur($fafactur)
  {

    // habilitar la siguiente línea si se usa grid
    //$grid=Herramientas::CargarDatosGrid($this,$this->obj);

    try {

      // Modificar la siguiente línea para llamar al método
      // correcto en la clase del negocio, ej:
      // $coderr = Compras::salvarAlmaujoc($caajuoc,$grid);

      // OJO ----> Eliminar esta linea al modificar este método
      $this->coderr = $this->saving($fafactur);


      if(is_array($this->coderr)){
        foreach ($this->coderr as $ERR){
          $err = Herramientas::obtenerMensajeError($ERR);
          $this->getRequest()->setError('',$err);
          $this->updateError();}
          return sfView::SUCCESS;
      }elseif($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('',$err);
        $this->updateError();
        return sfView::SUCCESS;
      }else
      return -1;

    } catch (Exception $ex) {

      $this->coderr = 0;
      $err = Herramientas::obtenerMensajeError($this->coderr);
      $this->getRequest()->setError('',$err);
      $this->updateError();
    return sfView::SUCCESS;
    }


  }

  /**
   * Función que debe ser reescrita en la clase que hereda para
   * implementar el proceso de guardado adecuado para cada formulario.
   *
   */
  protected function saving($fafactur)
  {
    $fafactur->save();
    return -1;

  }

  /**
   * Función que debe ser reescrita en la clase que hereda para
   * implementar el proceso de eliminación adecuado para cada formulario.
   *
   */
  protected function deleting($fafactur)
  {
  	$fafactur->delete();
    return -1;

  }

  /**
   * Función para manejar la eliminación de registros del formulario.
   * cabe destacar que llama internamente a la función $this->deleting
   * que es reescrita en la clase que hereda con el proceso que el usuario
   * necesite implementar.
   * Esta función deleting siempre debe retornar un valor >=-1.
   *
   */
  protected function deleteFafactur($fafactur)
  {
    try {

      // Modificar la siguiente línea para llamar al método
      // correcto en la clase del negocio, ej:
      // $coderr = Compras::salvarAlmaujoc($caajuoc,$grid);

      // OJO ----> Eliminar esta linea al modificar este método
      $this->coderr = $this->deleting($fafactur);

      if(is_array($this->coderr)){
        foreach ($this->coderr as $ERR){
          $err = Herramientas::obtenerMensajeError($ERR);
          $this->getRequest()->setError('delete',$err);
          $this->updateError();
        }
      }elseif($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('delete',$err);
        $this->updateError();
      }

      //return -1;

    } catch (Exception $ex) {
      $this->coderr = 6;
      $err = Herramientas::obtenerMensajeError($this->coderr);
      $this->getRequest()->setError('delete',$err);
      $this->updateError();
    }

  }

  // Funcion para validar los datos de la vista luego de detectado un error
  // se usa por ejemplo para recargar la informacion y configuración de un grid
  protected function updateError()
  {
    return true;
  }

  /**
   * Actualiza la informacion que viene de la vista 
   * luego de un get/post en el obejto del modelo base del formulario.
   *
   */
  protected function updateFafacturFromRequest()
  {
    $fafactur = $this->getRequestParameter('fafactur');

    $fields = FafacturPeer::getFieldNames();

    if(array_search('Codalmusu', $fields))
    {
      if (isset($fafactur['codalmusu']))
      {
        $this->fafactur->setCodalmusu($fafactur['codalmusu']);
      }
    }
    if (isset($fafactur['btnprint']))
    {
      $this->fafactur->setBtnprint($fafactur['btnprint']);
    }
    if (isset($fafactur['codcaj']))
    {
      $this->fafactur->setCodcaj($fafactur['codcaj']);
    }
    if (isset($fafactur['reffac']))
    {
      $this->fafactur->setReffac($fafactur['reffac']);
    }
    if (isset($fafactur['fecfac']))
    {
      if ($fafactur['fecfac'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fecfac']))
          {
            $value = $dateFormat->format($fafactur['fecfac'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fecfac'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFecfac($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFecfac(null);
      }
    }
    if (isset($fafactur['tipref']))
    {
      $this->fafactur->setTipref($fafactur['tipref']);
    }
    if (isset($fafactur['tipmon']))
    {
      $this->fafactur->setTipmon($fafactur['tipmon']);
    }
    if (isset($fafactur['rifpro']))
    {
      $this->fafactur->setRifpro($fafactur['rifpro']);
    }
    if (isset($fafactur['telpro']))
    {
      $this->fafactur->setTelpro($fafactur['telpro']);
    }
    if (isset($fafactur['dirpro']))
    {
      $this->fafactur->setDirpro($fafactur['dirpro']);
    }
    if (isset($fafactur['tipper']))
    {
      $this->fafactur->setTipper($fafactur['tipper']);
    }
    if (isset($fafactur['codconpag']))
    {
      $this->fafactur->setCodconpag($fafactur['codconpag']);
    }
    if (isset($fafactur['codcon']))
    {
      $this->fafactur->setCodcon($fafactur['codcon']);
    }
    if (isset($fafactur['desfac']))
    {
      $this->fafactur->setDesfac($fafactur['desfac']);
    }
    if (isset($fafactur['monto']))
    {
      $this->fafactur->setMonto($fafactur['monto']);
    }
    if (isset($fafactur['monrgo']))
    {
      $this->fafactur->setMonrgo($fafactur['monrgo']);
    }
    if (isset($fafactur['mondesc']))
    {
      $this->fafactur->setMondesc($fafactur['mondesc']);
    }
    if (isset($fafactur['monfac']))
    {
      $this->fafactur->setMonfac($fafactur['monfac']);
    }
    if (isset($fafactur['combo']))
    {
      $this->fafactur->setCombo($fafactur['combo']);
    }
    if (isset($fafactur['refproform']))
    {
      $this->fafactur->setRefproform($fafactur['refproform']);
    }
    if (isset($fafactur['proform']))
    {
      $this->fafactur->setProform($fafactur['proform']);
    }
    if (isset($fafactur['numcontrol']))
    {
      $this->fafactur->setNumcontrol($fafactur['numcontrol']);
    }
    if (isset($fafactur['marrec']))
    {
      $this->fafactur->setMarrec($fafactur['marrec']);
    }
    if (isset($fafactur['desrec']))
    {
      $this->fafactur->setDesrec($fafactur['desrec']);
    }
    if (isset($fafactur['codubi']))
    {
      $this->fafactur->setCodubi($fafactur['codubi']);
    }
    if (isset($fafactur['tipoven']))
    {
      $this->fafactur->setTipoven($fafactur['tipoven']);
    }
    if (isset($fafactur['descli']))
    {
      $this->fafactur->setDescli($fafactur['descli']);
    }
    if (isset($fafactur['ajucal']))
    {
      $this->fafactur->setAjucal($fafactur['ajucal']);
    }
    if (isset($fafactur['btufin']))
    {
      $this->fafactur->setBtufin($fafactur['btufin']);
    }
    if (isset($fafactur['puedph']))
    {
      $this->fafactur->setPuedph($fafactur['puedph']);
    }
    if (isset($fafactur['puedes']))
    {
      $this->fafactur->setPuedes($fafactur['puedes']);
    }
    if (isset($fafactur['buque']))
    {
      $this->fafactur->setBuque($fafactur['buque']);
    }
    if (isset($fafactur['codalm']))
    {
      $this->fafactur->setCodalm($fafactur['codalm']);
    }
    if (isset($fafactur['porped']))
    {
      $this->fafactur->setPorped($fafactur['porped']);
    }
    if (isset($fafactur['coddirec']))
    {
      $this->fafactur->setCoddirec($fafactur['coddirec']);
    }
    if (isset($fafactur['listaart']))
    {
      $this->fafactur->setListaart($fafactur['listaart']);
    }
    if (isset($fafactur['grid_fapeddes']))
    {
      $this->fafactur->setGridFapeddes($fafactur['grid_fapeddes']);
    }
    if (isset($fafactur['grid_faartfac']))
    {
      $this->fafactur->setGridFaartfac($fafactur['grid_faartfac']);
    }
    if (isset($fafactur['grid_fadescart']))
    {
      $this->fafactur->setGridFadescart($fafactur['grid_fadescart']);
    }
    if (isset($fafactur['totdesc']))
    {
      $this->fafactur->setTotdesc($fafactur['totdesc']);
    }
    if (isset($fafactur['grid_fargoart']))
    {
      $this->fafactur->setGridFargoart($fafactur['grid_fargoart']);
    }
    if (isset($fafactur['totrec']))
    {
      $this->fafactur->setTotrec($fafactur['totrec']);
    }
    if (isset($fafactur['grid_fafaclib']))
    {
      $this->fafactur->setGridFafaclib($fafactur['grid_fafaclib']);
    }
    if (isset($fafactur['codtip']))
    {
      $this->fafactur->setCodtip($fafactur['codtip']);
    }
    if (isset($fafactur['grid_faforpag']))
    {
      $this->fafactur->setGridFaforpag($fafactur['grid_faforpag']);
    }
    if (isset($fafactur['moncan']))
    {
      $this->fafactur->setMoncan($fafactur['moncan']);
    }
    if (isset($fafactur['monres']))
    {
      $this->fafactur->setMonres($fafactur['monres']);
    }
    if (isset($fafactur['vuelto']))
    {
      $this->fafactur->setVuelto($fafactur['vuelto']);
    }
    if (isset($fafactur['observ']))
    {
      $this->fafactur->setObserv($fafactur['observ']);
    }
    if (isset($fafactur['sucursal']))
    {
      $this->fafactur->setSucursal($fafactur['sucursal']);
    }
    if (isset($fafactur['usuarios']))
    {
      $this->fafactur->setUsuarios($fafactur['usuarios']);
    }
    if (isset($fafactur['password']))
    {
      $this->fafactur->setPassword($fafactur['password']);
    }
    if (isset($fafactur['obsfac']))
    {
      $this->fafactur->setObsfac($fafactur['obsfac']);
    }
    if (isset($fafactur['nroordfac']))
    {
      $this->fafactur->setNroordfac($fafactur['nroordfac']);
    }
    if (isset($fafactur['codpropat']))
    {
      $this->fafactur->setCodpropat($fafactur['codpropat']);
    }
    if (isset($fafactur['codprorad']))
    {
      $this->fafactur->setCodprorad($fafactur['codprorad']);
    }
    if (isset($fafactur['version']))
    {
      $this->fafactur->setVersion($fafactur['version']);
    }
    if (isset($fafactur['fectrades']))
    {
      if ($fafactur['fectrades'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fectrades']))
          {
            $value = $dateFormat->format($fafactur['fectrades'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fectrades'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFectrades($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFectrades(null);
      }
    }
    if (isset($fafactur['fectrahas']))
    {
      if ($fafactur['fectrahas'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fectrahas']))
          {
            $value = $dateFormat->format($fafactur['fectrahas'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fectrahas'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFectrahas($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFectrahas(null);
      }
    }
    if (isset($fafactur['frectra']))
    {
      $this->fafactur->setFrectra($fafactur['frectra']);
    }
    if (isset($fafactur['duracion']))
    {
      $this->fafactur->setDuracion($fafactur['duracion']);
    }
    if (isset($fafactur['obstra']))
    {
      $this->fafactur->setObstra($fafactur['obstra']);
    }
    if (isset($fafactur['fecper1']))
    {
      if ($fafactur['fecper1'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fecper1']))
          {
            $value = $dateFormat->format($fafactur['fecper1'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fecper1'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFecper1($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFecper1(null);
      }
    }
    if (isset($fafactur['fecper2']))
    {
      if ($fafactur['fecper2'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fecper2']))
          {
            $value = $dateFormat->format($fafactur['fecper2'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fecper2'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFecper2($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFecper2(null);
      }
    }
    if (isset($fafactur['muelle']))
    {
      $this->fafactur->setMuelle($fafactur['muelle']);
    }
    if (isset($fafactur['buque2']))
    {
      $this->fafactur->setBuque2($fafactur['buque2']);
    }
    if (isset($fafactur['expedi']))
    {
      $this->fafactur->setExpedi($fafactur['expedi']);
    }
    if (isset($fafactur['bele']))
    {
      $this->fafactur->setBele($fafactur['bele']);
    }
    if (isset($fafactur['factura']))
    {
      $this->fafactur->setFactura($fafactur['factura']);
    }
    if (isset($fafactur['embarca']))
    {
      $this->fafactur->setEmbarca($fafactur['embarca']);
    }
    if (isset($fafactur['descarga']))
    {
      $this->fafactur->setDescarga($fafactur['descarga']);
    }
    if (isset($fafactur['canbul']))
    {
      $this->fafactur->setCanbul($fafactur['canbul']);
    }
    if (isset($fafactur['codprod']))
    {
      $this->fafactur->setCodprod($fafactur['codprod']);
    }
    if (isset($fafactur['tmdesc']))
    {
      $this->fafactur->setTmdesc($fafactur['tmdesc']);
    }
    if (isset($fafactur['fecatra']))
    {
      if ($fafactur['fecatra'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fecatra']))
          {
            $value = $dateFormat->format($fafactur['fecatra'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fecatra'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFecatra($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFecatra(null);
      }
    }
    if (isset($fafactur['fecinidesc']))
    {
      if ($fafactur['fecinidesc'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fecinidesc']))
          {
            $value = $dateFormat->format($fafactur['fecinidesc'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fecinidesc'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFecinidesc($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFecinidesc(null);
      }
    }
    if (isset($fafactur['fecfindesc']))
    {
      if ($fafactur['fecfindesc'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fecfindesc']))
          {
            $value = $dateFormat->format($fafactur['fecfindesc'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fecfindesc'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFecfindesc($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFecfindesc(null);
      }
    }
    if (isset($fafactur['valcifs']))
    {
      $this->fafactur->setValcifs($fafactur['valcifs']);
    }

    if (isset($fafactur['reffac']))
    {
      $this->fafactur->setReffac($fafactur['reffac']);
    }
    if (isset($fafactur['fecfac']))
    {
      if ($fafactur['fecfac'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fecfac']))
          {
            $value = $dateFormat->format($fafactur['fecfac'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fecfac'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFecfac($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFecfac(null);
      }
    }
    if (isset($fafactur['codcli']))
    {
    $this->fafactur->setCodcli($fafactur['codcli'] ? $fafactur['codcli'] : null);
    }
    if (isset($fafactur['desfac']))
    {
      $this->fafactur->setDesfac($fafactur['desfac']);
    }
    if (isset($fafactur['tipref']))
    {
      $this->fafactur->setTipref($fafactur['tipref']);
    }
    if (isset($fafactur['monfac']))
    {
      $this->fafactur->setMonfac($fafactur['monfac']);
    }
    if (isset($fafactur['mondesc']))
    {
      $this->fafactur->setMondesc($fafactur['mondesc']);
    }
    if (isset($fafactur['codconpag']))
    {
      $this->fafactur->setCodconpag($fafactur['codconpag']);
    }
    if (isset($fafactur['numcom']))
    {
      $this->fafactur->setNumcom($fafactur['numcom']);
    }
    if (isset($fafactur['reapor']))
    {
      $this->fafactur->setReapor($fafactur['reapor']);
    }
    if (isset($fafactur['fecanu']))
    {
      if ($fafactur['fecanu'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fecanu']))
          {
            $value = $dateFormat->format($fafactur['fecanu'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fecanu'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFecanu($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFecanu(null);
      }
    }
    if (isset($fafactur['status']))
    {
      $this->fafactur->setStatus($fafactur['status']);
    }
    if (isset($fafactur['observ']))
    {
      $this->fafactur->setObserv($fafactur['observ']);
    }
    if (isset($fafactur['tipmon']))
    {
      $this->fafactur->setTipmon($fafactur['tipmon']);
    }
    if (isset($fafactur['valmon']))
    {
      $this->fafactur->setValmon($fafactur['valmon']);
    }
    if (isset($fafactur['numcomord']))
    {
      $this->fafactur->setNumcomord($fafactur['numcomord']);
    }
    if (isset($fafactur['numcominv']))
    {
      $this->fafactur->setNumcominv($fafactur['numcominv']);
    }
    if (isset($fafactur['sucursal']))
    {
      $this->fafactur->setSucursal($fafactur['sucursal']);
    }
    if (isset($fafactur['motanu']))
    {
      $this->fafactur->setMotanu($fafactur['motanu']);
    }
    if (isset($fafactur['vuelto']))
    {
      $this->fafactur->setVuelto($fafactur['vuelto']);
    }
    if (isset($fafactur['codcaj']))
    {
      $this->fafactur->setCodcaj($fafactur['codcaj']);
    }
    if (isset($fafactur['numcontrol']))
    {
      $this->fafactur->setNumcontrol($fafactur['numcontrol']);
    }
    if (isset($fafactur['proform']))
    {
      $this->fafactur->setProform($fafactur['proform']);
    }
    if (isset($fafactur['codubi']))
    {
      $this->fafactur->setCodubi($fafactur['codubi']);
    }
    if (isset($fafactur['tipoven']))
    {
      $this->fafactur->setTipoven($fafactur['tipoven']);
    }
    if (isset($fafactur['obsfac']))
    {
      $this->fafactur->setObsfac($fafactur['obsfac']);
    }
    if (isset($fafactur['codcenaco']))
    {
      $this->fafactur->setCodcenaco($fafactur['codcenaco']);
    }
    if (isset($fafactur['staent']))
    {
      $this->fafactur->setStaent($fafactur['staent']);
    }
    if (isset($fafactur['fecent']))
    {
      if ($fafactur['fecent'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fecent']))
          {
            $value = $dateFormat->format($fafactur['fecent'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fecent'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFecent($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFecent(null);
      }
    }
    if (isset($fafactur['usuent']))
    {
      $this->fafactur->setUsuent($fafactur['usuent']);
    }
    if (isset($fafactur['codcon']))
    {
      $this->fafactur->setCodcon($fafactur['codcon']);
    }
    if (isset($fafactur['btufin']))
    {
      $this->fafactur->setBtufin($fafactur['btufin']);
    }
    if (isset($fafactur['puedph']))
    {
      $this->fafactur->setPuedph($fafactur['puedph']);
    }
    if (isset($fafactur['puedes']))
    {
      $this->fafactur->setPuedes($fafactur['puedes']);
    }
    if (isset($fafactur['buque']))
    {
      $this->fafactur->setBuque($fafactur['buque']);
    }
    if (isset($fafactur['fadescripfac_id']))
    {
      $this->fafactur->setFadescripfacId($fafactur['fadescripfac_id']);
    }
    if (isset($fafactur['codprg']))
    {
      $this->fafactur->setCodprg($fafactur['codprg']);
    }
    if (isset($fafactur['conpag']))
    {
      $this->fafactur->setConpag($fafactur['conpag']);
    }
    if (isset($fafactur['codalmusu']))
    {
    $this->fafactur->setCodalmusu($fafactur['codalmusu'] ? $fafactur['codalmusu'] : null);
    }
    if (isset($fafactur['nroordfac']))
    {
      $this->fafactur->setNroordfac($fafactur['nroordfac']);
    }
    if (isset($fafactur['codpropat']))
    {
      $this->fafactur->setCodpropat($fafactur['codpropat']);
    }
    if (isset($fafactur['codprorad']))
    {
      $this->fafactur->setCodprorad($fafactur['codprorad']);
    }
    if (isset($fafactur['rifprod']))
    {
      $this->fafactur->setRifprod($fafactur['rifprod']);
    }
    if (isset($fafactur['version']))
    {
      $this->fafactur->setVersion($fafactur['version']);
    }
    if (isset($fafactur['fectrades']))
    {
      if ($fafactur['fectrades'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fectrades']))
          {
            $value = $dateFormat->format($fafactur['fectrades'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fectrades'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFectrades($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFectrades(null);
      }
    }
    if (isset($fafactur['fectrahas']))
    {
      if ($fafactur['fectrahas'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fectrahas']))
          {
            $value = $dateFormat->format($fafactur['fectrahas'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fectrahas'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFectrahas($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFectrahas(null);
      }
    }
    if (isset($fafactur['frectra']))
    {
      $this->fafactur->setFrectra($fafactur['frectra']);
    }
    if (isset($fafactur['duracion']))
    {
      $this->fafactur->setDuracion($fafactur['duracion']);
    }
    if (isset($fafactur['obstra']))
    {
      $this->fafactur->setObstra($fafactur['obstra']);
    }
    if (isset($fafactur['muelle']))
    {
      $this->fafactur->setMuelle($fafactur['muelle']);
    }
    if (isset($fafactur['buque2']))
    {
      $this->fafactur->setBuque2($fafactur['buque2']);
    }
    if (isset($fafactur['expedi']))
    {
      $this->fafactur->setExpedi($fafactur['expedi']);
    }
    if (isset($fafactur['bele']))
    {
      $this->fafactur->setBele($fafactur['bele']);
    }
    if (isset($fafactur['factura']))
    {
      $this->fafactur->setFactura($fafactur['factura']);
    }
    if (isset($fafactur['embarca']))
    {
      $this->fafactur->setEmbarca($fafactur['embarca']);
    }
    if (isset($fafactur['descarga']))
    {
      $this->fafactur->setDescarga($fafactur['descarga']);
    }
    if (isset($fafactur['canbul']))
    {
      $this->fafactur->setCanbul($fafactur['canbul']);
    }
    if (isset($fafactur['codprod']))
    {
      $this->fafactur->setCodprod($fafactur['codprod']);
    }
    if (isset($fafactur['tmdesc']))
    {
      $this->fafactur->setTmdesc($fafactur['tmdesc']);
    }
    if (isset($fafactur['fecatra']))
    {
      if ($fafactur['fecatra'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fecatra']))
          {
            $value = $dateFormat->format($fafactur['fecatra'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fecatra'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFecatra($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFecatra(null);
      }
    }
    if (isset($fafactur['fecinidesc']))
    {
      if ($fafactur['fecinidesc'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fecinidesc']))
          {
            $value = $dateFormat->format($fafactur['fecinidesc'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fecinidesc'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFecinidesc($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFecinidesc(null);
      }
    }
    if (isset($fafactur['fecfindesc']))
    {
      if ($fafactur['fecfindesc'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fecfindesc']))
          {
            $value = $dateFormat->format($fafactur['fecfindesc'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fecfindesc'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFecfindesc($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFecfindesc(null);
      }
    }
    if (isset($fafactur['valcifs']))
    {
      $this->fafactur->setValcifs($fafactur['valcifs']);
    }
    if (isset($fafactur['fecper1']))
    {
      if ($fafactur['fecper1'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fecper1']))
          {
            $value = $dateFormat->format($fafactur['fecper1'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fecper1'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFecper1($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFecper1(null);
      }
    }
    if (isset($fafactur['fecper2']))
    {
      if ($fafactur['fecper2'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['fecper2']))
          {
            $value = $dateFormat->format($fafactur['fecper2'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fafactur['fecper2'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setFecper2($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setFecper2(null);
      }
    }
    if (isset($fafactur['coddirec']))
    {
      $this->fafactur->setCoddirec($fafactur['coddirec']);
    }
    if (isset($fafactur['impfissta']))
    {
      $this->fafactur->setImpfissta($fafactur['impfissta']);
    }
    if (isset($fafactur['created_at']))
    {
      if ($fafactur['created_at'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['created_at']))
          {
            $value = $dateFormat->format($fafactur['created_at'], 'I', $dateFormat->getInputPattern('g'));
          }
          else
          {
            $value_array = $fafactur['created_at'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setCreatedAt($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setCreatedAt(null);
      }
    }
    if (isset($fafactur['updated_at']))
    {
      if ($fafactur['updated_at'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fafactur['updated_at']))
          {
            $value = $dateFormat->format($fafactur['updated_at'], 'I', $dateFormat->getInputPattern('g'));
          }
          else
          {
            $value_array = $fafactur['updated_at'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fafactur->setUpdatedAt($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fafactur->setUpdatedAt(null);
      }
    }
    if (isset($fafactur['created_by_user']))
    {
      $this->fafactur->setCreatedByUser($fafactur['created_by_user']);
    }
    if (isset($fafactur['updated_by_user']))
    {
      $this->fafactur->setUpdatedByUser($fafactur['updated_by_user']);
    }

    if (isset($fafactur['codcli']))
    {
    $this->fafactur->setCodcli($fafactur['codcli'] ? $fafactur['codcli'] : null);
    }
    if (isset($fafactur['reapor']))
    {
      $this->fafactur->setReapor($fafactur['reapor']);
    }
    if (isset($fafactur['status']))
    {
      $this->fafactur->setStatus($fafactur['status']);
    }
    if (isset($fafactur['valmon']))
    {
      $this->fafactur->setValmon($fafactur['valmon']);
    }
    if (isset($fafactur['numcom']))
    {
      $this->fafactur->setNumcom($fafactur['numcom']);
    }
    if (isset($fafactur['numcomord']))
    {
      $this->fafactur->setNumcomord($fafactur['numcomord']);
    }
    if (isset($fafactur['numcominv']))
    {
      $this->fafactur->setNumcominv($fafactur['numcominv']);
    }
    if (isset($fafactur['incluircliente']))
    {
      $this->fafactur->setIncluircliente($fafactur['incluircliente']);
    }
    if (isset($fafactur['tipconpag']))
    {
      $this->fafactur->setTipconpag($fafactur['tipconpag']);
    }
    if (isset($fafactur['tipo']))
    {
      $this->fafactur->setTipo($fafactur['tipo']);
    }
    if (isset($fafactur['apliclades']))
    {
      $this->fafactur->setApliclades($fafactur['apliclades']);
    }
    if (isset($fafactur['docrefiera']))
    {
      $this->fafactur->setDocrefiera($fafactur['docrefiera']);
    }
    if (isset($fafactur['esretencion']))
    {
      $this->fafactur->setEsretencion($fafactur['esretencion']);
    }
    if (isset($fafactur['tottotart']))
    {
      $this->fafactur->setTottotart($fafactur['tottotart']);
    }
    if (isset($fafactur['totmonrgo']))
    {
      $this->fafactur->setTotmonrgo($fafactur['totmonrgo']);
    }
    if (isset($fafactur['monedaanterior']))
    {
      $this->fafactur->setMonedaanterior($fafactur['monedaanterior']);
    }
    if (isset($fafactur['trajo']))
    {
      $this->fafactur->setTrajo($fafactur['trajo']);
    }
    if (isset($fafactur['porcentajedescto']))
    {
      $this->fafactur->setPorcentajedescto($fafactur['porcentajedescto']);
    }
    if (isset($fafactur['totcanpreart']))
    {
      $this->fafactur->setTotcanpreart($fafactur['totcanpreart']);
    }
    if (isset($fafactur['totprecio']))
    {
      $this->fafactur->setTotprecio($fafactur['totprecio']);
    }
    if (isset($fafactur['ctasociada']))
    {
      $this->fafactur->setCtasociada($fafactur['ctasociada']);
    }
    if (isset($fafactur['ctacli']))
    {
      $this->fafactur->setCtacli($fafactur['ctacli']);
    }
    if (isset($fafactur['filgenmov']))
    {
      $this->fafactur->setFilgenmov($fafactur['filgenmov']);
    }
    if (isset($fafactur['limitecredito']))
    {
      $this->fafactur->setLimitecredito($fafactur['limitecredito']);
    }
    if (isset($fafactur['mancatdes']))
    {
      $this->fafactur->setMancatdes($fafactur['mancatdes']);
    }
    if (isset($fafactur['codcenaco']))
    {
      $this->fafactur->setCodcenaco($fafactur['codcenaco']);
    }
    if (isset($fafactur['numfilas']))
    {
      $this->fafactur->setNumfilas($fafactur['numfilas']);
    }
    if (isset($fafactur['filactrec']))
    {
      $this->fafactur->setFilactrec($fafactur['filactrec']);
    }
    if (isset($fafactur['filactdes']))
    {
      $this->fafactur->setFilactdes($fafactur['filactdes']);
    }
    if (isset($fafactur['fadescripfac_id']))
    {
      $this->fafactur->setFadescripfacId($fafactur['fadescripfac_id']);
    }
    if (isset($fafactur['tierecar']))
    {
      $this->fafactur->setTierecar($fafactur['tierecar']);
    }
    if (isset($fafactur['manporped']))
    {
      $this->fafactur->setManporped($fafactur['manporped']);
    }
    if (isset($fafactur['codalmcaj']))
    {
      $this->fafactur->setCodalmcaj($fafactur['codalmcaj']);
    }
    if (isset($fafactur['esprecon']))
    {
      $this->fafactur->setEsprecon($fafactur['esprecon']);
    }
    if (isset($fafactur['manprecon']))
    {
      $this->fafactur->setManprecon($fafactur['manprecon']);
    }
    if (isset($fafactur['nompro']))
    {
      $this->fafactur->setNompro($fafactur['nompro']);
    }
    if (isset($fafactur['calrecdes']))
    {
      $this->fafactur->setCalrecdes($fafactur['calrecdes']);
    }

  }

  /**
   * Retorna el registro del modelo del formulario
   * Identifica si es un registro nuevo o actual, y lo retorna
   *
   */
  protected function getFafacturOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $fafactur = new Fafactur();
    }
    else
    {
      $fafactur = FafacturPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($fafactur);
    }

    return $fafactur;
  }

  /**
   * Función para procesar los filtros aplicados a la lista de registros
   *
   */
  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');
      if (isset($filters['fecfac']['from']) && $filters['fecfac']['from'] !== '')
      {
        $filters['fecfac']['from'] = sfI18N::getTimestampForCulture($filters['fecfac']['from'], $this->getUser()->getCulture());
      }
      if (isset($filters['fecfac']['to']) && $filters['fecfac']['to'] !== '')
      {
        $filters['fecfac']['to'] = sfI18N::getTimestampForCulture($filters['fecfac']['to'], $this->getUser()->getCulture());
      }

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/fafactur/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/fafactur/filters');
    }
  }

  /**
   * Función para procesar el orden de los registros en la lista
   *
   */
  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/fafactur/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/fafactur/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/fafactur/sort'))
    {
      $this->getUser()->setAttribute('sort', 'reffac', 'sf_admin/fafactur/sort');
      $this->getUser()->setAttribute('type', 'asc', 'sf_admin/fafactur/sort');
    }
  }

  /**
   * Función para manejar los filtros de búsqueda
   * de la lista
   *
   */
  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['reffac_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::REFFAC, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::REFFAC, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['reffac']) && $this->filters['reffac'] !== '')
    {
      $c->add(FafacturPeer::REFFAC, strtr("%".$this->filters['reffac']."%", '*', '%'), Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['fecfac_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::FECFAC, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::FECFAC, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['fecfac']))
    {
      if (isset($this->filters['fecfac']['from']) && $this->filters['fecfac']['from'] !== '')
      {
        $criterion = $c->getNewCriterion(FafacturPeer::FECFAC, date('Y-m-d', $this->filters['fecfac']['from']), Criteria::GREATER_EQUAL);
      }
      if (isset($this->filters['fecfac']['to']) && $this->filters['fecfac']['to'] !== '')
      {
        if (isset($criterion))
        {
          $criterion->addAnd($c->getNewCriterion(FafacturPeer::FECFAC, date('Y-m-d', $this->filters['fecfac']['to']), Criteria::LESS_EQUAL));
        }
        else
        {
          $criterion = $c->getNewCriterion(FafacturPeer::FECFAC, date('Y-m-d', $this->filters['fecfac']['to']), Criteria::LESS_EQUAL);
        }
      }

      if (isset($criterion))
      {
        $c->add($criterion);
      }
    }
    if (isset($this->filters['numcontrol_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::NUMCONTROL, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::NUMCONTROL, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['numcontrol']) && $this->filters['numcontrol'] !== '')
    {
      $c->add(FafacturPeer::NUMCONTROL, strtr("%".$this->filters['numcontrol']."%", '*', '%'), Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['codref_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::CODREF, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::CODREF, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codref']) && $this->filters['codref'] !== '')
    {
      $c->add(FafacturPeer::CODREF, $this->filters['codref']);
    }
    if (isset($this->filters['codcli_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::CODCLI, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::CODCLI, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codcli']) && $this->filters['codcli'] !== '')
    {
      $c->add(FafacturPeer::CODCLI, strtr("%".$this->filters['codcli']."%", '*', '%'), Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['rifpro_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::RIFPRO, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::RIFPRO, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['rifpro']) && $this->filters['rifpro'] !== '')
    {
      $c->add(FafacturPeer::RIFPRO, $this->filters['rifpro']);
    }
    if (isset($this->filters['nompro_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::NOMPRO, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::NOMPRO, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['nompro']) && $this->filters['nompro'] !== '')
    {
      $c->add(FafacturPeer::NOMPRO, $this->filters['nompro']);
    }
    if (isset($this->filters['codedo_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::CODEDO, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::CODEDO, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codedo']) && $this->filters['codedo'] !== '')
    {
      $c->add(FafacturPeer::CODEDO, $this->filters['codedo']);
    }
    if (isset($this->filters['nomedo_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::NOMEDO, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::NOMEDO, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['nomedo']) && $this->filters['nomedo'] !== '')
    {
      $c->add(FafacturPeer::NOMEDO, $this->filters['nomedo']);
    }
    if (isset($this->filters['desfac_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::DESFAC, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::DESFAC, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['desfac']) && $this->filters['desfac'] !== '')
    {
      $c->add(FafacturPeer::DESFAC, strtr("%".$this->filters['desfac']."%", '*', '%'), Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['desforpag_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::DESFORPAG, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::DESFORPAG, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['desforpag']) && $this->filters['desforpag'] !== '')
    {
      $c->add(FafacturPeer::DESFORPAG, $this->filters['desforpag']);
    }
    if (isset($this->filters['guia_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::GUIA, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::GUIA, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['guia']) && $this->filters['guia'] !== '')
    {
      $c->add(FafacturPeer::GUIA, $this->filters['guia']);
    }
    if (isset($this->filters['nronot_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::NRONOT, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::NRONOT, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['nronot']) && $this->filters['nronot'] !== '')
    {
      $c->add(FafacturPeer::NRONOT, $this->filters['nronot']);
    }
    if (isset($this->filters['notentdig_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::NOTENTDIG, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::NOTENTDIG, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['notentdig']) && $this->filters['notentdig'] !== '')
    {
      $c->add(FafacturPeer::NOTENTDIG, $this->filters['notentdig']);
    }
    if (isset($this->filters['contenedores_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::CONTENEDORES, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::CONTENEDORES, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['contenedores']) && $this->filters['contenedores'] !== '')
    {
      $c->add(FafacturPeer::CONTENEDORES, $this->filters['contenedores']);
    }
    if (isset($this->filters['billleading_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::BILLLEADING, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::BILLLEADING, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['billleading']) && $this->filters['billleading'] !== '')
    {
      $c->add(FafacturPeer::BILLLEADING, $this->filters['billleading']);
    }
    if (isset($this->filters['codubi_is_empty']))
    {
      $criterion = $c->getNewCriterion(FafacturPeer::CODUBI, '');
      $criterion->addOr($c->getNewCriterion(FafacturPeer::CODUBI, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['codubi']) && $this->filters['codubi'] !== '')
    {
      $c->add(FafacturPeer::CODUBI, strtr("%".$this->filters['codubi']."%", '*', '%'), Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
  }

  /**
   * Función para colocar el criterio de ordenación de la lista de registros
   * en la acción List
   *
   */
  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/fafactur/sort'))
    {
      $sort_column = FafacturPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/fafactur/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  /**
   * Función para retornar las etiquetas del formulario
   *
   */
  protected function getLabels()
  {
    $arreglo=array(
                  'fafactur{btnprint}' => '.:',
              'fafactur{codcaj}' => 'Clave:',
              'fafactur{reffac}' => 'Número:',
              'fafactur{fecfac}' => 'Fecha Emisión:',
              'fafactur{tipref}' => 'Refiere a:',
              'fafactur{tipmon}' => 'Tipo de Moneda:',
              'fafactur{rifpro}' => 'C.I/R.I.F Cliente:',
              'fafactur{telpro}' => 'Teléfono(s):',
              'fafactur{dirpro}' => 'Dirección:',
              'fafactur{tipper}' => 'Tipo de Persona:',
              'fafactur{codconpag}' => 'Condición de Pago:',
              'fafactur{codcon}' => 'Asesor:',
              'fafactur{desfac}' => 'Descripción:',
              'fafactur{monto}' => 'Monto:',
              'fafactur{monrgo}' => 'Recargo:',
              'fafactur{mondesc}' => 'Descuento:',
              'fafactur{monfac}' => 'Total:',
              'fafactur{combo}' => 'Combos de Artículos:',
              'fafactur{refproform}' => 'Refiere Proforma:',
              'fafactur{proform}' => 'Nro. Proforma:',
              'fafactur{numcontrol}' => 'Nro. Control:',
              'fafactur{marrec}' => 'Aplicar Recargo Todos:',
              'fafactur{desrec}' => 'Deshacer Recargos:',
              'fafactur{codubi}' => 'Unidad:',
              'fafactur{tipoven}' => 'Tipo de Venta:',
              'fafactur{descli}' => 'Aplicar Descuento Tipo Cliente:',
              'fafactur{ajucal}' => 'Aplicar Ajuste de Calidad:',
              'fafactur{btufin}' => 'BTU Final:',
              'fafactur{puedph}' => 'Puerto Despacho:',
              'fafactur{puedes}' => 'Puerto Destino:',
              'fafactur{buque}' => 'Buque:',
              'fafactur{codalm}' => 'Almacén:',
              'fafactur{porped}' => 'Porcentaje:',
              'fafactur{coddirec}' => 'Dirección:',
                      'fafactur{listaart}' => 'Artículos:',
              'fafactur{grid_fapeddes}' => 'Pedidos/Despachos:',
              'fafactur{grid_faartfac}' => '.:',
              'fafactur{grid_fadescart}' => '.:',
              'fafactur{totdesc}' => 'Total Descuentos:',
              'fafactur{grid_fargoart}' => '.:',
              'fafactur{totrec}' => 'Total Recargos:',
              'fafactur{grid_fafaclib}' => 'Libro de Ventas:',
                      'fafactur{codtip}' => 'Tipo de Movimiento:',
              'fafactur{grid_faforpag}' => '.:',
              'fafactur{moncan}' => 'Monto Cancelado:',
              'fafactur{monres}' => 'Monto Resto:',
              'fafactur{vuelto}' => 'Monto Vuelto:',
                      'fafactur{observ}' => 'Nota:',
              'fafactur{sucursal}' => 'Sucursal:',
              'fafactur{usuarios}' => 'Usuarios:',
              'fafactur{password}' => 'Password:',
              'fafactur{obsfac}' => 'Observaciones:',
                      'fafactur{nroordfac}' => 'Número de la orden de Transmisión:',
              'fafactur{codpropat}' => 'Producto:',
              'fafactur{codprorad}' => 'Programa:',
              'fafactur{version}' => 'Version:',
              'fafactur{fectrades}' => 'Fecha de Trasmisión Desde:',
              'fafactur{fectrahas}' => 'Fecha de Trasmisión Hasta:',
              'fafactur{frectra}' => 'Frecuencia:',
              'fafactur{duracion}' => 'Duración:',
              'fafactur{obstra}' => 'Observaciones:',
              'fafactur{fecper1}' => 'Fecper1:',
              'fafactur{fecper2}' => 'Fecper2:',
                      'fafactur{muelle}' => 'Muelle:',
              'fafactur{buque2}' => 'Buque:',
              'fafactur{expedi}' => 'N° de Expediente:',
              'fafactur{bele}' => 'BL:',
              'fafactur{factura}' => 'Factura:',
              'fafactur{embarca}' => 'Embarcador:',
              'fafactur{descarga}' => 'Descagadora:',
              'fafactur{canbul}' => 'Cant. Bultos:',
              'fafactur{codprod}' => 'Rubro:',
              'fafactur{tmdesc}' => 'TM Descargadas:',
              'fafactur{fecatra}' => 'Fecha de Atraque:',
              'fafactur{fecinidesc}' => 'Fecha Inicio Descargada:',
              'fafactur{fecfindesc}' => 'Fecha Fin Descargada:',
              'fafactur{valcifs}' => 'Valor CIFS:',
                          'fafactur{reffac}' => 'Número:',
              'fafactur{fecfac}' => 'Fecha Emisión:',
              'fafactur{codcli}' => 'Cod. Cliente:',
              'fafactur{desfac}' => 'Descripción:',
              'fafactur{tipref}' => 'Refiere a:',
              'fafactur{monfac}' => 'Total:',
              'fafactur{mondesc}' => 'Descuento:',
              'fafactur{codconpag}' => 'Condición de Pago:',
              'fafactur{numcom}' => 'Numcom:',
              'fafactur{reapor}' => 'Reapor:',
              'fafactur{fecanu}' => 'Fecanu:',
              'fafactur{status}' => 'Status:',
              'fafactur{observ}' => 'Nota:',
              'fafactur{tipmon}' => 'Tipo de Moneda:',
              'fafactur{valmon}' => 'Valmon:',
              'fafactur{numcomord}' => 'Numcomord:',
              'fafactur{numcominv}' => 'Numcominv:',
              'fafactur{sucursal}' => 'Sucursal:',
              'fafactur{motanu}' => 'Motanu:',
              'fafactur{vuelto}' => 'Monto Vuelto:',
              'fafactur{codcaj}' => 'Clave:',
              'fafactur{numcontrol}' => 'Nro. Control:',
              'fafactur{proform}' => 'Nro. Proforma:',
              'fafactur{codubi}' => 'Unidad:',
              'fafactur{tipoven}' => 'Tipo de Venta:',
              'fafactur{obsfac}' => 'Observaciones:',
              'fafactur{codcenaco}' => 'Centro de Acopio:',
              'fafactur{staent}' => 'Staent:',
              'fafactur{fecent}' => 'Fecent:',
              'fafactur{usuent}' => 'Usuent:',
              'fafactur{codcon}' => 'Asesor:',
              'fafactur{btufin}' => 'BTU Final:',
              'fafactur{puedph}' => 'Puerto Despacho:',
              'fafactur{puedes}' => 'Puerto Destino:',
              'fafactur{buque}' => 'Buque:',
              'fafactur{fadescripfac_id}' => 'Fadescripfac:',
              'fafactur{codprg}' => 'Codprg:',
              'fafactur{conpag}' => 'Conpag:',
              'fafactur{codalmusu}' => 'Codalmusu:',
              'fafactur{nroordfac}' => 'Número de la orden de Transmisión:',
              'fafactur{codpropat}' => 'Producto:',
              'fafactur{codprorad}' => 'Programa:',
              'fafactur{rifprod}' => 'Rifprod:',
              'fafactur{version}' => 'Version:',
              'fafactur{fectrades}' => 'Fecha de Trasmisión Desde:',
              'fafactur{fectrahas}' => 'Fecha de Trasmisión Hasta:',
              'fafactur{frectra}' => 'Frecuencia:',
              'fafactur{duracion}' => 'Duración:',
              'fafactur{obstra}' => 'Observaciones:',
              'fafactur{muelle}' => 'Muelle:',
              'fafactur{buque2}' => 'Buque:',
              'fafactur{expedi}' => 'N° de Expediente:',
              'fafactur{bele}' => 'BL:',
              'fafactur{factura}' => 'Factura:',
              'fafactur{embarca}' => 'Embarcador:',
              'fafactur{descarga}' => 'Descagadora:',
              'fafactur{canbul}' => 'Cant. Bultos:',
              'fafactur{codprod}' => 'Rubro:',
              'fafactur{tmdesc}' => 'TM Descargadas:',
              'fafactur{fecatra}' => 'Fecha de Atraque:',
              'fafactur{fecinidesc}' => 'Fecha Inicio Descargada:',
              'fafactur{fecfindesc}' => 'Fecha Fin Descargada:',
              'fafactur{valcifs}' => 'Valor CIFS:',
              'fafactur{fecper1}' => 'Fecper1:',
              'fafactur{fecper2}' => 'Fecper2:',
              'fafactur{coddirec}' => 'Dirección:',
              'fafactur{impfissta}' => 'Impfissta:',
              'fafactur{created_at}' => 'Created at:',
              'fafactur{updated_at}' => 'Updated at:',
              'fafactur{created_by_user}' => 'Created by user:',
              'fafactur{updated_by_user}' => 'Updated by user:',
              'fafactur{id}' => 'Id:',
            );
   return $arreglo;
  }



  /**
   * Función para manejar el llamado Ajax automático con el
   * Helper Catalogo.
   *
   */
  public function executeCatalogo()
  {
    $codigo = $this->getRequestParameter('codigo','');
    $clase = $this->getRequestParameter('clase','');
    $nombre = $this->getRequestParameter('name','');
    $campobase = $this->getRequestParameter('campobase','');
    $campoprincipal = $this->getRequestParameter('campoprincipal','');
    $camposecundario = $this->getRequestParameter('camposecundario','');

    $c = new Criteria();
    eval('$c->add('.ucfirst(strtolower($clase)).'Peer::'.strtoupper($campoprincipal).','.chr(39).$codigo.chr(39).');');
    eval('$peer = '.ucfirst(strtolower($clase)).'Peer::doSelectOne($c);');

  eval('$cajasec = "'.strtolower($nombre).'_'.strtolower($camposecundario).'";');
  eval('$cajaid = "'.strtolower($nombre).'_'.strtolower($campobase).'";');
  if ($peer){
  eval('$valsec = $peer->get'.H::ObtenerNombreCampo($camposecundario).'();');
  eval('$valid = $peer->getId();');}
  else{
    $valsec='';
    $valid='';
  }
  $output = '[["'.$cajasec.'","'.$valsec.'",""],["'.$cajaid.'","'.$valid.'",""],["","",""]]';
    $this->getResponse()->setHttpHeader("X-JSON", '('.$output.')');
    return sfView::HEADER_ONLY;
  }


  /**
   * Función para guardar la bitacora de la aplicacion
   * TODO: mejorar la carga de información en la bitacora
   * Actualmente esta planteada información no muy relevante
   *
   */
 public function SalvarBitacora($id, $acc)
  {
    try{
      $segbitaco= new Segbitaco();
      $fecha=date('Y-m-d');

      $segbitaco->setCodintusu($this->getUser()->getAttribute('usuario_id'));
      $segbitaco->setTipope(substr($acc, 0, 1));
      $segbitaco->setCodmod('fafactur');
      $segbitaco->setValcla('Fafactur');
      $segbitaco->setCodapl(substr(SF_APP, 0, 3));
      $segbitaco->setFecope($fecha);
      $segbitaco->setHorope(time('h:i:s'));
      $segbitaco->setRefmov($id);
      $segbitaco->save();
    }catch(Exception $e){

    }
  }

  public function Bitacora($acc)
  {
	$id= $this->fafactur->getId();
    $this->SalvarBitacora($id ,$acc);
  }






}

