<?php
// auto-generated by PropelCidesa
// date: 2017/02/17 10:32:30
?>
<?php

/**
 * autoFapresup actions.
 *
 * @package    Roraima
 * @subpackage autoFapresup 
 * @author     $Author: cramirez $ <desarrollo@cidesa.com.ve>
 * @version    SVN: $Id: actions.class.php 43817 2011-04-22 21:28:42Z cramirez $
 * @license    http://opensource.org/licenses/gpl-2.0.php GPLv2
 * @copyright  Copyright 2007, Cide S.A.
 */
class autoFapresupActions extends sfActions
{

  // variable donde se debe colocar el código de error generado en el validateEdit 
  // para que sea procesado por el handleErrorEdit.
  protected $coderr = -1;

  public function executeIndex()
  {
    return $this->forward('fapresup', 'list');
  }

  /**
   * Función para incluir funcionalidades adicionales en el executeList.
   * Esta funcion debe ser reescrita en la clase que hereda.
   *
   */
  protected function listing()
  {     


  }

  /**
   * Función principal para el manejo de la accion list
   * del formulario.
   *
   */
  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->listing();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/fapresup/filters');


     // 15    // pager
    $this->pager = new sfPropelPager('Fapresup', 15);
    $c = new Criteria();
    $this->c ? $c=$this->c : '';
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('fapresup', 'edit');
  }

  /**
   * Función principal para el manejo de la acción save
   * del formulario.
   *
   */
  public function executeSave()
  {

    return $this->forward('fapresup', 'edit');

  }

  /**
   * Función para incluir funcionalidades adicionales en el executeEdit.
   * Esta funcion debe ser reescrita en la clase que hereda.
   *
   */
  protected function editing()
  {


  }

  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  /**
   * Función principal para el manejo de las acciones create y edit
   * del formulario.
   *
   */
  public function executeEdit()
  {
    $this->params=array();
    $this->fapresup = $this->getFapresupOrCreate();

    $this->editing();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateFapresupFromRequest();

      if($this->saveFapresup($this->fapresup) ==-1){
        {$this->setFlash('notice', 'Your modifications have been saved');

         $id= $this->fapresup->getId();
         $this->SalvarBitacora($id ,'Guardo');}

        if ($this->getRequestParameter('save_and_add'))
        {
          return $this->redirect('fapresup/create');
        }
        else if ($this->getRequestParameter('save_and_list'))
        {
          return $this->redirect('fapresup/list');
        }
        else
        {
            return $this->redirect('fapresup/edit?id='.$this->fapresup->getId());
        }

      }else{
        $this->labels = $this->getLabels();
      }

    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->fapresup = FapresupPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->fapresup);

    try
    {
      $this->deleteFapresup($this->fapresup);
      $id= $this->fapresup->getId();
      $this->SalvarBitacora($id ,'Elimino');
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'No se pudo borrar la registro seleccionado. Asegúrese de que no tiene ningún tipo de registros asociados.');
      return $this->forward('fapresup', 'list');
    }


    return $this->forward('fapresup', 'list');
  }

  /**
   * Función para manejar la captura de errores del negocio, tanto que se
   * produzcan por algún validator y por un valor false retornado por el validateEdit
   *
   */
  public function handleErrorEdit()
  {
    $this->params=array();
    $this->preExecute();
    $this->fapresup = $this->getFapresupOrCreate();
    $this->updateFapresupFromRequest();
	$this->updateError();
    $this->labels = $this->getLabels();
    if($this->getRequest()->getMethod() == sfRequest::POST)
    {
      if($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('',$err);
      }
    }
    return sfView::SUCCESS;
  }

  /**
   * Función para manejar de el salvado de registros del formulario.
   * cabe destacar que llama internamente a la función $this->saving
   * que es reescrita en la clase que hereda con el proceso que el usuario
   * necesite implementar.
   * Esta función saving siempre debe retornar un valor >=-1.
   *
   */
  protected function saveFapresup($fapresup)
  {

    // habilitar la siguiente línea si se usa grid
    //$grid=Herramientas::CargarDatosGrid($this,$this->obj);

    try {

      // Modificar la siguiente línea para llamar al método
      // correcto en la clase del negocio, ej:
      // $coderr = Compras::salvarAlmaujoc($caajuoc,$grid);

      // OJO ----> Eliminar esta linea al modificar este método
      $this->coderr = $this->saving($fapresup);


      if(is_array($this->coderr)){
        foreach ($this->coderr as $ERR){
          $err = Herramientas::obtenerMensajeError($ERR);
          $this->getRequest()->setError('',$err);
          $this->updateError();}
          return sfView::SUCCESS;
      }elseif($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('',$err);
        $this->updateError();
        return sfView::SUCCESS;
      }else
      return -1;

    } catch (Exception $ex) {

      $this->coderr = 0;
      $err = Herramientas::obtenerMensajeError($this->coderr);
      $this->getRequest()->setError('',$err);
      $this->updateError();
    return sfView::SUCCESS;
    }


  }

  /**
   * Función que debe ser reescrita en la clase que hereda para
   * implementar el proceso de guardado adecuado para cada formulario.
   *
   */
  protected function saving($fapresup)
  {
    $fapresup->save();
    return -1;

  }

  /**
   * Función que debe ser reescrita en la clase que hereda para
   * implementar el proceso de eliminación adecuado para cada formulario.
   *
   */
  protected function deleting($fapresup)
  {
  	$fapresup->delete();
    return -1;

  }

  /**
   * Función para manejar la eliminación de registros del formulario.
   * cabe destacar que llama internamente a la función $this->deleting
   * que es reescrita en la clase que hereda con el proceso que el usuario
   * necesite implementar.
   * Esta función deleting siempre debe retornar un valor >=-1.
   *
   */
  protected function deleteFapresup($fapresup)
  {
    try {

      // Modificar la siguiente línea para llamar al método
      // correcto en la clase del negocio, ej:
      // $coderr = Compras::salvarAlmaujoc($caajuoc,$grid);

      // OJO ----> Eliminar esta linea al modificar este método
      $this->coderr = $this->deleting($fapresup);

      if(is_array($this->coderr)){
        foreach ($this->coderr as $ERR){
          $err = Herramientas::obtenerMensajeError($ERR);
          $this->getRequest()->setError('delete',$err);
          $this->updateError();
        }
      }elseif($this->coderr!=-1){
        $err = Herramientas::obtenerMensajeError($this->coderr);
        $this->getRequest()->setError('delete',$err);
        $this->updateError();
      }

      //return -1;

    } catch (Exception $ex) {
      $this->coderr = 6;
      $err = Herramientas::obtenerMensajeError($this->coderr);
      $this->getRequest()->setError('delete',$err);
      $this->updateError();
    }

  }

  // Funcion para validar los datos de la vista luego de detectado un error
  // se usa por ejemplo para recargar la informacion y configuración de un grid
  protected function updateError()
  {
    return true;
  }

  /**
   * Actualiza la informacion que viene de la vista 
   * luego de un get/post en el obejto del modelo base del formulario.
   *
   */
  protected function updateFapresupFromRequest()
  {
    $fapresup = $this->getRequestParameter('fapresup');

    $fields = FapresupPeer::getFieldNames();

    if(array_search('Codalmusu', $fields))
    {
      if (isset($fapresup['codalmusu']))
      {
        $this->fapresup->setCodalmusu($fapresup['codalmusu']);
      }
    }
    if (isset($fapresup['refpre']))
    {
      $this->fapresup->setRefpre($fapresup['refpre']);
    }
    if (isset($fapresup['tiecot']))
    {
      $this->fapresup->setTiecot($fapresup['tiecot']);
    }
    if (isset($fapresup['refpreaso']))
    {
      $this->fapresup->setRefpreaso($fapresup['refpreaso']);
    }
    if (isset($fapresup['fecpre']))
    {
      if ($fapresup['fecpre'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fapresup['fecpre']))
          {
            $value = $dateFormat->format($fapresup['fecpre'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fapresup['fecpre'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fapresup->setFecpre($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fapresup->setFecpre(null);
      }
    }
    if (isset($fapresup['tipmon']))
    {
      $this->fapresup->setTipmon($fapresup['tipmon']);
    }
    if (isset($fapresup['rifpro']))
    {
      $this->fapresup->setRifpro($fapresup['rifpro']);
    }
    if (isset($fapresup['nompro']))
    {
      $this->fapresup->setNompro($fapresup['nompro']);
    }
    if (isset($fapresup['dirpro']))
    {
      $this->fapresup->setDirpro($fapresup['dirpro']);
    }
    if (isset($fapresup['telpro']))
    {
      $this->fapresup->setTelpro($fapresup['telpro']);
    }
    if (isset($fapresup['facliper_id']))
    {
      $this->fapresup->setFacliperId($fapresup['facliper_id']);
    }
    if (isset($fapresup['dirper']))
    {
      $this->fapresup->setDirper($fapresup['dirper']);
    }
    if (isset($fapresup['telper']))
    {
      $this->fapresup->setTelper($fapresup['telper']);
    }
    if (isset($fapresup['despre']))
    {
      $this->fapresup->setDespre($fapresup['despre']);
    }
    if (isset($fapresup['codsed']))
    {
      $this->fapresup->setCodsed($fapresup['codsed']);
    }
    if (isset($fapresup['coddirec']))
    {
      $this->fapresup->setCoddirec($fapresup['coddirec']);
    }
    if (isset($fapresup['faforsol_id']))
    {
    $this->fapresup->setFaforsolId($fapresup['faforsol_id'] ? $fapresup['faforsol_id'] : null);
    }
    if (isset($fapresup['monrgo']))
    {
      $this->fapresup->setMonrgo($fapresup['monrgo']);
    }
    if (isset($fapresup['mondesc']))
    {
      $this->fapresup->setMondesc($fapresup['mondesc']);
    }
    if (isset($fapresup['monpre']))
    {
      $this->fapresup->setMonpre($fapresup['monpre']);
    }
    if (isset($fapresup['totrec']))
    {
      $this->fapresup->setTotrec($fapresup['totrec']);
    }
    if (isset($fapresup['tippre']))
    {
      $this->fapresup->setTippre($fapresup['tippre']);
    }
    if (isset($fapresup['percon']))
    {
      $this->fapresup->setPercon($fapresup['percon']);
    }
    if (isset($fapresup['feciniper']))
    {
      if ($fapresup['feciniper'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fapresup['feciniper']))
          {
            $value = $dateFormat->format($fapresup['feciniper'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fapresup['feciniper'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fapresup->setFeciniper($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fapresup->setFeciniper(null);
      }
    }
    if (isset($fapresup['grid_fargopre']))
    {
      $this->fapresup->setGridFargopre($fapresup['grid_fargopre']);
    }
    if (isset($fapresup['gridcon']))
    {
      $this->fapresup->setGridcon($fapresup['gridcon']);
    }
    if (isset($fapresup['gridmat']))
    {
      $this->fapresup->setGridmat($fapresup['gridmat']);
    }
    if (isset($fapresup['totmat']))
    {
      $this->fapresup->setTotmat($fapresup['totmat']);
    }
    if (isset($fapresup['gridequ']))
    {
      $this->fapresup->setGridequ($fapresup['gridequ']);
    }
    if (isset($fapresup['totequ']))
    {
      $this->fapresup->setTotequ($fapresup['totequ']);
    }
    if (isset($fapresup['gridman']))
    {
      $this->fapresup->setGridman($fapresup['gridman']);
    }
    if (isset($fapresup['totman']))
    {
      $this->fapresup->setTotman($fapresup['totman']);
    }
    if (isset($fapresup['gridser']))
    {
      $this->fapresup->setGridser($fapresup['gridser']);
    }
    if (isset($fapresup['totser']))
    {
      $this->fapresup->setTotser($fapresup['totser']);
    }
    if (isset($fapresup['totapu']))
    {
      $this->fapresup->setTotapu($fapresup['totapu']);
    }
    if (isset($fapresup['totgasadm']))
    {
      $this->fapresup->setTotgasadm($fapresup['totgasadm']);
    }
    if (isset($fapresup['totcarfab']))
    {
      $this->fapresup->setTotcarfab($fapresup['totcarfab']);
    }
    if (isset($fapresup['totuti']))
    {
      $this->fapresup->setTotuti($fapresup['totuti']);
    }
    if (isset($fapresup['totpreuni']))
    {
      $this->fapresup->setTotpreuni($fapresup['totpreuni']);
    }
    if (isset($fapresup['grid']))
    {
      $this->fapresup->setGrid($fapresup['grid']);
    }
    if (isset($fapresup['faconpag_id']))
    {
      $this->fapresup->setFaconpagId($fapresup['faconpag_id']);
    }
    if (isset($fapresup['fafordes_id']))
    {
    $this->fapresup->setFafordesId($fapresup['fafordes_id'] ? $fapresup['fafordes_id'] : null);
    }
    if (isset($fapresup['codemb']))
    {
      $this->fapresup->setCodemb($fapresup['codemb']);
    }
    if (isset($fapresup['sigimo']))
    {
      $this->fapresup->setSigimo($fapresup['sigimo']);
    }
    if (isset($fapresup['tipemb']))
    {
      $this->fapresup->setTipemb($fapresup['tipemb']);
    }
    if (isset($fapresup['proemb']))
    {
      $this->fapresup->setProemb($fapresup['proemb']);
    }
    if (isset($fapresup['eslora']))
    {
      $this->fapresup->setEslora($fapresup['eslora']);
    }
    if (isset($fapresup['manga']))
    {
      $this->fapresup->setManga($fapresup['manga']);
    }
    if (isset($fapresup['puntal']))
    {
      $this->fapresup->setPuntal($fapresup['puntal']);
    }
    if (isset($fapresup['calado']))
    {
      $this->fapresup->setCalado($fapresup['calado']);
    }
    if (isset($fapresup['peso']))
    {
      $this->fapresup->setPeso($fapresup['peso']);
    }
    if (isset($fapresup['numcue']))
    {
      $this->fapresup->setNumcue($fapresup['numcue']);
    }
    if (isset($fapresup['observ']))
    {
      $this->fapresup->setObserv($fapresup['observ']);
    }
    if (isset($fapresup['codgru']))
    {
      $this->fapresup->setCodgru($fapresup['codgru']);
    }
    if (isset($fapresup['gridclau']))
    {
      $this->fapresup->setGridclau($fapresup['gridclau']);
    }
    if (isset($fapresup['cantras']))
    {
      $this->fapresup->setCantras($fapresup['cantras']);
    }
    if (isset($fapresup['pertra']))
    {
      $this->fapresup->setPertra($fapresup['pertra']);
    }
    if (isset($fapresup['frectra']))
    {
      $this->fapresup->setFrectra($fapresup['frectra']);
    }
    if (isset($fapresup['duracion']))
    {
      $this->fapresup->setDuracion($fapresup['duracion']);
    }
    if (isset($fapresup['obstra']))
    {
      $this->fapresup->setObstra($fapresup['obstra']);
    }

    if (isset($fapresup['refpre']))
    {
      $this->fapresup->setRefpre($fapresup['refpre']);
    }
    if (isset($fapresup['despre']))
    {
      $this->fapresup->setDespre($fapresup['despre']);
    }
    if (isset($fapresup['fecpre']))
    {
      if ($fapresup['fecpre'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fapresup['fecpre']))
          {
            $value = $dateFormat->format($fapresup['fecpre'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fapresup['fecpre'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fapresup->setFecpre($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fapresup->setFecpre(null);
      }
    }
    if (isset($fapresup['codcli']))
    {
      $this->fapresup->setCodcli($fapresup['codcli']);
    }
    if (isset($fapresup['monpre']))
    {
      $this->fapresup->setMonpre($fapresup['monpre']);
    }
    if (isset($fapresup['mondesc']))
    {
      $this->fapresup->setMondesc($fapresup['mondesc']);
    }
    if (isset($fapresup['monrgo']))
    {
      $this->fapresup->setMonrgo($fapresup['monrgo']);
    }
    if (isset($fapresup['faconpag_id']))
    {
      $this->fapresup->setFaconpagId($fapresup['faconpag_id']);
    }
    if (isset($fapresup['fafordes_id']))
    {
    $this->fapresup->setFafordesId($fapresup['fafordes_id'] ? $fapresup['fafordes_id'] : null);
    }
    if (isset($fapresup['faforsol_id']))
    {
    $this->fapresup->setFaforsolId($fapresup['faforsol_id'] ? $fapresup['faforsol_id'] : null);
    }
    if (isset($fapresup['tipmon']))
    {
      $this->fapresup->setTipmon($fapresup['tipmon']);
    }
    if (isset($fapresup['valmon']))
    {
      $this->fapresup->setValmon($fapresup['valmon']);
    }
    if (isset($fapresup['autpor']))
    {
      $this->fapresup->setAutpor($fapresup['autpor']);
    }
    if (isset($fapresup['observ']))
    {
      $this->fapresup->setObserv($fapresup['observ']);
    }
    if (isset($fapresup['codubi']))
    {
      $this->fapresup->setCodubi($fapresup['codubi']);
    }
    if (isset($fapresup['codprg']))
    {
      $this->fapresup->setCodprg($fapresup['codprg']);
    }
    if (isset($fapresup['reapor']))
    {
      $this->fapresup->setReapor($fapresup['reapor']);
    }
    if (isset($fapresup['cantras']))
    {
      $this->fapresup->setCantras($fapresup['cantras']);
    }
    if (isset($fapresup['pertra']))
    {
      $this->fapresup->setPertra($fapresup['pertra']);
    }
    if (isset($fapresup['frectra']))
    {
      $this->fapresup->setFrectra($fapresup['frectra']);
    }
    if (isset($fapresup['duracion']))
    {
      $this->fapresup->setDuracion($fapresup['duracion']);
    }
    if (isset($fapresup['obstra']))
    {
      $this->fapresup->setObstra($fapresup['obstra']);
    }
    if (isset($fapresup['tippre']))
    {
      $this->fapresup->setTippre($fapresup['tippre']);
    }
    if (isset($fapresup['percon']))
    {
      $this->fapresup->setPercon($fapresup['percon']);
    }
    if (isset($fapresup['feciniper']))
    {
      if ($fapresup['feciniper'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fapresup['feciniper']))
          {
            $value = $dateFormat->format($fapresup['feciniper'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fapresup['feciniper'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fapresup->setFeciniper($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fapresup->setFeciniper(null);
      }
    }
    if (isset($fapresup['coddirec']))
    {
      $this->fapresup->setCoddirec($fapresup['coddirec']);
    }
    if (isset($fapresup['codemb']))
    {
      $this->fapresup->setCodemb($fapresup['codemb']);
    }
    if (isset($fapresup['codgru']))
    {
      $this->fapresup->setCodgru($fapresup['codgru']);
    }
    if (isset($fapresup['staapr']))
    {
      $this->fapresup->setStaapr($fapresup['staapr']);
    }
    if (isset($fapresup['usuapr']))
    {
      $this->fapresup->setUsuapr($fapresup['usuapr']);
    }
    if (isset($fapresup['fecapr']))
    {
      if ($fapresup['fecapr'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($fapresup['fecapr']))
          {
            $value = $dateFormat->format($fapresup['fecapr'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $fapresup['fecapr'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->fapresup->setFecapr($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->fapresup->setFecapr(null);
      }
    }
    if (isset($fapresup['codsed']))
    {
      $this->fapresup->setCodsed($fapresup['codsed']);
    }
    if (isset($fapresup['tiecot']))
    {
      $this->fapresup->setTiecot($fapresup['tiecot']);
    }
    if (isset($fapresup['refpreaso']))
    {
      $this->fapresup->setRefpreaso($fapresup['refpreaso']);
    }
    if (isset($fapresup['facliper_id']))
    {
      $this->fapresup->setFacliperId($fapresup['facliper_id']);
    }
    if (isset($fapresup['numcue']))
    {
      $this->fapresup->setNumcue($fapresup['numcue']);
    }

    if (isset($fapresup['filactrec']))
    {
      $this->fapresup->setFilactrec($fapresup['filactrec']);
    }
    if (isset($fapresup['trajo']))
    {
      $this->fapresup->setTrajo($fapresup['trajo']);
    }
    if (isset($fapresup['filactcon']))
    {
      $this->fapresup->setFilactcon($fapresup['filactcon']);
    }
    if (isset($fapresup['manunialt']))
    {
      $this->fapresup->setManunialt($fapresup['manunialt']);
    }
    if (isset($fapresup['filactapu']))
    {
      $this->fapresup->setFilactapu($fapresup['filactapu']);
    }

  }

  /**
   * Retorna el registro del modelo del formulario
   * Identifica si es un registro nuevo o actual, y lo retorna
   *
   */
  protected function getFapresupOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $fapresup = new Fapresup();
    }
    else
    {
      $fapresup = FapresupPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($fapresup);
    }

    return $fapresup;
  }

  /**
   * Función para procesar los filtros aplicados a la lista de registros
   *
   */
  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');
      if (isset($filters['fecpre']['from']) && $filters['fecpre']['from'] !== '')
      {
        $filters['fecpre']['from'] = sfI18N::getTimestampForCulture($filters['fecpre']['from'], $this->getUser()->getCulture());
      }
      if (isset($filters['fecpre']['to']) && $filters['fecpre']['to'] !== '')
      {
        $filters['fecpre']['to'] = sfI18N::getTimestampForCulture($filters['fecpre']['to'], $this->getUser()->getCulture());
      }

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/fapresup/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/fapresup/filters');
    }
  }

  /**
   * Función para procesar el orden de los registros en la lista
   *
   */
  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/fapresup/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/fapresup/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/fapresup/sort'))
    {
      $this->getUser()->setAttribute('sort', 'refpre', 'sf_admin/fapresup/sort');
      $this->getUser()->setAttribute('type', 'asc', 'sf_admin/fapresup/sort');
    }
  }

  /**
   * Función para manejar los filtros de búsqueda
   * de la lista
   *
   */
  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['refpre_is_empty']))
    {
      $criterion = $c->getNewCriterion(FapresupPeer::REFPRE, '');
      $criterion->addOr($c->getNewCriterion(FapresupPeer::REFPRE, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['refpre']) && $this->filters['refpre'] !== '')
    {
      $c->add(FapresupPeer::REFPRE, strtr("%".$this->filters['refpre']."%", '*', '%'), Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['fecpre_is_empty']))
    {
      $criterion = $c->getNewCriterion(FapresupPeer::FECPRE, '');
      $criterion->addOr($c->getNewCriterion(FapresupPeer::FECPRE, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['fecpre']))
    {
      if (isset($this->filters['fecpre']['from']) && $this->filters['fecpre']['from'] !== '')
      {
        $criterion = $c->getNewCriterion(FapresupPeer::FECPRE, date('Y-m-d', $this->filters['fecpre']['from']), Criteria::GREATER_EQUAL);
      }
      if (isset($this->filters['fecpre']['to']) && $this->filters['fecpre']['to'] !== '')
      {
        if (isset($criterion))
        {
          $criterion->addAnd($c->getNewCriterion(FapresupPeer::FECPRE, date('Y-m-d', $this->filters['fecpre']['to']), Criteria::LESS_EQUAL));
        }
        else
        {
          $criterion = $c->getNewCriterion(FapresupPeer::FECPRE, date('Y-m-d', $this->filters['fecpre']['to']), Criteria::LESS_EQUAL);
        }
      }

      if (isset($criterion))
      {
        $c->add($criterion);
      }
    }
    if (isset($this->filters['despre_is_empty']))
    {
      $criterion = $c->getNewCriterion(FapresupPeer::DESPRE, '');
      $criterion->addOr($c->getNewCriterion(FapresupPeer::DESPRE, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['despre']) && $this->filters['despre'] !== '')
    {
      $c->add(FapresupPeer::DESPRE, strtr("%".$this->filters['despre']."%", '*', '%'), Criteria::LIKE);
    $c->setIgnoreCase(true);
    }
    if (isset($this->filters['rifpro_is_empty']))
    {
      $criterion = $c->getNewCriterion(FapresupPeer::RIFPRO, '');
      $criterion->addOr($c->getNewCriterion(FapresupPeer::RIFPRO, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['rifpro']) && $this->filters['rifpro'] !== '')
    {
      $c->add(FapresupPeer::RIFPRO, $this->filters['rifpro']);
    }
    if (isset($this->filters['nompro_is_empty']))
    {
      $criterion = $c->getNewCriterion(FapresupPeer::NOMPRO, '');
      $criterion->addOr($c->getNewCriterion(FapresupPeer::NOMPRO, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['nompro']) && $this->filters['nompro'] !== '')
    {
      $c->add(FapresupPeer::NOMPRO, $this->filters['nompro']);
    }
  }

  /**
   * Función para colocar el criterio de ordenación de la lista de registros
   * en la acción List
   *
   */
  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/fapresup/sort'))
    {
      $sort_column = FapresupPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/fapresup/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  /**
   * Función para retornar las etiquetas del formulario
   *
   */
  protected function getLabels()
  {
    $arreglo=array(
                  'fapresup{refpre}' => 'Número:',
              'fapresup{tiecot}' => 'Refiere a Otra Cotización:',
              'fapresup{refpreaso}' => 'N° de Cotización:',
              'fapresup{fecpre}' => 'Fecha:',
              'fapresup{tipmon}' => 'Moneda:',
              'fapresup{rifpro}' => 'CI/RIF Cliente:',
              'fapresup{nompro}' => 'Nombre:',
              'fapresup{dirpro}' => 'Dirección:',
              'fapresup{telpro}' => 'Teléfono:',
              'fapresup{facliper_id}' => 'Persona Contacto:',
              'fapresup{dirper}' => 'Dirección:',
              'fapresup{telper}' => 'Teléfono:',
              'fapresup{despre}' => 'Descripción:',
              'fapresup{codsed}' => 'Sede:',
              'fapresup{coddirec}' => 'Dirección:',
              'fapresup{faforsol_id}' => 'Forma de Solicitud:',
              'fapresup{monrgo}' => 'Total Recargo:',
              'fapresup{mondesc}' => 'Total Descuento:',
              'fapresup{monpre}' => 'Monto total:',
              'fapresup{totrec}' => 'Total Recargos:',
              'fapresup{tippre}' => 'Tipo Presupuesto:',
              'fapresup{percon}' => 'Período:',
              'fapresup{feciniper}' => 'Fecha Inicio:',
                      'fapresup{grid_fargopre}' => '.:',
              'fapresup{gridcon}' => '.:',
              'fapresup{gridmat}' => '.:',
              'fapresup{totmat}' => 'Total Materiales:',
              'fapresup{gridequ}' => '.:',
              'fapresup{totequ}' => 'Total Maquinaria y Equipos:',
              'fapresup{gridman}' => '.:',
              'fapresup{totman}' => 'Total Mano de Obra:',
              'fapresup{gridser}' => '.:',
              'fapresup{totser}' => 'Total Servicios:',
              'fapresup{totapu}' => 'Costo Directo:',
              'fapresup{totgasadm}' => 'Gastos Administrativos:',
              'fapresup{totcarfab}' => 'Carga Fábril:',
              'fapresup{totuti}' => 'Utilidad:',
              'fapresup{totpreuni}' => 'Precio Unitario:',
              'fapresup{grid}' => '.:',
                      'fapresup{faconpag_id}' => 'Condición de Pago:',
                      'fapresup{fafordes_id}' => 'Forma de Despacho:',
                      'fapresup{codemb}' => 'Código:',
              'fapresup{sigimo}' => 'SIGLAS/IMO:',
              'fapresup{tipemb}' => 'Tipo:',
              'fapresup{proemb}' => 'Cliente/Armador:',
              'fapresup{eslora}' => 'Eslora:',
              'fapresup{manga}' => 'Manga:',
              'fapresup{puntal}' => 'Puntal:',
              'fapresup{calado}' => 'Calado:',
              'fapresup{peso}' => 'Peso:',
              'fapresup{numcue}' => 'Cuenta Bancaria:',
                      'fapresup{observ}' => 'Observación:',
                      'fapresup{codgru}' => 'Grupo:',
              'fapresup{gridclau}' => '.:',
                      'fapresup{cantras}' => 'Canal de Trasmisión:',
              'fapresup{pertra}' => 'Período de Trasmisión:',
              'fapresup{frectra}' => 'Frecuencia:',
              'fapresup{duracion}' => 'Duración:',
              'fapresup{obstra}' => 'Observaciones:',
                          'fapresup{refpre}' => 'Número:',
              'fapresup{despre}' => 'Descripción:',
              'fapresup{fecpre}' => 'Fecha:',
              'fapresup{codcli}' => 'Codcli:',
              'fapresup{monpre}' => 'Monto total:',
              'fapresup{mondesc}' => 'Total Descuento:',
              'fapresup{monrgo}' => 'Total Recargo:',
              'fapresup{faconpag_id}' => 'Condición de Pago:',
              'fapresup{fafordes_id}' => 'Forma de Despacho:',
              'fapresup{faforsol_id}' => 'Forma de Solicitud:',
              'fapresup{tipmon}' => 'Moneda:',
              'fapresup{valmon}' => 'Valor de Cambio de la Moneda:',
              'fapresup{autpor}' => 'Autpor:',
              'fapresup{observ}' => 'Observación:',
              'fapresup{codubi}' => 'Codigo de Ubicación:',
              'fapresup{codprg}' => 'Codprg:',
              'fapresup{reapor}' => 'Reapor:',
              'fapresup{cantras}' => 'Canal de Trasmisión:',
              'fapresup{pertra}' => 'Período de Trasmisión:',
              'fapresup{frectra}' => 'Frecuencia:',
              'fapresup{duracion}' => 'Duración:',
              'fapresup{obstra}' => 'Observaciones:',
              'fapresup{tippre}' => 'Tipo Presupuesto:',
              'fapresup{percon}' => 'Período:',
              'fapresup{feciniper}' => 'Fecha Inicio:',
              'fapresup{coddirec}' => 'Dirección:',
              'fapresup{codemb}' => 'Código:',
              'fapresup{codgru}' => 'Grupo:',
              'fapresup{staapr}' => 'Staapr:',
              'fapresup{usuapr}' => 'Usuapr:',
              'fapresup{fecapr}' => 'Fecapr:',
              'fapresup{codsed}' => 'Sede:',
              'fapresup{tiecot}' => 'Refiere a Otra Cotización:',
              'fapresup{refpreaso}' => 'N° de Cotización:',
              'fapresup{facliper_id}' => 'Persona Contacto:',
              'fapresup{numcue}' => 'Cuenta Bancaria:',
              'fapresup{id}' => 'Id:',
            );
   return $arreglo;
  }



  /**
   * Función para manejar el llamado Ajax automático con el
   * Helper Catalogo.
   *
   */
  public function executeCatalogo()
  {
    $codigo = $this->getRequestParameter('codigo','');
    $clase = $this->getRequestParameter('clase','');
    $nombre = $this->getRequestParameter('name','');
    $campobase = $this->getRequestParameter('campobase','');
    $campoprincipal = $this->getRequestParameter('campoprincipal','');
    $camposecundario = $this->getRequestParameter('camposecundario','');

    $c = new Criteria();
    eval('$c->add('.ucfirst(strtolower($clase)).'Peer::'.strtoupper($campoprincipal).','.chr(39).$codigo.chr(39).');');
    eval('$peer = '.ucfirst(strtolower($clase)).'Peer::doSelectOne($c);');

  eval('$cajasec = "'.strtolower($nombre).'_'.strtolower($camposecundario).'";');
  eval('$cajaid = "'.strtolower($nombre).'_'.strtolower($campobase).'";');
  if ($peer){
  eval('$valsec = $peer->get'.H::ObtenerNombreCampo($camposecundario).'();');
  eval('$valid = $peer->getId();');}
  else{
    $valsec='';
    $valid='';
  }
  $output = '[["'.$cajasec.'","'.$valsec.'",""],["'.$cajaid.'","'.$valid.'",""],["","",""]]';
    $this->getResponse()->setHttpHeader("X-JSON", '('.$output.')');
    return sfView::HEADER_ONLY;
  }


  /**
   * Función para guardar la bitacora de la aplicacion
   * TODO: mejorar la carga de información en la bitacora
   * Actualmente esta planteada información no muy relevante
   *
   */
 public function SalvarBitacora($id, $acc)
  {
    try{
      $segbitaco= new Segbitaco();
      $fecha=date('Y-m-d');

      $segbitaco->setCodintusu($this->getUser()->getAttribute('usuario_id'));
      $segbitaco->setTipope(substr($acc, 0, 1));
      $segbitaco->setCodmod('fapresup');
      $segbitaco->setValcla('Fapresup');
      $segbitaco->setCodapl(substr(SF_APP, 0, 3));
      $segbitaco->setFecope($fecha);
      $segbitaco->setHorope(time('h:i:s'));
      $segbitaco->setRefmov($id);
      $segbitaco->save();
    }catch(Exception $e){

    }
  }

  public function Bitacora($acc)
  {
	$id= $this->fapresup->getId();
    $this->SalvarBitacora($id ,$acc);
  }






}

