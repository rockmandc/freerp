<?php
// auto-generated by sfValidatorConfigHandler
// date: 2017/02/17 10:32:33

if ($_SERVER['REQUEST_METHOD'] == 'GET')
{
  $validators = array();
  $context->getRequest()->setAttribute('fillin', array (
), 'symfony/filter');
}
else if ($_SERVER['REQUEST_METHOD'] == 'POST')
{
  $validators = array();
  $validators['UniqueValidator'] = new sfPropelUniqueValidator();
  $validators['UniqueValidator']->initialize($context, array (
  'class' => 'Fapresup',
  'column' => 'refpre',
  'unique_error' => 'El Número del Presupuesto ya existe. Por Favor, Cambiélo por otro.',
));
  $validators['FechaValidator'] = new sfRegexValidator();
  $validators['FechaValidator']->initialize($context, array (
  'match' => true,
  'pattern' => '/^(3[01]|2?[0-9]|1?[0-9]|0?[1-9]|[12]d)\\/(0?[1-9]|1[012])\\/(\\d{4})$/',
  'match_error' => 'La Fecha  introducida es invalida',
));
  $validators['FechaValidatoract'] = new CidesaDateNow();
  $validators['FechaValidatoract']->initialize($context, array (
  'compare' => 'now',
  'compare_error' => 'La Fecha no puede ser mayor a la Fecha Actual',
  'operator' => '<=',
  'date_error' => 'Fecha Inválida',
));
  $validators['DescripcionValidator'] = new sfStringValidator();
  $validators['DescripcionValidator']->initialize($context, array (
  'min' => 2,
  'min_error' => 'La descripción no puede tener menos de 2 caracteres',
  'max' => 250,
  'max_error' => 'La descripción no puede pasar mas de 250 caracteres',
));
  $validators['FaforsolExistValidator'] = new CidesaExistValidator();
  $validators['FaforsolExistValidator']->initialize($context, array (
  'class' => 'Faforsol',
  'column' => 'id',
  'unique_error' => 'El Código de la Forma de Solicitud debe Existir.',
));
  $validators['FaconpagExistValidator'] = new CidesaExistValidator();
  $validators['FaconpagExistValidator']->initialize($context, array (
  'class' => 'Faconpag',
  'column' => 'id',
  'unique_error' => 'El Código de la Condición de pago debe Existir.',
));
  $validators['FafordesExistValidator'] = new CidesaExistValidator();
  $validators['FafordesExistValidator']->initialize($context, array (
  'class' => 'Fafordes',
  'column' => 'id',
  'unique_error' => 'El Código de la Forma de Despacho debe Existir.',
));
  $validatorManager->registerName('refpre', 1, 'El Número no puede estar en Blanco.', 'fapresup', null, false);
  $validatorManager->registerValidator('refpre', $validators['UniqueValidator'], 'fapresup');
  $validatorManager->registerName('fecpre', 1, 'La Fecha no puede estar en Blanco', 'fapresup', null, false);
  $validatorManager->registerValidator('fecpre', $validators['FechaValidator'], 'fapresup');
  $validatorManager->registerValidator('fecpre', $validators['FechaValidatoract'], 'fapresup');
  $validatorManager->registerName('rifpro', 1, 'CI/Rif no puede estar en Blanco.', 'fapresup', null, false);
  $validatorManager->registerName('despre', 1, 'La Descripción no puede estar en Blanco.', 'fapresup', null, false);
  $validatorManager->registerValidator('despre', $validators['DescripcionValidator'], 'fapresup');
  $validatorManager->registerName('faforsol_id', 1, 'Seleccione Forma de solicitud', 'fapresup', null, false);
  $validatorManager->registerValidator('faforsol_id', $validators['FaforsolExistValidator'], 'fapresup');
  $validatorManager->registerName('faconpag_id', 1, 'Seleccione Condición de Pago', 'fapresup', null, false);
  $validatorManager->registerValidator('faconpag_id', $validators['FaconpagExistValidator'], 'fapresup');
  $validatorManager->registerName('tipmon', 1, 'Debe seleccionar el tipo de Moneda.', 'fapresup', null, false);
  $validatorManager->registerName('fafordes_id', 1, 'Seleccione Forma de despacho', 'fapresup', null, false);
  $validatorManager->registerValidator('fafordes_id', $validators['FafordesExistValidator'], 'fapresup');
  $context->getRequest()->setAttribute('fillin', array (
), 'symfony/filter');
}
