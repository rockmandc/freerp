<?php

/**
 * Hacienda: Clase estática para el manejo la hacienda municipal
 *
 * @package    Roraima
 * @subpackage hacienda
 * @author     $Author$ <desarrollo@cidesa.com.ve>
 * @version SVN: $Id$
 *
 * @copyright  Copyright 2007, Cide S.A.
 * @license    http://opensource.org/licenses/gpl-2.0.php GPLv2
 */
class Hacienda {
  /* Funcion general del negocio
   * 1 izquierda
   * 2 intermedio
   * 3 derecha
   * aqui se hacen todos los procesos
   */

  public static function Obtener_mes($ano, & $valor_mes)
  /* Funcion utilizada para traer valor del mes por año */ {

    $result = array();
    $valor_mes = array();
    $sql = "Select tasano,tasmes,taspor From Fctasban Where tasano='" . $ano . "' order by tasmes";
    if (Herramientas :: BuscarDatos($sql, $result)) {
      $i = 0;
      $msg = '';
      $cancotpril = count($result);
      while ($i < count($result)) {
        $valor_mes[$i] = $result[$i]['taspor'];
        $i++;
      }
      return true;
    } else {
      return false;
    }
  }

  public static function salvar_grid_DefDesc($fcdefdesc, $grid) {
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      if ($x[$j]->getDiashasta() != "") {
        $x[$j]->setCoddes($fcdefdesc->getCoddes());
        $x[$j]->save();
      }
      $j++;
    }
    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }
  }

  public static function salvar_grid_Fcdefrecdes($fcdefdesc, $grid) {
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      $x[$j]->setCoddes($fcdefdesc->getCoddes());
      $x[$j]->save();
      $j++;
    }
    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }
  }

  public static function salvar_grid_Fcdefsol($fctipsol, $grid) {
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      $x[$j]->setCodsol($fctipsol->getCodtip());
      $x[$j]->save();
      $j++;
    }
    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }
  }

  public static function salvar_grid_Fcdefrecint($fcdefrecint, $grid) {
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      if ($x[$j]->getDiashasta() != "") {
        $x[$j]->setCodrec($fcdefrecint->getCodrec());
        $x[$j]->save();
      }
      $j++;
    }
    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }
  }

  public static function salvar_gridb_Fcdefrecint($fcdefrecint, $grid) {
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      $x[$j]->setCodrec($fcdefrecint->getCodrec());
      $x[$j]->save();
      $j++;
    }
    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }
  }

  public static function salvar_grid_Fcmultas($fcmultas, $grid) {
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      if ($x[$j]->getDiashasta() != "") {
        $x[$j]->setCodmul($fcmultas->getCodmul());
        $x[$j]->save();
      }
      $j++;
    }
    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }
  }

  public static function salvar_gridb_Fcmultas($fcmultas, $grid) {
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      $x[$j]->setCodmul($fcmultas->getCodmul());
      $x[$j]->save();
      $j++;
    }
    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }
  }

  public static function salvar_grid_Fcdefpgi($fcdefpgi, $grid) {
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      $x[$j]->save();
      $j++;
    }
    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }
  }

  public static function salvar_grid_Fcaputip($fctipapu, $grid) {
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      if ($x[$j]->getTipvar() != "") {
        $x[$j]->setTipapu($fctipapu->getTipapu());
        $x[$j]->save();
      }
      $j++;
    }
    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }
  }

  public static function salvar_grid_Fcprotip($fctippro, $grid) {
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      if ($x[$j]->getTipvar() != "") {
        $x[$j]->setTippro($fctippro->getTippro());
        $x[$j]->save();
      }
      $j++;
    }
    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }
  }

  public static function salvar_grid_Fcesptip($fctipesp, $grid) {
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      $x[$j]->setTipesp($fctipesp->getTipesp());
      $x[$j]->save();
      $j++;
    }
    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }
  }

  public static function salvar_grid_Fcranpaginm($fcvalinm, $grid) {
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      $x[$j]->setCodzon($fcvalinm->getCodzon());
      $x[$j]->setDeszon($fcvalinm->getDeszon());
      $x[$j]->setAnovig($fcvalinm->getAnovig());
      $x[$j]->setValmtr($fcvalinm->getValmtr());
      $x[$j]->setPorvalfis($fcvalinm->getPorvalfis());
      $x[$j]->setValfis($fcvalinm->getValfis());
      $x[$j]->save();
      $j++;
    }
    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }
  }

  public static function salvar_grid_Facdefdprinm($fcdprinm, $grid) {
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      if ($x[$j]->getAntinm() != "") {
        $x[$j]->setAnovig($fcdprinm->getAnovig());
        $x[$j]->save();
      }
      $j++;
    }
    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }
  }

  public static function Cargar_mascara(&$formatostring="") {
    $result = array();
    $sql = "Select " .
            "codpar,codmun,codedo,codpai,numniv,nomext1,nomabr1,tamano1,nomext2," .
            "nomabr2,tamano2,nomext3,nomabr3,tamano3,nomext4,nomabr4," .
            "tamano4,nomext5,nomabr5,tamano5,nomext6,nomabr6,tamano6,nomext7," .
            "nomabr7,tamano7,nomext8,nomabr8,tamano8,nomext9,nomabr9,tamano9," .
            "nomext10,nomabr10,tamano10,nivinm,numper,denumper" .
            " from FCDefNca";
    $campos = array(
        0 => "codpar",
        1 => "codmun",
        2 => "codedo",
        3 => "codpai",
        4 => "numniv",
        5 => "nomext1",
        6 => "nomabr1",
        7 => "tamano1",
        8 => "nomext2",
        9 => "nomabr2",
        10 => "tamano2",
        11 => "nomext3",
        12 => "nomabr3",
        13 => "tamano3",
        14 => "nomext4",
        15 => "nomabr4",
        16 => "tamano4",
        17 => "nomext5",
        18 => "nomabr5",
        19 => "tamano5",
        20 => "nomext6",
        21 => "nomabr6",
        22 => "tamano6",
        23 => "nomext7",
        24 => "nomabr7",
        25 => "tamano7",
        26 => "nomext8",
        27 => "nomabr8",
        28 => "tamano8",
        29 => "nomext9",
        30 => "nomabr9",
        31 => "tamano9",
        32 => "nomext10",
        33 => "nomabr10",
        34 => "tamano10",
        35 => "nivinm",
        36 => "numper",
        37 => "denumper"
    );
    if (Herramientas :: BuscarDatos($sql, $result)) {
      $formatostring = $result[0]['nomabr1'];
      $formatopre = str_pad("", $result[0]['tamano1'], '#', STR_PAD_LEFT);
      $valor = $result[0]['numniv'];
      for ($i = 1; $i <= ((($valor + 1) * 3) - 6); $i++) {
        $formatostring = $formatostring . "-" . $result[0][$campos[$i + 8]];
        $formatopre = $formatopre . "-" . str_pad("", $result[0][$campos[$i + 9]], "#", STR_PAD_LEFT);
        $i = $i + 2;
      }

      return $formatopre;
    } else
      return "El Formato de los catastros no existe";
  }

  public static function salvar_grid_Facdatcon($fcconrep, $grid) {
    try {

      $x = $grid[0];
      $j = 0;
      while ($j < count($x)) {
        $x[$j]->setRifcon($fcconrep->getRifcon());
        $x[$j]->save();
        $j++;
      }
      $z = $grid[1];
      $j = 0;
      while ($j < count($z)) {
        $z[$j]->delete();
        $j++;
      }

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function Combo_parroquia_Facdatcon($fcconrep) {
    $result = array();
    $arreglo = array();
    $sql = "Select d.CodPar as CodParroquia, a.CodMun as CodMunicipio,a.CodEdo as CodEstado,a.CodPai as CodPais, d.NomPar as NombreParroquia, a.NomMun as NombreMunicipio,b.NomEdo  as NombreEstado, c.NomPai as NombrePais From FCParroq d,FCMunici a, FCEstado b, FCPais c where d.CodMun=a.CodMun and d.CodEdo=b.CodEdo and a.CodEdo=b.CodEdo and a.CodPai=b.CodPai  and b.CodPai=c.CodPai and c.CodPai=d.CodPai ORDER BY d.CodPai,d.CodEdo,d.CodMun,d.CodPar";
    if (Herramientas :: BuscarDatos($sql, $result)) {
      $i = 0;
      while ($i < count($result)) {
        $cadena_valor = $result[$i]['codparroquia'] . '-' . $result[$i]['codmunicipio'] . '-' . $result[$i]['codestado'] . '-' . $result[$i]['codpais'];
        $cadena_texto = $result[$i]['nombreparroquia'] . '-' . $result[$i]['nombremunicipio'] . '-' . $result[$i]['nombreestado'] . '-' . $result[$i]['nombrepais'];
        $arreglo += array(
            $cadena_valor => $cadena_texto
        );
        $i++;
      }
    }
    return $arreglo;
  }

  public static function Grabar_Anteriores($fcsollic) {
    $fcmodlic_new = new Fcmodlic();
    $fcmodlic_new->setRefmod($fcsollic->getIdlic());
    $fcmodlic_new->setFecmod($fcsollic->getFechlic());
    $fcmodlic_new->setMotmod($fcsollic->getComnlic());
    $fcmodlic_new->setNumsol($fcsollic->getNumsol());
    $fcmodlic_new->setNumlic($fcsollic->getNumsol());
    $fcmodlic_new->setFecsol($fcsollic->getFecsol());
    $fcmodlic_new->setFeclic($fcsollic->getFecsol());
    $fcmodlic_new->setRifcon($fcsollic->getRifcon());
    $fcmodlic_new->setNomcon($fcsollic->getNomcon());
    $fcmodlic_new->setDircon($fcsollic->getDircon());
    $fcmodlic_new->setRifrep($fcsollic->getRifrep());
    $fcmodlic_new->setNomneg($fcsollic->getNomneg());
    $fcmodlic_new->setTipinm($fcsollic->getTipinm());
    $fcmodlic_new->setTipest($fcsollic->getTipest());
    $fcmodlic_new->setCatcon($fcsollic->getCatcon());
    $fcmodlic_new->setDirpri($fcsollic->getDirpri());
    $fcmodlic_new->setCodrut($fcsollic->getCodrut());
    $fcmodlic_new->setCapsoc($fcsollic->getCapsoc());
    if ($fcsollic->getHorini() != '')
      $fcmodlic_new->setHorini($fcsollic->getHorini());
    else
      $fcmodlic_new->setHorini("08:00:00 AM");
    if ($fcsollic->getHorcie() != '')
      $fcmodlic_new->setHorcie($fcsollic->getHorcie());
    else
      $fcmodlic_new->setHorcie("06:00:00 PM");
    $fcmodlic_new->setFecini($fcsollic->getFecini());
    $fcmodlic_new->setFecfin($fcsollic->getFecfin());
    $fcmodlic_new->setDiscli($fcsollic->getDiscli());
    $fcmodlic_new->setDisbar($fcsollic->getDisbar());
    $fcmodlic_new->setDisdis($fcsollic->getDisdis());
    $fcmodlic_new->setDisins($fcsollic->getDisins());
    $fcmodlic_new->setDisfun($fcsollic->getDisfun());
    $fcmodlic_new->setDisest($fcsollic->getDisest());
    $fcmodlic_new->setFunres($fcsollic->getFunres());
    $fcmodlic_new->setFecres($fcsollic->getFecres());
    $fcmodlic_new->setTaslic(0);
    $fcmodlic_new->setDeuacl(0);
    $fcmodlic_new->setImplic(0);
    $fcmodlic_new->setDeuacp(0);
    if ($fcsollic->getId() == '') {
      $fcmodlic_new->setStasol("P");
      $fcmodlic_new->setStalic("V");
      $fcmodlic_new->setStadec("N");
      $fcmodlic_new->setStaliq("N");
    }
    $fcmodlic_new->save();
    return true;
  }

  public static function Salvarneg($fcsollic) {
    $correlativo = "";
    $c = new Criteria();
    $c->add(FcsollicPeer :: NUMSOL, $fcsollic->getNumsol());
    $fcsollic_up = FcsollicPeer :: doSelectOne($c);
    if (count($fcsollic_up) > 0) {
      $fcsollic_up->setStasol("N");
      $fcsollic_up->save();
    }
    $c = new Criteria();
    $c->addDescendingOrderByColumn(FcsolnegPeer :: NUMNEG);
    $reg = FcsolnegPeer :: doSelectOne($c);
    if (count($reg) > 0)
      $correlativo = str_pad(trim($reg->getNumneg() + 1), 10, '0', STR_PAD_LEFT);
    else
      $correlativo = str_pad(1, 10, '0', STR_PAD_LEFT);
    $fcsolneg_new = new Fcsolneg();
    $fcsolneg_new->setNumsol($fcsollic->getNumsol());
    $fcsolneg_new->setNumneg($correlativo);
    $fcsolneg_new->setResolu($fcsollic->getResolu());
    $fcsolneg_new->setFunneg($fcsollic->getFunneg());
    $fcsolneg_new->setTomon($fcsollic->getTomon());
    $fcsolneg_new->setNumeron($fcsollic->getNumeron());
    $fcsolneg_new->setFolion($fcsollic->getFolion());
    $fcsolneg_new->setMotneg($fcsollic->getMotneg());
    $fcsolneg_new->setFecneg($fcsollic->getFecneg());
    $fcsolneg_new->save();
    return true;
  }

  public static function salvar_grid_Fcsollic($fcsollic, $grid, $nuevo) {
    //try {
    if (!$nuevo) {
      $x = $grid[0];
      $j = 0;
      while ($j < count($x)) {
        if ($x[$j]->getCodact() != "" && $x[$j]->getMonact() > 0) {
          $x[$j]->setNumdoc($fcsollic->getNumsol());
          $x[$j]->save();
        }
        $j++;
      }
      $z = $grid[1];
      $j = 0;
      while ($j < count($z)) {
        $z[$j]->delete();
        $j++;
      }
  }else {
    $ano=substr($fcsollic->getFecini(), 0,4);
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      if ($x[$j]->getCodact() != "" && $x[$j]->getMonact() > 0) {
        if ($x[$j]->getAnodec()!='' && $x[$j]->getAnodec()!=$ano)
        {
          $newreg= new Fcactpic();
          $newreg->setNumdoc($fcsollic->getNumsol());
          $newreg->setCodact($x[$j]->getCodact());
          $newreg->setMonact($x[$j]->getMonact());
          $newreg->setExoner($x[$j]->getExoner());
          $newreg->setPorexo($x[$j]->getPorexo());
          $newreg->save();
        }else if ($x[$j]->getAnodec()=='' || is_null($x[$j]->getAnodec())) {
           $x[$j]->setNumdoc($fcsollic->getNumsol());
           $x[$j]->save();
        }        
      }
      $j++;
    }
    
  }

    return -1;

    /* } catch (Exception $ex) {
      return 0;
      } */
  }

  public static function Listlic() {
    $c = new Criteria();
    $lista = FctiplicPeer :: doSelect($c);
    $modulos = array();
    foreach ($lista as $arr) {
      $modulos += array(
          $arr->getCodtiplic() => $arr->getDestiplic());
    }
    return $modulos;
  }

  public static function Grabar_Facpiclic($fcsollic) {
    $c = new Criteria();
    $c->add(FcsollicPeer :: NUMSOL, $fcsollic->getNumsol());
    $fcsollic_up = FcsollicPeer :: doSelectOne($c);
    if (count($fcsollic_up) > 0) {
      $fcsollic_up->setImplic($fcsollic->getImplic());
      $fcsollic_up->setTomo($fcsollic->getTomo());
      $fcsollic_up->setFolio($fcsollic->getFolio());
      $fcsollic_up->setNumero($fcsollic->getNumero());
      $fcsollic_up->setFecapr($fcsollic->getFecapr());
      $fcsollic_up->setFecven($fcsollic->getFecven());
      $fcsollic_up->setFecinilic($fcsollic->getFecinilic());
      $fcsollic_up->setStasol("A");
      $fcsollic_up->setNumlic($fcsollic->getNumlic());
      $fcsollic_up->setFunrel($fcsollic->getFunrel());
      $fcsollic_up->setCodtiplic($fcsollic->getCodtiplic());
      $fcsollic_up->save();
    }
    return -1;
  }

  public static function Grabar_Facpiclic_Suspencion_Cancelacion($fcsollic) {
    try {
      $correlativo = "";
      $c = new Criteria();
      $c->add(FcsollicPeer :: NUMSOL, $fcsollic->getNumsol());
      $fcsollic_up = FcsollicPeer :: doSelectOne($c);
      if (count($fcsollic_up) > 0) {
        /* ACTUALIZAMOS FCSOLLIC */
        $fcsollic_up->setStalic($fcsollic->getOperacion());
        $fcsollic_up->save();
        /* FIN ACTUALIZAR */
        $c = new Criteria();
        $c->addDescendingOrderByColumn(FcsuscanPeer :: NUMSUS);
        $reg = FcsuscanPeer :: doSelectOne($c);
        if (count($reg) > 0)
          $correlativo = str_pad(trim($reg->getNumsus() + 1), 10, '0', STR_PAD_LEFT);
        else
          $correlativo = str_pad(1, 10, '0', STR_PAD_LEFT);
        $fcsuscan_new = new Fcsuscan();
        $fcsuscan_new->setNumsus($correlativo);
        $fcsuscan_new->setNumsol($fcsollic->getNumsol());
        $fcsuscan_new->setNumlic($fcsollic->getNumlic());
        $fcsuscan_new->setFunsus($fcsollic->getFunsus());
        $fcsuscan_new->setTomo($fcsollic->getSolsus());
        $fcsuscan_new->setNumero($fcsollic->getActsus());
        $fcsuscan_new->setFolio($fcsollic->getFolsus());
        $fcsuscan_new->setResolu($fcsollic->getResolsus());
        $fcsuscan_new->setMotsus($fcsollic->getMotsus());
        $fcsuscan_new->setFecsus($fcsollic->getFecsus());
        $fcsuscan_new->setEstlic($fcsollic->getOperacion());

        $fcsuscan_new->save();
      }

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function Grabar_Reactivar($fcsollic) {
    $c = new Criteria();
    $c->add(FcsollicPeer :: NUMLIC, $fcsollic->getNumlic());
    $fcsollic_up = FcsollicPeer :: doSelectOne($c);
    if (count($fcsollic_up) > 0) {
      $fcsollic_up->setStalic("V");
      $fcsollic_up->save();
    }
    return -1;
  }

  public static function Grabar_Renovar($fcsollic) {
    $c = new Criteria();
    $c->add(FcsollicPeer :: NUMLIC, $fcsollic->getNumlic());
    $fcsollic_up = FcsollicPeer :: doSelectOne($c);
    if (count($fcsollic_up) > 0) {
      $fcsollic_up->setStalic("V");
      $fcsollic_up->setFecini(date("Y") . "01-01");
      $fcsollic_up->setFecfin(date("Y") . "12-31");
      $fcsollic_up->setFecapr(date('Y-m-d'));
      $fcsollic_up->setFecven(date("Y") . "12-31");
      $fcsollic_up->save();
      $fcrenlic_new = new Fcrenlic();
      $fcrenlic_new->setNumlic($fcsollic->getNumlic());
      $fcrenlic_new->setFecven($fcsollic->getFecven());
      $fcrenlic_new->setFecren(date("Y-m-d"));
      $fcrenlic_new->save();
    }
    return -1;
  }

  public static function generarCorrelativoFacpicsollic($clase) {
    $correlativo = '';

    if ($clase->getNumsol() == '##########') {
      $sql = "select max(numsol) as numsol from fcsollic ";
      if (Herramientas::BuscarDatos($sql, $result)) {
        $valor = $result[0]['numsol']+1;
      } else {
        $valor = 1;
      }
      
        $encontrado=false;
        while (!$encontrado)
        {
          $numero=str_pad((integer)$valor, 10, '0', STR_PAD_LEFT);

          $sql="select numsol from fcsollic where numsol='".$numero."'";
          if (Herramientas::BuscarDatos($sql,$result))
          {
            $valor=$valor+1;
          }
          else
          {
            $encontrado=true;
          }
        }
      
      $correlativo = $numero;
    } else {
      $correlativo = str_pad($clase->getNumsol(), 10, '0', STR_PAD_LEFT);
    }

    return $correlativo;
  }

  public static function SalvarFacpicsollic($fcsollic, $grid) {
    //try {
    $nuevo=$fcsollic->getId();
    $correlativo = '';
    if ($fcsollic->getId() == '') {
      $correlativo = self::generarCorrelativoFacpicsollic($fcsollic);
      $fcsollic->setNumsol($correlativo);
      $fcsollic->setStasol('P');
      $fcsollic->setStalic('V');
      $fcsollic->setStadec('N');
      $fcsollic->setStaliq('N');
    } else {
      if ($fcsollic->getLicmodificada() == 'I')
        Hacienda :: Grabar_Anteriores($fcsollic);
      if ($fcsollic->getLicnegada() == 'I')
        Hacienda :: Salvarneg($fcsollic);
    }
    //Contribuyente
    if ($fcsollic->getRifcon() != "") {
      $c = new Criteria();
      $c->add(FcconrepPeer::RIFCON, trim($fcsollic->getRifcon()));
      $fcconrep2 = FcconrepPeer::doSelectOne($c);
      if (count($fcconrep2) == 0) {
        $fcconrep_new = new Fcconrep();
        $fcconrep_new->setRifcon($fcsollic->getRifcon());
        $fcconrep_new->setNomcon($fcsollic->getNomcon());
        $fcconrep_new->setRepcon("C");
        $fcconrep_new->setDircon($fcsollic->getDircon());
        $fcconrep_new->setNaccon($fcsollic->getNacconcon());
        $fcconrep_new->setTipcon($fcsollic->getTipconcon());
        $fcconrep_new->save();
      }
    }
    //Representante
    if ($fcsollic->getRifrep() != "") {
      $cr = new Criteria();
      $cr->add(FcconrepPeer::RIFCON, trim($fcsollic->getRifrep()));
      $fcconrep = FcconrepPeer::doSelectOne($cr);
      if (count($fcconrep) == 0) {
        $fcconrep_rep = new Fcconrep();
        $fcconrep_rep->setRifcon($fcsollic->getRifrep());
        $fcconrep_rep->setNomcon($fcsollic->getNomconrep());
        $fcconrep_rep->setRepcon("R");
        $fcconrep_rep->setDircon($fcsollic->getDirconrep());
        $fcconrep_rep->setNaccon($fcsollic->getNacconrep());
        $fcconrep_rep->setTipcon($fcsollic->getTipconrep());
        $fcconrep_rep->save();
      }
    }
    $fcsollic->setFeclic($fcsollic->getFecsol());
    $fcsollic->setTaslic(0);
    $fcsollic->setDeuacl(0);
    $fcsollic->setImplic(0);
    $fcsollic->setDeuacp(0);
    $fcsollic->save();

    return Hacienda :: salvar_grid_Fcsollic($fcsollic, $grid,$nuevo);

    /* } catch (Exception $ex) {
      return 0;
      } */
  }

  public static function eliminarFacinmreg($clase) {

    //Eliminación de detalle Tipo de Inmueble
    $c = new Criteria();
    $c->add(FcinmcomPeer::NROINM, $clase->getNroInm());
    $reg1 = FcinmcomPeer::doSelect($c);

    if ($reg1) {
      foreach ($reg1 as $v) {
        $v->delete();
      }
    }
    //Eliminación del detalle Complemento
    $cr = new Criteria();
    $cr->add(FcdetinmPeer::NROINM, $clase->getNroInm());
    $reg2 = FcdetinmPeer::doSelect($cr);

    if ($reg2) {
      foreach ($reg2 as $v) {
        $v->delete();
      }
    }
    //Eliminación del Traspaso
    $crt = new Criteria();
    $crt->add(FctrainmPeer::NROINM, $clase->getNroInm());
    $reg3 = FctrainmPeer::doSelect($crt);

    if ($reg3) {
      foreach ($reg3 as $v) {
        $v->delete();
      }
    }
    $clase->delete();

    return -1;
  }

  public static function SalvarFacinmreg($clasemodelo, $gridAvaluo, $gridComplemento) {

    if ($clasemodelo->getNroinm() == '###############') {

      if (true) {
        $r = Herramientas::getNextvalSecuencia('fcreginm_nroim_seq');
        $encontrado = false;
        while (!$encontrado) {
          $numero = str_pad($r, 15, '0', STR_PAD_LEFT);
          $c = new Criteria();
          $c->add(FcreginmPeer::NROINM, $numero);
          $resul = FcreginmPeer::doSelectOne($c);
          if ($resul) {
            $r = $r + 1;
          } else {
            $encontrado = true;
          }
        }
        $clasemodelo->setNroinm($numero);
      }
      // H::getSalvarCorrelativo('numpag','fcpagos','numpag',$r,&$msg);
    } else {
      $clasemodelo->setNroinm(str_replace('#', '0', $clasemodelo->getNroinm()));
    }

    //Registrar Contribuyente

    $cc = new Criteria();
    $cc->add(FcconrepPeer::RIFCON, $clasemodelo->getRifcon());
    $fcconrep = FcconrepPeer::doSelectOne($cc);
    if (!($fcconrep)) {
      $contribuyente = new Fcconrep();
      $contribuyente->setRifcon($clasemodelo->getRifcon());
      $contribuyente->setNomcon($clasemodelo->getNomcon());
      $dircon = $clasemodelo->getDirconcon();
      $contribuyente->setDircon($dircon);
      $naccon = $clasemodelo->getNacconcon();
      $contribuyente->setNaccon($naccon);
      $tipcon = $clasemodelo->getTipconcon();
      $contribuyente->setTipcon($tipcon);
      $contribuyente->setRepcon('C');
      $contribuyente->save();
    }
    //Registrar Representante

    $cr = new Criteria();
    $cr->add(FcconrepPeer::RIFCON, $clasemodelo->getRifrep());
    $fcconrepr = FcconrepPeer::doSelectOne($cr);
    if (!(count($fcconrepr) > 0)) {
      $rep = new Fcconrep();
      $rep->setRifcon($clasemodelo->getRifrep());
      $nomr = $clasemodelo->getNomconrep();
      $rep->setNomcon($nomr);
      $dirrep = $clasemodelo->getDirconrep();
      $rep->setDircon($dirrep);
      $nacrep = $clasemodelo->getNacconrep();
      $rep->setNaccon($nacrep);
      $tiprep = $clasemodelo->getTipconrep();
      $rep->setTipcon($tiprep);
      $rep->setRepcon('R');
      $rep->save();
    }


    $clasemodelo->setDircon(H :: getX('rifcon', 'Fcconrep', 'dircon', $clasemodelo->getRifcon()));
    $clasemodelo->setFecrec(date('Y-m-d'));
    $clasemodelo->setEstinm('A');
    $clasemodelo->setEstdec('N');
    $clasemodelo->setCoduso($clasemodelo->getCodusoinm());
    $clasemodelo->save();

    $error = self::SalvarInmuebleDetalles($clasemodelo, $gridAvaluo);  //SalvarInmuebleDetalles
    $error = self::SalvarInmuebleComplemento($clasemodelo, $gridComplemento);  //SalvarComplemento
    if ($clasemodelo->getTraspaso() == 'S')
      self::RegistrarCambios($clasemodelo);
    $error = -1;

    return $error;
  }

  public static function RegistrarCambios($clasemodelo) {

    $cr = new Criteria();
    $cr->add(FctrainmPeer::NUMTRA, $clasemodelo->getNumtra());
    $cr->add(FctrainmPeer::NROINM, $clasemodelo->getNroinm());
    $c = FctrainmPeer::doSelectOne($cr);
    if (!$c) {
      $c = new Fctrainm();
      $clasemodelo->setNroinm(str_replace('#', '0', $clasemodelo->getNroinm()));
      $c->setNumtra($clasemodelo->getNumtra());
      $c->setNroinm($clasemodelo->getNroinm());
    }

    $c->setFectra($clasemodelo->getFectra());
    $c->setRifcon($clasemodelo->getRifcon());
    $c->setRifrep($clasemodelo->getRifrep());
    $c->setRifconant($clasemodelo->getRifconant());
    $c->setRifrepant($clasemodelo->getRifrepant());
    $c->setFunrec($clasemodelo->getFunrectra());
    $c->save();
  }

  public static function verificar_Traspaso($numtra, $nroinm) {
    $sql = "Select * From fctrainm Where numtra = '" . $numtra . "' And nroinm <> '" . $nroinm . "'";
    if (Herramientas :: BuscarDatos($sql, $result)) {
      return true;
    } else {
      return false;
    }
  }

  public static function SalvarInmuebleDetalles($clasemodelo, $grid) {
    try {
      $x = $grid[0];
      $j = 0;
      while ($j < count($x)) {
        $x[$j]->setNroinm($clasemodelo->getNroinm());
        $x[$j]->setCodest($clasemodelo->getCodestinm());
        $x[$j]->setAnoava($clasemodelo->getAnoava());
        $x[$j]->setCodzon($clasemodelo->getCodzon());
        $x[$j]->save();
        H::printR($x[$j]);
        //exit();

        $j++;
      }
      $z = $grid[1];
      $j = 0;
      while ($j < count($z)) {
        $z[$j]->delete();
        $j++;
      }

      return -1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function SalvarInmuebleComplemento($clasemodelo, $grid) {
    try {
      $x = $grid[0];
      $j = 0;
      while ($j < count($x)) {
        $x[$j]->setNroinm($clasemodelo->getNroinm());
        $x[$j]->setAnoava($clasemodelo->getAnoava());
        $x[$j]->save();
        H::printR($x[$j]);
        //exit();

        $j++;
      }
      $z = $grid[1];
      $j = 0;
      while ($j < count($z)) {
        $z[$j]->delete();
        $j++;
      }

      return -1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function validarFacpicliq($clasemodelo, $gridacteco) {
    $x = $gridacteco[0];
    $j = 0;
    while ($j < count($x)) {
      $c = new Criteria();
      $c->add(FcactcomPeer :: CODACT, $x[$j]->getCodact());
      $c->add(FcactcomPeer :: ANOACT, $x[$j]->getAnodec());
      $fcactcom = FcactcomPeer :: doselectone($c);

      if ($fcactcom) {
        return $error = 707;
      }
      $j++;
    }

    return -1;
  }

  public static function validarFacpicliq2($clasemodelo) {
    $c = new Criteria();
    $c->add(FcdeclarPeer :: NUMREF, $clasemodelo->getNumref());
    $c->add(FcdeclarPeer :: MODO, $clasemodelo->getNumref());
    $c->add(FcdeclarPeer :: ANODEC, $clasemodelo->getNumref());
    $fcactcom = FcactcomPeer :: doselectone($c);

    if ($fcactcom) {
      return $error = 707;
    }
  }

  public static function generarCorrelativoFacpicliq($clase) {
    $correlativo = '';

    if ($clase->getNumdec() == '0000000000') {
      $sql = "SELECT substr(numdec, 2, 6) AS cod FROM  fcdeclar WHERE id IN (Select Max(Id) FROM fcdeclar where Fueing='01')";
      if (Herramientas::BuscarDatos($sql, $result)) {
        $valor = $result[0]['cod'] + 1;
      } else {
        $valor = 1;
      }
      $correlativo = str_pad($valor, 10, '0', STR_PAD_LEFT);
    } else {
      $correlativo = str_pad($valor, 10, '0', STR_PAD_LEFT);
    }

    return $correlativo;
  }

  public static function salvarFacpicliq($clasemodelo, $gridActCom, $gridDisDeu) {
    self :: ActualizacionSolicitud($clasemodelo);
    self :: Declaracion($clasemodelo, $gridActCom, $gridDisDeu); //GENERAMOS EL NUMERO DE DECLARACION

    return -1;
  }

  public static function Declaracion($clasemodelo, $gridActCom, $gridDisDeu) {
    if ($clasemodelo->getId() == "") {
      //$numero= self::generarCorrelativoFacpicliq($clasemodelo);
      $numero = $clasemodelo->getNumref();
      $numdec = $clasemodelo->getModo() . substr($numero, 4, 6) . "-" . substr($clasemodelo->getAnodec(), 2, 2);
    }


    $t = new Criteria();
    $t->add(Fcdeclarpeer::NUMDEC, $numdec);
    $t->add(Fcdeclarpeer::RIFCON, $clasemodelo->getRifcon());
    $t->add(Fcdeclarpeer::NUMREF, $clasemodelo->getNumref());
    FcdeclarPeer::doDelete($t);

    $x = $gridDisDeu[0];
    $i = 0;
    while ($i < count($x)) {
      if ($x[$i]->getNumero() != "") {
        if ($clasemodelo->getId() == "") {
          $x[$i]->setNumdec($numdec);
        }
        $r = new Criteria();
        $r->add(FcfueprePeer::CODFUE, $x[$i]->getFueing());
        $registro = FcfueprePeer::doSelectOne($r);
        if ($registro) {
          $x[$i]->setTipo($registro->getNomabr());
          $x[$i]->setNumref($clasemodelo->getNumref());
        }
        $x[$i]->setFecdec($clasemodelo->getFecdec());
        $x[$i]->setRifcon($clasemodelo->getRifcon());
        $x[$i]->setMora(0);

        $lafuente = Herramientas::getX_vacio('codemp', 'fcdefins', 'codpic', '001');
        $salabono = 0;
        $sql = "Select sum(SalPag) as monto from FCAbonos where fueing='" . $lafuente . "' and NumRef ='" . $clasemodelo->getNumref() . "' and rifcon='" . $clasemodelo->getRifcon() . "' AND STAPAG='N'";
        if (Herramientas::BuscarDatos($sql, $result)) {
          $salabono = $result[0]["monto"]==null ? 0 : $result[0]["monto"];
        }
        if ($salabono <= $x[$i]->getMondec() || $x[$i]->getMondec() < 0)
          $x[$i]->setAutliq($salabono);
        else
          $x[$i]->setAutliq($x[$i]->getMondec());

        self:: actualizarSaldoLic($lafuente, $clasemodelo->getNumref(), $clasemodelo->getRifcon(), H::toFloat($x[$i]->getAutliq()));

        $salabono = $salabono - H::toFloat($x[$i]->getMondec());
//        if ($salabono < 0)
//          $salabono = 0;
        $x[$i]->setProntopg(0);
        if ($x[$i]->getEdodecstatus() == 'VIGENTE')
          $x[$i]->setEdodec('V');
        else if ($x[$i]->getEdodecstatus() == 'VENCIDA')
          $x[$i]->setEdodec('E');
        else if ($x[$i]->getEdodecstatus() == 'PAGADA')
          $x[$i]->setEdodec('P');

        $x[$i]->setModo($clasemodelo->getModo());
        $x[$i]->setMonabo($x[$i]->getAutliq());
        $x[$i]->setNomcon($clasemodelo->getNomcon());
        $x[$i]->setFundec(sfContext::getInstance()->getUser()->getAttribute('usuario'));
        $x[$i]->setAnodec($clasemodelo->getAnodec());
        $x[$i]->setFecini($clasemodelo->getFecini());
        $x[$i]->setFeccie($clasemodelo->getFeccie());
        $x[$i]->save();
      }
      $i++;
    }


//    $tq = new Criteria();
//    $tq->add(Fcactpicpeer::NUMDOC, $clasemodelo->getNumref());
//    $tq->add(Fcactpicpeer::ANODEC, $clasemodelo->getAnodec());
//    $tq->add(Fcactpicpeer::MODO, $clasemodelo->getModo());
//    Fcactpicpeer::doDelete($tq);

    $z = $gridActCom[0];
    $j = 0;
    $numsol=H::getX_vacio('NUMLIC','Fcsollic','Numsol',$clasemodelo->getNumref());
    while ($j < count($z)) {
      if ($z[$j]->getCodact() != "") {
        $c = new Criteria();  
        $c->add(FcactpicPeer::CODACT, $z[$j]->getCodact());
        $c->add(FcactpicPeer::NUMDOC, $numsol);
        if($clasemodelo->getModo()=='D') $c->add(Fcactpicpeer::MODO, $clasemodelo->getModo());
        $registros = FcactpicPeer::doSelectOne($c);
        if ($registros) {
          $registros->setExoner('N');
          $registros->setPorexo(0);
          $registros->setAnodec($clasemodelo->getAnodec());
          $registros->setModo($clasemodelo->getModo());
          $registros->save();
        }else{
          $z[$j]->setNumdoc($clasemodelo->getNumref());
          $z[$j]->setExoner('N');
          $z[$j]->setPorexo(0);
          $z[$j]->setAnodec($clasemodelo->getAnodec());
          $z[$j]->setModo($clasemodelo->getModo());
          $z[$j]->save();
        }
      }
      $j++;
    }
  }

  public static function ActualizacionSolicitud($clasemodelo) {
    $c = new Criteria();
    $c->add(FcsollicPeer :: NUMLIC, $clasemodelo->getNumref());
    $fcactcom = FcsollicPeer :: doselectone($c);

    if ($fcactcom) {
      $fcactcom->setStadec('D');
      $fcactcom->save();
    }
  }

  public static function MontodeMoraMes($valordedeuda, $diasmora, $fecven, &$valormora) {
    $meses = 0;
    $nuevafecha = Herramientas::dateAdd('d', $diasmora, $fecven, '+');
    $meses = H::DateDiff('m', $nuevafecha, $fecven);
    $porcmora = 0;
    Switch ($meses) {
      case 1 :
        $porcmora = 10;
        break;
      case 2 || 3 :
        $porcmora = 15;
        break;
      default :
        $porcmora = 0;
        break;
    }
    if ((H::DateDiff("d", $nuevafecha, $fecven) >= 1) && (H::DateDiff("d", $nuevafecha, $fecven) <= 30)) {
      $meses = 1;
    }
    if ($meses > 0) {
      $valormora = round($valordedeuda * $porcmora / 100);
    }
  }

  public static function BuscarDatosFuenteIngreso($codfue='', &$autoliq = '', &$deudafrac = '', &$diasmora = '', &$porcmora = '', &$diasprontop = '', &$porcprontop ='') {
    $c = new Criteria();
    $c->add(FcfueprePeer::CODFUE, $codfue);
    $datos = FcfueprePeer :: doSelectOne($c);
    if ($datos) {
      $autoliq = $datos->getAutliq();
      $deudafrac = $datos->getDeufra();
      $diasmora = $datos->getPermor();
      $porcmora = $datos->getMonmor();
      $diasprontop = $datos->getPerppg();
      $porcprontop = $datos->getPropag();
    }
  }

  public static function MontodeMoraFijoPago($valordedeuda, $diasmora, $porcmora, $fecven, &$valormorafijo) {
    $meses = 1;
    $montodemorafijo = 0;

    if ($meses > 0) {
      $montodemorafijo = Round(($valordedeuda * $porcmora / 100), 2) * $meses;
    }
  }

  public static function Calculointanual($annio, $valor, $diasmora, &$valorint) {
    $acum = 0;
    for ($i = 1; $i < 6; $i++) {
      $monto = 0;
      $fecha = '28/' . str_pad(($i * 2), 2, '0', STR_PAD_LEFT) . '/' . $annio;
      $monto = self::MontodeMoraMes($valor / 6 / 10, $diasmora, $fecha);
      $acum = $acum + $monto;
    }
    $valorint = $acum;
  }

  public static function Calculomoranual($annio, $valor, $diasmora, &$moranual, $fechapago) {
    $acum = 0;
    for ($i = 1; $i < 6; $i++) {
      $monto = 0;
      $fecha = '28/' . str_pad(($i * 2), 2, '0', STR_PAD_LEFT) . '/' . $annio;

      if (H::FormatoFecha($fecha) < $fechapago) {
        $monto = self::MontodeMoraMes(($valor / 6), $diasmora, $fecha);
      }

      $acum = $acum + $monto;
    }
    $moranual = $acum;
  }

  public static function GenerarMoraPago($tabla, $monto, $tipo, $fuente) {
    if ($fuente <> '33') {
      $monto = round($monto);
    }
    $c = new Criteria();
    $c->add(FcdeclarPeer::NUMREF, $tabla->getNumref());
    $c->add(FcdeclarPeer::NUMDEC, $tabla->getNumdec());
    $c->add(FcdeclarPeer::NUMERO, $tabla->getNumero());
    $c->add(FcdeclarPeer::FUEING, $fuente);
    $datos = FcdeclarPeer :: doSelect($c);
    if ($datos) {
      foreach ($datos as $v) {
        $v->delete();
      }
    }
    $fcdeclar = new Fcdeclar();
    $fcdeclar->setNumdec($tabla->getNumdec());
    $fcdeclar->setNumero($tabla->getNumero());
    $fcdeclar->setFecven(H::dateAdd("d", 1, $tabla->getFecven(), '-'));
    $fcdeclar->setFueing($fuente);
    $fcdeclar->setFecdec($tabla->getFecdec());
    $fcdeclar->setRifcon($tabla->getRifcon());
    $fcdeclar->setTipo($tipo);
    $fcdeclar->setNumref($tabla->getNumref());
    $fcdeclar->setNombre("RECARGO POR MORA " . $tabla->getNombre());
    $fcdeclar->setMondec($monto);
    $fcdeclar->setEdodec("V");
    $fcdeclar->setMora(0);
    $fcdeclar->setProntopg(0);
    $fcdeclar->setAutliq(0);
    $fcdeclar->setFundec($tabla->setFundec());
  }

  public static function MontoDescuentoEventual($griddetalle, $ElDescto, $rifcon, $numref, &$monto, $vienedeclaracion, $feccor) {
    /* if($vienedeclaracion){

      } */
    $i = 0;
    $montodeuda = 0;
    if ($numref == '') {
      $sql = "Select Distinct(FueIng)as fueing from FCDeclar A, FcDefDesc B Where A.FueIng=B.CodFue And CodDes='" . $ElDescto . "' And RifCon='" . $rifcon . "' AND EDODEC<>'P' And EdoDec<>'X'";
    } else {
      $sql = "Select Distinct(FueIng) from FCDeclar A, FcDefDesc B Where A.FueIng=B.CodFue And CodDes='" . $ElDescto . "' And RifCon='" . $rifcon . "' and numref='" . $numref . "' AND EDODEC<>'P' And EdoDec<>'X'";
    }
    if (H::BuscarDatos($sql, $reg)) {
      $dateFormat = new sfDateFormat('es_VE');
      $fechainicio = date('Y') . '-01-01';
      $fechaauxcor = $dateFormat->format($feccor, 'i', $dateFormat->getInputPattern('d'));
      $dia = H::dateDiff('d', $fechainicio, $fechaauxcor);
      $i = 0;
      $todomarcado = self::TodoMarcados($griddetalle, $reg[0]['fueing']);
      $sql = "Select A.coddes,A.nomdes,A.codfue, A.tipo,A.modo,A.limita,A.auto,A.anoact,coalesce(B.Valor,0) as valor From FCDefDesc A,FCRangosDes B " .
              "Where A.CodDes=B.CodDes And A.CodFue='" . $reg[0]['fueing'] . "' " .
              "And B.DiasDesde<=" . (int) $dia . " And B.DiasHasta>=" . (int) $dia . " " .
              "And (CASE WHEN A.Limita='S' THEN Limita ELSE '" . $todomarcado . "' END)='" . $todomarcado . "'";

      if (H::BuscarDatos($sql, $result)) {
        while ($i < count($result)) {
          if (self::CumpleRecaudos($rifcon, $result[$i]['coddes'])) {
            $montodeuda = self::AcumularFuente($griddetalle, $reg[0]['fueing'], $result[$i]['anoact']);
            if ($result[$i]['modo'] == 'M') {
              $monto = H::toFloat($monto + $result[$i]['valor']);
            } else {
              $monto = H::toFloat(($monto + $montodeuda) * $result[$i]['valor'] / 100);
            }
          }
          $i++;
        }
      }
    }
  }

  public static function verificarCoincidencia($grid, $codigo, $fila, $col) {
    $existe = false;
    $i = 0;
    while ($i < count($grid)) {
      $codgrid = $grid[$i][$col];
      if ($i != $fila) {
        if ($codigo == $codgrid) {
          $existe = true;
          break;
        }
      }
      $i++;
    }

    return $existe;
  }

  public static function calcularrecdes($grid, &$acumdes, &$acumrec, &$montototal, &$montot, &$saldo, &$montoprontopg, $pagcon, $porcprontopg, $montodeuda, &$montotpag) {

    $j = 0;
    $cant = count($grid);
    while ($j < $cant) {
      $c = new Criteria();
      $c->add(FcdefdescPeer :: CODDES, $grid[$j][0]);
      $fcdefdesc = FcdefdescPeer :: doSelectOne($c);
      if ($fcdefdesc) {
        if ($fcdefdesc->getTipo() == "R") {
          $acumrec = $acumrec + $grid[$j][3];
        } else {
          $acumdes = H::toFloat($acumdes + H::toFloat($grid[$j][3]));
        }
      }
      $montototal = H::toFloat($montototal + H::toFloat($grid[$j][3]));
      $j = $j + 1;
    }
    $montot = H::toFloat($pagcon) ; //H::toFloat(H::toFloat($pagcon) + $acumrec - $acumdes);
    $montotpag=H::toFloat(H::toFloat($pagcon) + $acumrec - $acumdes);
    $saldo = H::toFloat($montot - $montototal);
    $montoprontopg = H::toFloat(($porcprontopg / 100) * H::toFloat($montodeuda));
  }

  public static function calcularSaldos($grid, &$acumdes, &$acumrec, &$montototal, &$montot, &$saldo, &$montoprontopg, $pagcon, $porcprontopg, $montodeuda) {

    for ($i = 0; $i < count($grid); $i++) {

      $c = new Criteria();
      $c->add(FcrecdesPeer :: CODREDE, $grid[$i]['codrede']);
      $fcrecdes = FcrecdesPeer :: doSelectOne($c);
      if ($fcrecdes) {
        if ($fcrecdes->getRecdes() == "R") {
          $acumrec = $acumrec + $grid[$i]['monto'];
        } else {
          $acumdes = H::toFloat($acumdes + H::toFloat($grid[$i]['monto']));
        }
        $montototal = H::toFloat($montototal + H::toFloat($grid[$i]['monto']));
      }
    }

    $montot = H::toFloat($pagcon) + H::toFloat($acumrec) - H::toFloat($acumdes);
    $saldo = H::toFloat($montot) - H::toFloat($montototal);
    $montoprontopg = H::toFloat(($porcprontopg / 100) * H::toFloat($montodeuda));
  }

  public static function totalizarSaldo($grid, $pagcon, $recargo, $descuento, &$montot, &$acum, $porcprontopg, $montodeuda, $col) {
    $montot = H::toFloat($pagcon) + H::toFloat($recargo) - H::toFloat($descuento);
    $j = 0;
    $cant = count($grid);
    while ($j < $cant) {
      $acum = $acum + $grid[$j][$col];
      $j++;
    }
    $montoprontopg = H::toFloat(($porcprontopg / 100) * $montodeuda);
  }

  public static function MoraPago($rifcon='', $fecpag='', $numref='', $vienededeclaracion=false, &$porcprontop=0) {
    $diasmora = '';
    $porcmora = '';
    $valormora = 0;
    $moranual = 0;
    $valorint = 0;
    $lafuente = '';
    $eltipo = '';
    $fuenteing = '';
    $autoliq = 0;
    $deudafrac = 0;
    $diasmora = 0;
    $diasprontop = 0;
    $valormorafijo = 0;
    /*   if($vienededeclaracion){
      $referencia=getCodfact();
      } */

    if ($numref == '') {
      $sql = "select Distinct(FueIng) as fueing from FCDeclar where RifCon='" . $rifcon . "' AND EDODEC<>'P' And EdoDec<>'X'";
    } else {
      $sql = "select Distinct(FueIng) as fueing from FCDeclar where RifCon='" . $rifcon . "' and numref='" . $numref . "' AND EDODEC<>'P' And EdoDec<>'X'";
    }
    $dateFormat = new sfDateFormat('es_VE');
    $mes = (int) substr($dateFormat->format($fecpag, 'i', $dateFormat->getInputPattern('d')), 5, 2);
    $feccor = $dateFormat->format($fecpag, 'i', $dateFormat->getInputPattern('d'));
    $i = 0;
    if (Herramientas::BuscarDatos($sql, $result)) {
      $fuenteing = $result[0]['fueing'];
      while ($i < count($result)) {
        self::BuscarDatosFuenteIngreso($fuenteing,
                        $autoliq,
                        $deudafrac,
                        $diasmora,
                        $porcmora,
                        $diasprontop,
                        $porcprontop);
        if ($numref == '') {
          $c = new Criteria();
          $c->add(FcdeclarPeer :: RIFCON, $rifcon);
          $c->add(FcdeclarPeer :: FUEING, $fuenteing);
          $c->add(FcdeclarPeer :: FECVEN, $feccor, Criteria :: LESS_THAN);
          $sql = "NOMBRE NOT IN (SELECT NOMBRE FROM FCDECLAR WHERE NOMBRE LIKE '%INTERESES POR MORA%' )";
          $c->add(FcdeclarPeer :: NOMBRE, $sql, Criteria :: CUSTOM);
          $c->add(FcdeclarPeer :: EDODEC, array('P', 'X'), Criteria :: NOT_IN);
          $c->addAscendingOrderByColumn(FcdeclarPeer :: FECVEN);
          $datos = FcdeclarPeer :: doSelectOne($c);
        } else {
          $c = new Criteria();
          $c->add(FcdeclarPeer :: RIFCON, $rifcon);
          $c->add(FcdeclarPeer :: FUEING, $fuenteing);
          $c->add(FcdeclarPeer :: FECVEN, $feccor, Criteria :: LESS_THAN);
          $sql = "NOMBRE NOT IN (SELECT NOMBRE FROM FCDECLAR WHERE NOMBRE LIKE '%INTERESES POR MORA%' )";
          $c->add(FcdeclarPeer :: NOMBRE, $sql, Criteria :: CUSTOM);
          $c->add(FcdeclarPeer :: EDODEC, array('P', 'X'), Criteria :: NOT_IN);
          $c->add(FcdeclarPeer :: NUMREF, $numref);
          $c->addAscendingOrderByColumn(FcdeclarPeer :: FECVEN);
          $datos = FcdeclarPeer :: doSelectOne($c);
        }
        if ($datos) {
          if ($datos->getMondec() >= 0) {
            if ($datos->getTipo() == 'CVP') {
              $diasmora = -30;
              $porcmora = 2;
            } else if ($datos->getFueing() == '03' || $datos->getFueing() == '53') {
              if (($mes % 2) == 0) {
                $diasmora = -30;
              } else {
                $diasmora = -60;
              }
            }
            self::MontodeMoraMes($datos->getMondec(), $diasmora, $datos->getFecven(), $valormora);
            $valorint = 0;
            if ((int) $valormora > 0) {
              switch ($datos->getFueing()) {
                case '01' || '47':
                  $lafuente = '32';
                  $eltipo = 'ICM';
                  break;
                case '37' || '48':
                  $lafuente = '34';
                  $eltipo = 'SBM';
                  break;
                case '52':
                  //Vehiculo
                  $lafuente = '33';
                  $eltipo = 'PVM';
                  break;
                case '02' || '49':
                  //Caso de vehiculo especial
                  self::MontodeMoraFijoPago($datos->getMondec(), $diasmora, $porcmora, $datos->getFecven(), $valormorafijo);
                  $lafuente = '33';
                  $eltipo = 'PVM';

                  break;
                case '03' || '53':
                  $lafuente = '66';
                  $eltipo = 'INM';
                  //en el caso de INMUEBLES  especial
                  self::MontodeMoraFijoPago($datos->getMondec(), $diasmora, $porcmora, $datos->getFecven(), $valormorafijo);
                  if ($datos->getTipo() == 'PAG') {
                    $anniofecpag = (int) substr($fecpag, 0, 4);
                    $anniofecven = (int) substr($datos->getFecven(), 0, 4);
                    if (($anniofecpag - $anniofecven) < 6) {
                      self::Calculointanual($anniofecven, $datos->getMondec(), $diasmora, $valorint);
                      self::Calculomoranual($anniofecven, $datos->getMondec(), $diasmora, $moranual, $fecpag);
                    }
                  } else {
                    if (($anniofecpag - $anniofecven) < 6) {
                      self::MontodeMoraMes($datos->getMondec() / 10, $diasmora, $datos->getFecven(), $valormora);
                      $valorint = $valormora;
                    }
                  }
                  break;
                default:
                  $lafuente = '19';
                  $eltipo = 'DEM';
                  break;
              }
              if (($valormora + $valorint) <> 0) {
                self::GenerarMoraPago($datos, $valormora + $valorint, $eltipo, $lafuente);
              }
            }
          }

          $datos->setMora($valormora);
          $datos->save();
        }
        $i = $i + 1;
      }
    }
  }

  public static function TodoMarcados($griddetalle, $fuente) {
    $todosmarcados = 'S';
    $x = $griddetalle;
    $j = 0;
    while ($j < count($griddetalle)) {
      $fuentesgr = $griddetalle[$j][15];
      $annio = substr($griddetalle[$j][6], 6, 4);
      if (count($griddetalle[$j]) == 16) {
        if ($fuentesgr == $fuente && (!array_key_exists($griddetalle[$j][0])) && (int) $annio >= date('Y')) {
          $todosmarcados = 'N';
          break;
        }
      } else {
        $todosmarcados = 'N';
        break;
      }
      $j++;
    }

    return($todosmarcados);
  }

  public static function CumpleRecaudos($rifcon, $coddesc) {
    $cumplerecaudos = false;
    $sql = "Select Count(*) as faltantes From FcDefRecDes A FULL OUTER JOIN FcRecCon B ON (A.CodRec=B.CodRec and B.RifCon='" . $rifcon . "') where A.CodDes='" . $coddesc . "'  And B.RifCon is null";
    if (H::BuscarDatos($sql, $reg)) {
      if ($reg[0]['faltantes'] == 0) {
        $cumplerecaudos = true;
      }
    }
    return ($cumplerecaudos);
  }

  public static function EstaGrid($grid, $codigo, &$donde) {

    $j = 0;
    //$x= $grid[0];
    if (count($grid) > 0) {
      while ($j < count($grid)) {

        if ($codigo == $grid[$j][0]) {
          $donde = $j;
          return false;
        }
        $j++;
      }
    }
    return true;
  }

  public static function AcumularFuente($griddetalle, $fuente, $annioactual) {
    $fila = 0;
    $acum = 0;
    $x = $griddetalle[0];
    $j = 0;
    if (count($griddetalle)>0) {
    while ($j < count($griddetalle)) {
      $annio = substr($griddetalle[$j][6], 6, 4);
      //if (count($griddetalle[$j]) == 16) {
        if ($griddetalle[$j][15] == $fuente && $griddetalle[$j][0]!="") {
            if ((int) $annio >= (($annioactual == 'S' ? date('Y') : $annio)))
               $acum = $acum + H::toFloat($griddetalle[$j][13]) ;
        }
      //}
      $j++;
    }
    }

    return($acum);
  }

  public static function CalculoDescuentoAut($fecha, $numdec, $rifcon, $numref, $feccor, $griddetalle, $gridrecargdescto, &$gridnuevo) {
    $donde = 0;
    $gridnuevo=array();
    $c = new Criteria();
    $c->add(FcdeclarPeer :: RIFCON, $rifcon);
    $c->add(FcdeclarPeer :: FECVEN, $fecha);
    $c->add(FcdeclarPeer :: NUMDEC, $numdec);
    $c->add(FcdeclarPeer :: EDODEC, array('P', 'X'), CRITERIA::NOT_IN);
    $c->add(FcdeclarPeer :: FUEING, '10', Criteria :: NOT_EQUAL);
    if ($numref != '') {
      $c->add(FcdeclarPeer :: NUMREF, $numref);
    }
    $fcdeclar = FcdeclarPeer :: doSelect($c);

    //igual a vb dice: No hay manera de obtener esta fecha
    $dateFormat = new sfDateFormat('es_VE');
    $fechainicio = date('Y') . '-01-01';
    // $fechaaux = H::FormatoFecha($fechainicio);
    $fechaauxcor = $dateFormat->format($feccor, 'i', $dateFormat->getInputPattern('d'));
    $dia = H::dateDiff('d', $fechainicio, $fechaauxcor);
    if (count($fcdeclar) > 0) {
      foreach ($fcdeclar as $datos) {
        $fuentesdec = $datos->getFueing();
        $todomarcado = self::TodoMarcados($griddetalle, $fuentesdec);
        $sql = "Select A.coddes,A.nomdes,A.codfue, A.tipo,A.modo,A.limita,A.auto,A.anoact,coalesce(B.Valor,0) as valor From FCDefDesc A,FCRangosDes B " .
                "Where A.CodDes=B.CodDes And A.CodFue='" . $datos->getFueing() . "' And A.Auto='S' " .
                "And B.DiasDesde<=" . (int) $dia . " And B.DiasHasta>=" . (int) $dia . " " .
                "And (CASE WHEN A.Limita='S' THEN Limita ELSE '" . $todomarcado . "' END)='" . $todomarcado . "'";

        if (H::BuscarDatos($sql, $reg)) {

          $i = 0;

          while ($i < count($reg)) {
            $lafila = 0;
            if (self::CumpleRecaudos($rifcon, $reg[$i]['coddes'])) {
              if (self::EstaGrid($gridrecargdescto, $reg[$i]['coddes'], $donde)) {
                $x = $gridrecargdescto[0];
                $j = 0;
                if (($gridrecargdescto[0][0] == '')) {
                  $gridnuevo[$j]['codrede'] = $reg[$i]['coddes'];
                  $gridnuevo[$j]['nomdes'] = $reg[$i]['nomdes'];
                  $gridnuevo[$j]['numcuo'] = 'Descuento';
                  $lafila = $j;
                } else {
                  $j = count($gridrecargdescto);
                  $gridnuevo[$j]['codrede'] = $reg[$i]['coddes'];
                  $gridnuevo[$j]['nomdes'] = $reg[$i]['nomdes'];
                  $gridnuevo[$j]['numcuo'] = 'Descuento';
                  $lafila = $j;
                }
              } else {
                $lafila = $donde;
                $k = 0;
                while ($k < count($gridrecargdescto)) {
                  if (($gridrecargdescto[$k][0] != '')) {
                    $gridnuevo[$k]['codrede'] = $gridrecargdescto[$k][0];
                    $gridnuevo[$k]['nomdes'] = $gridrecargdescto[$k][1];
                    $gridnuevo[$k]['numcuo'] = $gridrecargdescto[$k][2];
                  }
                  $k++;
                }
              }
              $montog = 0;
              $montodeuda = self::AcumularFuente($griddetalle, $datos->getFueing(), $reg[$i]['anoact']);
              if ($lafila > 0) {
                $montog = $gridrecargdescto[$lafila][3];
              }
              if ($reg[$i]['modo'] == 'M') {
                $gridnuevo[$lafila]['monto'] = H::toFloat($montog + $reg[$i]['valor']);
              } else {
                $monto = ($montodeuda * $reg[$i]['valor'] / 100);
                $gridnuevo[$lafila]['monto'] = H::toFloat($montog + $monto);
              }
            } else {
              return false;
            }
            $i++;
          }
        } else {
          $a= 0;
          if (count($gridrecargdescto)>0) {
              if ($gridrecargdescto[$a][0]!="") {
          while ($a < count($gridrecargdescto)) {
            if (($gridrecargdescto[$a][0] != '')) {
              $gridnuevo[$a]['codrede'] = $gridrecargdescto[$a][0];
              $gridnuevo[$a]['nomdes'] = $gridrecargdescto[$a][1];
              $gridnuevo[$a]['numcuo'] = $gridrecargdescto[$a][2];
              $gridnuevo[$a]['monto'] = $gridrecargdescto[$a][3];
            }
            $a++;
          }
              }else {
              $gridnuevo[0]['codrede'] = "0001";
              $gridnuevo[0]['nomdes'] = "prueba";
              $gridnuevo[0]['numcuo'] = "1";
              $gridnuevo[0]['monto'] = "0,00";
              }
          }else {
              $gridnuevo[0]['codrede'] = "0001";
              $gridnuevo[0]['nomdes'] = "prueba";
              $gridnuevo[0]['numcuo'] = "1";
              $gridnuevo[0]['monto'] = "0,00";
          }
        }
      }
    }
    return true;
  }

  public static function ValidarPago($numpag, $funval, &$edo) {
    $c = new Criteria();
    $c->add(FcpagosPeer :: NUMPAG, $numpag);
    $registro = FcpagosPeer :: doSelectOne($c);
    if ($registro) {
      //foreach ($registros as $reg) {
        $registro->setEdopag('V');
        $edo = 'V';
        $registro->setFunval($funval);
        $fecha = date('Y-m-d H:i:s');
        $registro->setFechorval($fecha);
        $registro->save();
        
        return true;
      //}
    } else {
      return false;
    }
  }

  public static function CalcularMora($rifcon='', $fecpag='', $feccor='', $numref='', $vienededeclaracion=false, &$porcprontop=0, &$deudafrac='') {
    try {
      $autoliq = 0;
      $diasmora = 0;
      $porcmora = 0;
      $diasprontop = 0;
      $porcprontop = 0;
      $c = new Criteria();
      $c->add(FcdeclarPeer :: RIFCON, $rifcon);
      $c->add(FcdeclarPeer :: EDODEC, array('P', 'X'), CRITERIA::NOT_IN);
      $c->add(FcdeclarPeer :: CONPAG, 'S');
      $sql = "FUEING IN (SELECT CODFUEGEN FROM FCFUENTESREC)";
      $c->add(FcdeclarPeer :: FUEING, $sql, Criteria :: CUSTOM);
      if ($numref != '') {
        $c->add(FcdeclarPeer :: NUMREF, $numref);
      }
      FcdeclarPeer :: doDelete($c);


      $dateFormat = new sfDateFormat('es_VE');
      $feccor = $dateFormat->format($feccor, 'i', $dateFormat->getInputPattern('d'));

      if ($numref == '') {
        $sql = "select Distinct(FueIng) as fueing from FCDeclar where RifCon='" . $rifcon . "' AND EDODEC<>'P' And EdoDec<>'X'";
      } else {
        $sql = "select Distinct(FueIng) as fueing from FCDeclar where RifCon='" . $rifcon . "' and numref='" . $numref . "' AND EDODEC<>'P' And EdoDec<>'X'";
      }
      if (H::BuscarDatos($sql, $per)) {
          $sql2 = "select Distinct(exipaguni) as exipaguni from FCDeclar where RifCon='" . $rifcon . "' AND EDODEC<>'P' And EdoDec<>'X'";
          if (H::BuscarDatos($sql2, $dat)) {
              $paguni=$dat[0]["exipaguni"];
          }else $paguni='S';
        $ii = 0;
        while ($ii < count($per)) {
          $fuenteing = $per[0]['fueing'];
          self::BuscarDatosFuenteIngreso($fuenteing,
                          $autoliq,
                          $deudafrac,
                          $diasmora,
                          $porcmora,
                          $diasprontop,
                          $porcprontop);
          $c = new Criteria();
          $c->add(FcdeclarPeer :: RIFCON, $rifcon);
          $c->add(FcdeclarPeer :: FUEING, $per[$ii]["fueing"]);
          $c->add(FcdeclarPeer :: CONPAG, 'S', Criteria :: NOT_EQUAL);
          if ($paguni!='S') $c->add(FcdeclarPeer :: FECVEN, $feccor, Criteria :: LESS_THAN);

          $opc1 = $c->getNewCriterion(FcdeclarPeer :: EDODEC, 'P', Criteria :: NOT_EQUAL);
          $opc2 = $c->getNewCriterion(FcdeclarPeer :: EDODEC, 'X', Criteria :: NOT_EQUAL);
          $opc1->addAnd($opc2);
          $c->add($opc1);

          $sql = "FUEING NOT IN (SELECT CODFUEGEN FROM FCFUENTESREC)";
          $c->add(FcdeclarPeer :: FUEING, $sql, Criteria :: CUSTOM);

          $c->addAscendingOrderByColumn(FcdeclarPeer :: FECVEN);
          $datos = FcdeclarPeer :: doSelect($c);

          $MoraAcum = 0;
          $InteresAcum = 0;
          $Declaraciones = 0;

          foreach ($datos as $per) {
            if ($per->getMondec() >= 0) {
              //VAMOS A BUSCAR LA ULTIMA FECHA DE PAGO DE LOS INTERESES,
              //YA QUE SE ESTA PERMITIENDO PAGAR INTERESES SIN DEUDAS

              $fecven = substr($per->getFecven(), 8, 2) . "-" . substr($per->getFecven(), 5, 2) . "-" . substr($per->getFecven(), 0, 4);
              $fecven = H::dateAdd('d', 1, $fecven, '+');
              $sql = "SELECT COUNT(FECULTPAG) as CUANTOS,MAX(FECULTPAG) as FECULTPAG FROM FCDECLAR A,FCFUENTESREC B
                        WHERE A.RIFCON='" . $per->getRifcon() . "'
                        AND A.FECVEN='$fecven'
                        AND A.FECDEC='" . $per->getFecdec() . "'
                        AND A.NUMREF='" . $per->getNumref() . "'
                        AND A.NUMERO='" . $per->getNumero() . "'
                        AND A.EDODEC='P'
                        AND A.FUEING=B.CODFUEGEN
                        AND B.CODFUE='" . $per->getFueing() . "'";

              if (H::BuscarDatos($sql, $regs)) {
                if ($regs[0]['fecultpag'] != "") {
                  $UltimaFecha = $regs[0]['fecultpag'];
                  $DeclarGen = $regs[0]['cuantos'] + substr($per->getNumdec(), strlen($regs[0]['cuantos']) + 1, 10 - strlen($regs[0]['cuantos']));
                } else {
                  $UltimaFecha = $per->getFecven();
                  $DeclarGen = $per->getNumdec();
                }
              } else {
                $UltimaFecha = $per->getFecven();
                $DeclarGen = $per->getNumdec();
              }

              $DiasMora = H::DateDiff("D", $UltimaFecha, $feccor);
              $ValordeDeuda = $per->getMondec() - $per->getAutliq();

              $sql = "Select A.*,B.*,C.*,D.Nomabr,(case when A.Modo='T' then -1 else coalesce(Valor,0) end) as Tasa From FCFuentesRec B, FcFuePre D, FCDefRecInt A LEFT OUTER JOIN FcRangosRec C ON (A.Codrec=C.CodRec)
                        		 Where A.CodRec = B.CodRec
                        		and B.CodFue='" . $per->getFueing() . "' and B.CodFueGen=D.CodFue
                        		And coalesce(C.DiasDesde,0)<=(case when A.Modo='T' then 0 else $DiasMora end)
                        		And coalesce(C.DiasHasta,0)>=(case when A.Modo='T' then 0 else $DiasMora end)";

              if (H::BuscarDatos($sql, $regs)) {

                $i = 0;
                while ($i < count($regs)) {
                  $ValordeMora = 0;
                  $ValordeINT = 0;
                  $LaFuente = $regs[$i]['codfuegen'];
                  $ElTipo = $regs[$i]['nomabr'];
                  $PorcMora = $regs[$i]['tasa'];

                  if ($regs[$i]['tipo'] == "R") {
                    if ($regs[$i]['modo'] == "M") {
                      $ValordeMora = $regs[$i]['valor'];
                    } else {
                      $ValordeMora = self::MontodeMoraFijo($ValordeDeuda, $DiasMora, $UltimaFecha, $PorcMora, $regs[$i]['periodo'], $regs[$i]['promedio'], $feccor);
                    }
                  } else {

                    if ($regs[$i]['modo'] == "M") {
                      $ValordeINT = $regs[$i]['valor'];
                    } else {
                      $ValordeINT = self::MontodeInteresFijo($ValordeDeuda, $DiasMora, $UltimaFecha, $PorcMora, $regs[$i]['periodo'], $regs[$i]['promedio'], $feccor);
                    }
                  }

                  $MoraAcum = $MoraAcum + $ValordeMora;
                  $InteresAcum = $InteresAcum + $ValordeINT;
                  if (round($ValordeMora, 2) <> 0) {
                    if (self::Generar_Mora($per, $ValordeMora, $ElTipo, $LaFuente, $DeclarGen) == 0)
                      return 0;
                  }
                  if (Round($ValordeINT, 2) <> 0) {
                    if (self::Generar_Interes($per, $ValordeINT, $ElTipo, $LaFuente, $DeclarGen) == 0)
                      return 0;
                  }
                  $i++;
                }
              }
            }
            $per->getMora($MoraAcum + round($InteresAcum, 2));
            $per->save();
          }
          $ii++;
        }
      }
      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function Generar_Mora($Declaraciones, $Monto, $Tipo, $Fuente, $DeclarGen) {
    try {
      $sql = "Select * From FcDeclar Where NumRef='" . $Declaraciones->getNumRef() . "' and NumDec='" . $Declaraciones->getNumDec() . "' and coalesce(Numero,' ')='" . $Declaraciones->getNumero() . "' and FueIng='" . $Fuente . "'";
      if (H::BuscarDatos($sql, $regs)) {
          
          $t= new Criteria();
          $t->add(FcdeclarPeer::NUMREF,$Declaraciones->getNumRef());
          $t->add(FcdeclarPeer::NUMDEC,$DeclarGen);
          $t->add(FcdeclarPeer::NUMERO,$Declaraciones->getNumero());
          $t->add(FcdeclarPeer::FUEING,$Fuente);
          $t->add(FcdeclarPeer::FECVEN,H::DateAdd("d", 1, $Declaraciones->getFecVen(), '+'));
          $t->add(FcdeclarPeer::EDODEC,'V');
          FcdeclarPeer::doDelete($t);
          
          
        $fcdeclar = new Fcdeclar();
        $fcdeclar->setNumDec($DeclarGen);
        $fcdeclar->setNumero($Declaraciones->getNumero());
        $fcdeclar->setFecVen(H::DateAdd("d", 1, $Declaraciones->getFecVen(), '+'));
        $fcdeclar->setFueing($Fuente);
        $fcdeclar->setFecDec($Declaraciones->getFecDec());
        $fcdeclar->setRifCon($Declaraciones->getRifCon());
        $fcdeclar->setTipo($Tipo);
        $fcdeclar->setNumRef($Declaraciones->getNumRef());
        $fcdeclar->setNombre("RECARGO POR MORA " . $Declaraciones->getNombre());
        $fcdeclar->setMonDec($Monto);
        $fcdeclar->setEdoDec("V");
        $fcdeclar->setmora(0);
        $fcdeclar->setProntoPg(0);
        $fcdeclar->setAutLiq(0);
        $fcdeclar->setFundec($Declaraciones->getFundec());
        $fcdeclar->setNomCon($Declaraciones->getNomCon());
        $fcdeclar->setAnoDec($Declaraciones->getAnoDec());
        $fcdeclar->setOtro($Declaraciones->getOtro());
        $fcdeclar->setExipaguni($Declaraciones->getExipaguni());
        $fcdeclar->save();
      } else {
        $fcdeclar = new Fcdeclar();
        $fcdeclar->setNumDec($DeclarGen);
        $fcdeclar->setNumero($Declaraciones->getNumero());
        $fcdeclar->setFecVen(H::DateAdd("d", 1, $Declaraciones->getFecVen(), '+'));
        $fcdeclar->setFueing($Fuente);
        $fcdeclar->setFecDec($Declaraciones->getFecDec());
        $fcdeclar->setRifCon($Declaraciones->getRifCon());
        $fcdeclar->setTipo($Tipo);
        $fcdeclar->setNumRef($Declaraciones->getNumRef());
        $fcdeclar->setNombre("RECARGO POR MORA " . $Declaraciones->getNombre());
        $fcdeclar->setMonDec($Monto);
        $fcdeclar->setEdoDec("V");
        $fcdeclar->setmora(0);
        $fcdeclar->setProntoPg(0);
        $fcdeclar->setAutLiq(0);
        $fcdeclar->setFundec($Declaraciones->getFundec());
        $fcdeclar->setNomCon($Declaraciones->getNomCon());
        $fcdeclar->setAnoDec($Declaraciones->getAnoDec());
        $fcdeclar->setOtro($Declaraciones->getOtro());
        $fcdeclar->setExipaguni($Declaraciones->getExipaguni());
        $fcdeclar->save();
      }

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function Generar_Interes($Declaraciones, $Monto, $Tipo, $Fuente, $DeclarGen) {
    try {
      $sql = "Select * From FcDeclar Where NumRef='" . $Declaraciones->getNumRef() . "' and NumDec='" . $Declaraciones->getNumDec() . "' and coalesce(Numero,' ')='" . $Declaraciones->getNumero() . "' and FueIng='" . $Fuente . "'";
      if (H::BuscarDatos($sql, $regs)) {
          
         $t= new Criteria();
          $t->add(FcdeclarPeer::NUMREF,$Declaraciones->getNumRef());
          $t->add(FcdeclarPeer::NUMDEC,$DeclarGen);
          $t->add(FcdeclarPeer::NUMERO,$Declaraciones->getNumero());
          $t->add(FcdeclarPeer::FUEING,$Fuente);
          $t->add(FcdeclarPeer::FECVEN,H::DateAdd("d", 1, $Declaraciones->getFecVen(), '+'));
          $t->add(FcdeclarPeer::EDODEC,'V');
          FcdeclarPeer::doDelete($t);
          
        $fcdeclar = new Fcdeclar();
        $fcdeclar->setNumDec($DeclarGen);
        $fcdeclar->setNumero($Declaraciones->getNumero());
        $fcdeclar->setFecVen(H::DateAdd("d", 1, $Declaraciones->getFecVen(), '+'));
        $fcdeclar->setFueing($Fuente);
        $fcdeclar->setFecDec($Declaraciones->getFecDec());
        $fcdeclar->setRifCon($Declaraciones->getRifCon());
        $fcdeclar->setTipo($Tipo);
        $fcdeclar->setNumRef($Declaraciones->getNumRef());
        $fcdeclar->setNombre("INTERESES POR MORA " . $Declaraciones->getNombre());
        $fcdeclar->setMonDec($Monto);
        $fcdeclar->setEdoDec("V");
        $fcdeclar->setmora(0);
        $fcdeclar->setProntoPg(0);
        $fcdeclar->setAutLiq(0);
        $fcdeclar->setFundec($Declaraciones->getFundec());
        $fcdeclar->setNomCon($Declaraciones->getNomCon());
        $fcdeclar->setAnoDec($Declaraciones->getAnoDec());
        $fcdeclar->setOtro($Declaraciones->getOtro());
        $fcdeclar->setExipaguni($Declaraciones->getExipaguni());
        $fcdeclar->save();
      } else {
        $fcdeclar = new Fcdeclar();
        $fcdeclar->setNumDec($DeclarGen);
        $fcdeclar->setNumero($Declaraciones->getNumero());
        $fcdeclar->setFecVen(H::DateAdd("d", 1, $Declaraciones->getFecVen(), '+'));
        $fcdeclar->setFueing($Fuente);
        $fcdeclar->setFecDec($Declaraciones->getFecDec());
        $fcdeclar->setRifCon($Declaraciones->getRifCon());
        $fcdeclar->setTipo($Tipo);
        $fcdeclar->setNumRef($Declaraciones->getNumRef());
        $fcdeclar->setNombre("INTERESES POR MORA " . $Declaraciones->getNombre());
        $fcdeclar->setMonDec($Monto);
        $fcdeclar->setEdoDec("V");
        $fcdeclar->setmora(0);
        $fcdeclar->setProntoPg(0);
        $fcdeclar->setAutLiq(0);
        $fcdeclar->setFundec($Declaraciones->getFundec());
        $fcdeclar->setNomCon($Declaraciones->getNomCon());
        $fcdeclar->setAnoDec($Declaraciones->getAnoDec());
        $fcdeclar->setOtro($Declaraciones->getOtro());
        $fcdeclar->setExipaguni($Declaraciones->getExipaguni());
        $fcdeclar->save();
      }

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function MontodeInteresFijo($MontoDeuda, $Dias, $FechaVen, $Tasa, $Tipo, $Prom, $feccor) {
    $MontodeInteresFijo = 0;
    $Meses = 1;
    if ($Tasa == -1)
      $Tasa = round(self::CalcularTasaPromedio($Tipo, $Prom, $FechaVen, $feccor), 2);

    if ($Meses > 0)
      $MontodeInteresFijo = ($MontoDeuda * $Tasa / 100);

    return $MontodeInteresFijo;
  }

  public static function MontodeMoraFijo($MontoDeuda, $Dias, $FechaVen, $Tasa, $Tipo, $Prom, $feccor) {
    $MontodeMoraFijo = 0;
    $Meses = 1;
    if ($Tasa == -1)
      $Tasa = round(self::CalcularTasaPromedio($Tipo, $Prom, $FechaVen, $feccor), 2);


    if ($Meses > 0)
      $MontodeMoraFijo = ($MontoDeuda * $Tasa / 100) * $Meses;

    return $MontodeMoraFijo;
  }

  public static function CalcularTasaPromedio($tipo, $Prom, $Fecha_Referencia, $feccor) {
    if ($Prom == "S") {
      $cuanto = 3;
      // dd/mm/yyyy
      $mes = substr($Fecha_Referencia, 5, 2);
//yyyy-mm-dd
      switch ($mes) {
        case '01':
        case '02':
        case '03':
          $sql = "Select coalesce(Sum(TasPor),0) as suma from FCTasBan where TasAno='" . substr($Fecha_Referencia, 0, 4) . "'
			                   and TasMes>=(case when '" . $tipo . "'='A' then 1 else 10 end ) and TasMes<= (case when '" . $tipo . "'='A' then 3 else 12 end)";

          if (H::BuscarDatos($sql, $regs)) {
            return $CalcularTasaPromedio = $regs[0]["suma"] / $cuanto;
          } else {
            return 0;
          }
          break;

        case '04':
        case '05':
        case '06':
          $sql = "Select coalesce(Sum(TasPor),0) as suma from FCTasBan where TasAno='" . substr($Fecha_Referencia, 0, 4) . "'
			                   and TasMes>=(case when '" . $tipo . "'='A' then 4 else 1 end ) and TasMes<= (case when '" . $tipo . "'='A' then 6 else 3 end)";

          if (H::BuscarDatos($sql, $regs)) {
            return $CalcularTasaPromedio = $regs[0]["suma"] / $cuanto;
          } else {
            return 0;
          }
          break;

        case '07':
        case '08':
        case '09':
          $sql = "Select coalesce(Sum(TasPor),0) as suma from FCTasBan where TasAno='" . substr($Fecha_Referencia, 0, 4) . "'
			                   and TasMes>=(case when '" . $tipo . "'='A' then 7 else 4 end ) and TasMes<= (case when '" . $tipo . "'='A' then 9 else 6 end)";

          if (H::BuscarDatos($sql, $regs)) {
            return $CalcularTasaPromedio = $regs[0]["suma"] / $cuanto;
          } else {
            return 0;
          }
          break;


        case '10':
        case '11':
        case '12':
          $sql = "Select coalesce(Sum(TasPor),0) as suma from FCTasBan where TasAno='" . substr($Fecha_Referencia, 0, 4) . "'
			                 and TasMes>=(case when '" . $tipo . "'='A' then 10 else 7 end ) and TasMes<= (case when '" . $tipo . "'='A' then 12 else 9 end)";

          if (H::BuscarDatos($sql, $regs)) {
            return $CalcularTasaPromedio = $regs[0]["suma"] / $cuanto;
          } else {
            return 0;
          }
          break;

        default:
          return 0;
      }
    } else {
      if (substr($Fecha_Referencia, 0, 4) <= '2007 ') {
        $FechaDes = (substr($Fecha_Referencia, 5, 2) + 1) . "/" . substr($Fecha_Referencia, 0, 4);
        $FechaHas = (substr($feccor, 5, 2) - 1) . "/" . substr($feccor, 0, 4);
      } else {

        $FechaDes = substr($Fecha_Referencia, 5, 2) . "/" . substr($Fecha_Referencia, 0, 4);
        $FechaHas = (substr($feccor, 5, 2) - 1) . "/" . substr($feccor, 0, 4);
      }

      $sql = "Select coalesce(Sum(TasPor),0) as suma from FCTasBan where
			   		   to_date(lpad(rtrim(ltrim(to_char(tasmes,'99'))),2,'0')||'/'||tasano,'mm/yyyy')>=to_date('" . $FechaDes . "','mm/yyyy')  and
			   		   to_date(lpad(rtrim(ltrim(to_char(tasmes,'99'))),2,'0')||'/'||tasano,'mm/yyyy')<=to_date('" . $FechaHas . "','mm/yyyy')  ";

      if (H::BuscarDatos($sql, $regs)) {
        return $CalcularTasaPromedio = $regs[0]["suma"];
      } else {
        return 0;
      }
    }
  }

  public static function Grabar_Facpicsollic_Negacion($fcsollic) {
    try {
      $correlativo = "";
      $c = new Criteria();
      $c->add(FcsollicPeer :: NUMSOL, $fcsollic->getNumsol());
      $fcsollic_up = FcsollicPeer :: doSelectOne($c);
      if (count($fcsollic_up) > 0) {

        /* ACTUALIZAMOS FCSOLLIC */
        $fcsollic_up->setStalic($fcsollic->getOperacion());
        $fcsollic_up->save();
        /* FIN ACTUALIZAR */

        $c = new Criteria();
        $c->addDescendingOrderByColumn(FcsolnegPeer :: NUMNEG);
        $reg = FcsolnegPeer :: doSelectOne($c);
        if (count($reg) > 0)
          $correlativo = str_pad(trim($reg->getNumneg() + 1), 10, '0', STR_PAD_LEFT);
        else
          $correlativo = str_pad(1, 10, '0', STR_PAD_LEFT);

        $Fcsolneg_new = new Fcsolneg();
        $Fcsolneg_new->setNumsol($fcsollic->getNumsol());
        $Fcsolneg_new->setNumneg($correlativo);
        $Fcsolneg_new->setFunneg($fcsollic->getFunneg());
        $Fcsolneg_new->setTomon($fcsollic->getTomon());
        $Fcsolneg_new->setNumeron($fcsollic->getNumeron());
        $Fcsolneg_new->setFolion($fcsollic->getFolion());
        $Fcsolneg_new->setResolu($fcsollic->getResolu());
        $Fcsolneg_new->setMotneg($fcsollic->getMotneg());
        $Fcsolneg_new->setFecneg($fcsollic->getFecneg());
        $Fcsolneg_new->save();
      }

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function SalvarFacrecpag($clasemodelo, $grid, $gridfp, $gridscto, &$msjuno, &$msjdos) {
    $k = 0;
    $acum = 0;
    $id = $clasemodelo->getId();
    $pagliq=H::getConfApp2('pagliq', 'hacienda', 'facrecpag');
    if ($pagliq=='S')
    {
        if ($id!="")
        {
            $x = $gridfp[0];
              while ($k < count($x)) {
                $k++;
              }
              self::SalvarMovPagos($clasemodelo, $gridfp, $gridscto, $grid, $msjuno, $msjdos, $k);
        }
    }else {
            if (!($id)) {
              $x = $gridfp[0];
              while ($k < count($x)) {
                $k++;
              }
              self::SalvarMovPagos($clasemodelo, $gridfp, $gridscto, $grid, $msjuno, $msjdos, $k);
            }
      }
    if ($msjuno == -1) {
     if ($id=="") {
      self::SalvarFacrecpagMaestro($clasemodelo, $gridfp);
      self::SalvarFacrecpagDescto($clasemodelo, $gridscto);
     }
      if ($pagliq=='S')
      {
        if ($id!="")
          self::SalvarFacrecpagFormPago($clasemodelo, $gridfp, $acum);
      }else {
          self::SalvarFacrecpagFormPago($clasemodelo, $gridfp, $acum);
      }
      if ($id=="") {
        self::SalvarFacrecpagDetalles($clasemodelo, $grid, $acum);
        self::GenerarCredito($clasemodelo, $grid, $acum);
      }
    }
    return -1;
  }

  public static function SalvarMovPagos($clasemodelo, $gridfp, $gridscto, $grid, &$msjuno, &$msjdos, $cant) {
    try {
      $msjuno = -1;
      $msjdos = "";
      // solo se esta manejando Descuento
      $z = $gridscto[0];
      $k = 0;
      $montodes = 0;
      while ($k < count($z)) {
        $montodes = $montodes + $z[$k]->getMonto();
        $k++;
      }
      $montodes = H::toFloat($montodes / $cant);
      //Recorrido del Grid de Formas de Pagos
      $x = $gridfp[0];
      $j = 0;
      while ($j < count($x)) {
        $c = new Criteria();
        $c->add(FctippagPeer::TIPPAG, $x[$j]->getTippag());
        $fctippag = FctippagPeer:: doSelectOne($c);
        if ($fctippag) {
          if ($fctippag->getGenmov() == 'S') {
            //Generación de correlativo de Referencia de Ingreso
            if (Herramientas::getVerCorrelativo('coring', 'cidefniv', $r)) {
              $encontrado = false;
              while (!$encontrado) {
                $numero = str_pad($r, 8, '0', STR_PAD_LEFT);
                $c = new Criteria();
                $c->add(CiregingPeer::REFING, $numero);
                $resul = CiregingPeer::doSelectOne($c);
                if ($resul) {
                  $r = $r + 1;
                } else {
                  $encontrado = true;
                }
              }
              $clasemodelo->setRefing($numero);
            }
            $clasemodelo->setNrodep($x[$j]->getNrodet());
            H::getSalvarCorrelativo('coring', 'cidefniv', 'refing', $r, $msg);
            self::GenerarComprobante($clasemodelo, $grid[0], $x[$j], $msjuno, $msjdos, $montodes);
            if ($msjuno == -1) {
              //Ingresos
              self::SalvarIngreging($clasemodelo, $grid[0], $x[$j], $montodes);
            } else {
              break;
            }
          }
        }
        $j++;
      }
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function GenerarComprobante(&$clasemodelo, $z, $x, &$msjuno, &$msjdos, $montodes) {
    //$msjuno='';
    //$msjdos='';
    $mtoing = $x->getMonpag();
    $dateFormat = new sfDateFormat('es_VE');
    $mtototal = 0;
    $confcorcom = sfContext::getInstance()->getUser()->getAttribute('confcorcom');
    $fechainicio = date('Y') . '-01-01';
    $dia = H::dateDiff('d', $fechainicio, $clasemodelo->getFeccor());


    $reftra = $clasemodelo->getRefing();
    $cuentaporpagarrendicion = "";
    $codigocuenta = "";
    $tipo = "";
    $des = "";
    $monto = "";

    $codigocuentas = "";
    $tipo1 = "";
    $desc = "";
    $monto1 = "";

    $codigocuenta2 = "";
    $tipo2 = "";
    $des2 = "";
    $monto2 = "";

    $cuentas = "";
    $tipos = "";
    $montos = "";
    $descr = "";


    $k = 0;
    $previsto = true;
    while ($k < count($z)) {
      if ($z[$k]->getCheck() && $z[$k]->getStsdec() != "L") {
        $c = new Criteria();
        $c->add(FcfueprePeer::CODFUE, $z[$k]->getFueing());
        $fcfuepre = FcfueprePeer::doSelectOne($c);
        if ($fcfuepre) {

          //Verificación del código presupuestario
          if ($fcfuepre->getCodprei()) {

            if (H::toFloat($z[$k]->getMontopagcon()) > 0 && H::toFloat($mtoing) > 0) {
              $r = new Criteria();
              $r->addJoin(FcdefdescPeer::CODDES, FcrangosdesPeer::CODDES);
              $sql = "FCRangosDes.DiasDesde<=" . (int) $dia . " And FCRangosDes.DiasHasta>=" . (int) $dia . "";
              $r->add(FcrangosdesPeer::DIASDESDE, $sql, Criteria::CUSTOM);
              $r->add(FcdefdescPeer::CODFUE, $z[$k]->getFueing());
              $r->add(FcdefdescPeer::AUTO, 'S');
              $fcdefdes = FcrangosdesPeer::doSelectOne($r);
              if ($fcdefdes && $clasemodelo->getRecaudo() == 'S') {
                $pagcont = $z[$k]->getMontopagcon() - ($z[$k]->getMontopagcon() * $fcdefdes->getValor() / 100);
              } else {
                $pagcont = $z[$k]->getMontopagcon();
              }
              $c = new Criteria();
              $c->add(CideftitPeer::CODPRE, $fcfuepre->getCodprei());
              $regis = CideftitPeer::doSelectOne($c);
              if ($regis) {
                if (H::toFloat($mtoing) >= H::toFloat($pagcont)) {
                  $mtoing = H::toFloat($mtoing) - H::toFloat($pagcont);
                  $mtototal = H::toFloat($pagcont);
                } else {
                  $mtototal = H::toFloat($mtoing);
                  $mtoing = 0;
                }

                $cuenta = H::iif(!is_null($regis->getCodcta()), $regis->getCodcta(), '');
                $b = new Criteria();
                $b->add(ContabbPeer::CODCTA, $cuenta);
                $regis2 = ContabbPeer::doSelectOne($b);
                if ($regis2) {
                  $moncau = $mtototal;
                  $codigocuenta = $regis2->getCodcta();
                  $tipo = 'C';
                  $des = "";
                  $monto = $moncau;
                } else {
                  $msjuno = 759;
                  $msjdos = $fcfuepre->getCodprei();
                  return true;
                }
              } else {
                $msjuno = 761;
                $msjdos = $fcfuepre->getCodprei();

                return true;
              }
              if ($k == 0) {
                $codigocuentas = $codigocuenta;
                $desc = $des;
                $tipo1 = $tipo;
                $monto1 = $monto;
              } else {
                $codigocuentas = $codigocuentas . '_' . $codigocuenta;
                $desc = $desc . '_' . $des;
                $tipo1 = $tipo1 . '_' . $tipo;
                $monto1 = $monto1 . '_' . $monto;
              }
            }
          } else {
            $msjuno = 761;
            $msjdos = $fcfuepre->getCodprei();
            return true;
          }
        } else {
          $msjuno = 763;
          $msjdos = $z[$k]->getFueing();
          return true;
        }
      }
      $k++;
    }

    //Obtener cta asociada al banco
    $codigo = "";
    $codigocuenta2 = $x->getCtaban();
    $b1 = new Criteria();
    $b1->add(TsdefbanPeer::NUMCUE, $codigocuenta2);
    $regis3 = TsdefbanPeer::doSelectOne($b1);
    if ($regis3) {
      $codigo = $regis3->getCodcta();
    }
    //Obtener la descripcion del codigo de cuenta
    $b2 = new Criteria();
    $b2->add(ContabbPeer::CODCTA, $codigo);
    $regis4 = ContabbPeer::doSelectOne($b2);
    if ($regis4) {
      $nomcta = $regis4->getDescta();
      $tipo2 = 'D';
      $des2 = $regis4->getDescta();
      $monto2 = $x->getMonpag();
    } else {
      $msjuno = 760; //'La Cuenta Contable asociada a Cuenta Bancaria no existe';
      $msjdos = $codigo;
      return true;
    }

    $cuentas = $codigo . '_' . $codigocuentas;
    $descr = $des2 . '_' . $desc;
    $tipos = $tipo2 . '_' . $tipo1;
    $montos = $monto2 . '_' . $monto1;

    $arrecuentas = split("_", $cuentas);
    $arretipos = split("_", $tipos);
    $arremontos = split("_", $montos);
    $yapaso = array();
    $dondesta = array();
    $t = 1;

    //OJO
    foreach ($arrecuentas as $cta) {
      $dondesta = array_keys($yapaso, $cta);

      $contd = 0;
      $contc = 0;
      $acumd = 0;
      $acumc = 0;
      $sumdeb = 0;
      $sumcre = 0;

      if (count($dondesta) == 0) {
        $yapaso[] = $cta;
        // buscamos todas las posiciones de esa cta.
        $posiciones = array();
        $posiciones = array_keys($arrecuentas, $cta); //arreglo con las posiciones

        $contd = 0;
        $contc = 0;
        $acumd = 0;
        $acumc = 0;
        $sumdeb = 0;
        $sumcre = 0;

        foreach ($posiciones as $pos) {
          if ($arretipos[$pos] == 'D') {  //DEBITO
            $acumd = $acumd + Herramientas::toFloat($arremontos[$pos]);
            $contd = $contd + 1;
          } else {
            $acumc = $acumc + Herramientas::toFloat($arremontos[$pos]);
            $contc = $contc + 1;
          }
        }
      } // foreach 2

      if ($contd >= 1) {
        $new_ctas[] = $cta;
        $new_descs[] = H::getX('codcta', 'Contabb', 'Descta', $cta);
        $new_movs[] = 'D';
        $new_montos[] = $acumd;
      }
      if ($contc >= 1) {
        $new_ctas[] = $cta;
        $new_descs[] = H::getX('codcta', 'Contabb', 'Descta', $cta);
        $new_movs[] = 'C';
        $new_montos[] = $acumc;
      }
    }
    //} // foreach 1

    $i = 0;
    while ($i <= (count($new_ctas) - 1)) {
      if ($new_ctas[$i] != "") {
        if ($new_movs[$i] == 'D') {
          $sumdeb = $sumdeb + $new_montos[$i];
        } else {
          $sumcre = $sumcre + $new_montos[$i];
        }
      }
      $i++;
    }

    if (H::toFloat($sumdeb) != H::toFloat($sumcre)) {
      $msjuno = 764;
      return true;
    }

    if ($confcorcom == 'N') {
      $numerocomprob = $clasemodelo->getRefing();
    } else {
      $numerocomprob = Comprobante::Buscar_Correlativo($x->getFecdet());
    }
    $clasemodelo->setNumcom($numerocomprob);
    $contabc = new Contabc();
    $contabc->setNumcom($numerocomprob);
    $contabc->setReftra($reftra);
    $contabc->setFeccom($x->getFecdet());
    $contabc->setDescom($clasemodelo->getDespag() . " - " . $clasemodelo->getNomcon());
    if ($sumdeb == $sumcre) {
      $contabc->setStacom('D');
    } else {
      $contabc->setStacom('E');
    }
    $contabc->setTipcom(null);
    $contabc->setMoncom(H::FormatoMonto($sumdeb));
    $loguse = sfContext::getInstance()->getUser()->getAttribute('loguse');
    $contabc->setLoguse($loguse);
    $contabc->save();

    $i = 0;
    while ($i <= (count($new_ctas) - 1)) {
      if ($new_ctas[$i] != "") {
        $contabc1 = new Contabc1();
        $contabc1->setNumcom($numerocomprob);
        $contabc1->setFeccom($x->getFecdet());
        $contabc1->setCodcta($new_ctas[$i]);
        $numasi = $i + 1;
        $contabc1->setNumasi($numasi);
        $contabc1->setRefasi($reftra);
        $contabc1->setDesasi($new_descs[$i]);
        if ($new_movs[$i] == 'D') {
          $contabc1->setDebcre('D');
          $contabc1->setMonasi(H::FormatoMonto($new_montos[$i]));
        } else {
          $contabc1->setDebcre('C');
          $contabc1->setMonasi(H::FormatoMonto($new_montos[$i]));
        }
        $contabc1->save();
      }
      $i++;
    }

    return -1;
  }

  public static function SalvarIngreging($clasemodelo, $grid, $x, $montodes) {

    $moning = 0;
    $montot = 0;
    $cireging = new Cireging();
    $ano = substr($x->getFecdet(), 0, 4);
    $cireging->setDesing($clasemodelo->getDespag());
    $cireging->setFecing($x->getFecdet());
    $cireging->setFecdep($x->getFecdet());
    $cireging->setRefing($clasemodelo->getRefing());
    $cireging->setNumcom($clasemodelo->getNumcom());
    //  $cireging->setCodtip();
    $cireging->setTipmov($x->getTippag());
    $cireging->setRifcon($clasemodelo->getRifcon());
    $cireging->setCtaban($x->getCtaban());
    $cireging->setNumdep($clasemodelo->getNrodep());
    $cireging->setAnoing($ano);
    $cireging->setStaing('A');


    $previsto = true;
    //Detalle del ingreso
    $graboing = self::salvarImping($clasemodelo, $cireging, $grid, $previsto, H::toFloat($x->getMonpag()), $moning,$montot);
    $cireging->setMoning(H::FormatoMonto($moning));
    $cireging->setMontot(H::FormatoMonto($montot));
    $cireging->setMondes(H::FormatoMonto($montodes));

    $esta = H::getX_vacio('rifcon', 'ciconrep', 'nomcon', $clasemodelo->getRifcon());
    if ($esta == '') {
      $c = new Criteria();
      $c->add(FcconrepPeer :: RIFCON, trim($clasemodelo->getRifcon()));
      $fcconrep2 = FcconrepPeer :: doSelectOne($c);
      if (count($fcconrep2) > 0) {
        $ciconrep = new Ciconrep();
        $ciconrep->setRifcon($clasemodelo->getRifcon());
        $ciconrep->setNomcon($fcconrep2->getNomcon());
        $ciconrep->setNaccon($fcconrep2->getNaccon());
        $ciconrep->setTipcon($fcconrep2->getTipcon());
        $ciconrep->setRepcon('C');
        $ciconrep->save();
      }
    }
    if (!$previsto) {   //Si es falso
      $cireging->setPrevis('N');
    }
    $cireging->save();
    $grabodet = self::generar_movimientos_segun_libros($cireging);
  }

  public static function salvarImping($clasemodelo, $cireging, $x, &$previsto=true, $montoing, &$moning, &$montot) {
    $fechainicio = date('Y') . '-01-01';
    $dia = H::dateDiff('d', $fechainicio, $clasemodelo->getFeccor());
    $j = 0;
    $previsto = true;
    $descuento = 0;
    while ($j < count($x)) {
      if ($x[$j]->getCheck() && $x[$j]->getStsdec() != 'L') {
        $c = new Criteria();
        $c->add(FcfueprePeer::CODFUE, $x[$j]->getFueing());
        $fcfuepre = FcfueprePeer::doSelectOne($c);
        if ($fcfuepre) {

          //Verificación del código presupuestario
          if ($fcfuepre->getCodprei()) {
            if (H::toFloat($x[$j]->getMontopagcon()) > 0 && H::toFloat($montoing) > 0) {
              $ciimping = new Ciimping();
              $ciimping->setCodpre($fcfuepre->getCodprei());
              $ciimping->setRefing($cireging->getRefing());
              $ciimping->setFecing($cireging->getFecing());
              $ciimping->setMonaju(0);
              $ciimping->setStaimp('A');
              $r = new Criteria();
              $r->addJoin(FcdefdescPeer::CODDES, FcrangosdesPeer::CODDES);
              $sql = "FCRangosDes.DiasDesde<=" . (int) $dia . " And FCRangosDes.DiasHasta>=" . (int) $dia . "  And (CASE WHEN FCDefDesc.Limita='S' THEN FCDefDesc.Limita ELSE '" . $clasemodelo->getTodomarcado() . "' END)='" . $clasemodelo->getTodomarcado() . "'";
              $r->add(FcrangosdesPeer::DIASDESDE, $sql, Criteria::CUSTOM);
              $r->add(FcdefdescPeer::CODFUE, $x[$j]->getFueing());
              $r->add(FcdefdescPeer::AUTO, 'S');
              $fcdefdes = FcrangosdesPeer::doSelectOne($r);
              if ($fcdefdes && $clasemodelo->getRecaudo() == 'S') {
                $descuento = (H::toFloat($x[$j]->getMontopagcon()) * $fcdefdes->getValor() / 100);
                $pagcont = H::toFloat($x[$j]->getMontopagcon()) - $descuento;
              } else {
                $pagcont = $x[$j]->getMontopagcon();
                $descuento = 0;
              }

              if (H::toFloat($montoing) >= H::toFloat($pagcont)) {
                $montoing = H::toFloat($montoing) - H::toFloat($pagcont);
                $ciimping->setMontot(H::toFloat($pagcont));
                $ciimping->setMoning($x[$j]->getMontopagcon());
              } else {
                $ciimping->setMoning($x[$j]->getMontopagcon());
                $ciimping->setMontot(H::FormatoMonto($montoing));
                $montoing = 0;
              }

              $ciimping->setMonrec(0);
              $ciimping->setMondes(H::FormatoMonto($descuento));
              $ciimping->setMoning(H::toFloat($ciimping->getMontot()) + H::toFloat($descuento));
              $moning = $moning + H::toFloat($ciimping->getMoning());
              $montot = $montot + H::toFloat($ciimping->getMontot());

              //Buscar si es previsto
              if (!(self::Es_Previsto($fcfuepre->getCodprei(), $montoing))) {
                $previsto = false;
              }
              $ciimping->save();
            }
          }
        }
      }
      $j++;
    }
  }

  public static function Es_Previsto($codpre, $moning) {
    $PeriodoAsignacion = "00";
    $feccie = substr(Herramientas::getX('Codemp', 'Cidefniv', 'feccie', '001'), 0, 4);
    $sql = "select sum(monasi) as monasi, sum(monprc) as monprc from ciasiini where codpre like '$codpre%' and anopre='$feccie' and perpre='$PeriodoAsignacion' ";

    $valor = false;
    if (Herramientas :: BuscarDatos($sql, $result)) {
      if (($moning + $result[0]['monprc']) <= $result[0]['monasi']) {
        $valor = true;
      }
    }
    return $valor;
  }

  public static function generar_movimientos_segun_libros($cireging) {
    $grabocontabilidad = true;

    $tsmovlib = new Tsmovlib();
    $tsmovlib->setNumcue($cireging->getCtaban());
    $tsmovlib->setReflib($cireging->getNumdep());
    $tsmovlib->setCedrif($cireging->getRifcon());
    if ($cireging->getFecdep() != "") {
      $tsmovlib->setFeclib($cireging->getFecdep());
    } else {
      $tsmovlib->setFeclib($cireging->getFecing());
    }
    $tsmovlib->setFecing($cireging->getFecing());
    $tsmovlib->setTipmov($cireging->getTipmov());
    $tsmovlib->setMonmov(H::FormatoMonto($cireging->getMontot()));
    $tsmovlib->setCodcta($cireging->getCtaban());
    $tsmovlib->setDeslib($cireging->getDesing());
    $tsmovlib->setStatus('C');
    $tsmovlib->setStacon('N');

    if ($grabocontabilidad) {
      $tsmovlib->setStatus('C');   //Contabilizado
      $tsmovlib->setFeccom($cireging->getFecing());
      $tsmovlib->setNumcom($cireging->getNumcom());  //FALTA
    } else {
      $tsmovlib->setStatus('N');
      $tsmovlib->setNumcom('');
      $tsmovlib->setCodcta('');
      $tsmovlib->setFeccom('NULO');
    }
    $tsmovlib->save();
  }

//Fin generar_movimientos_segun_libros()

  public static function SalvarFacrecpagDescto($clasemodelo, $gridscto) {
    try {
      $x = $gridscto[0];
      $j = 0;
      if ($clasemodelo->getSaldo5() != $clasemodelo->getTotalpag()) {
        while ($j < count($x)) {
          if ($x[$j]->getMonto() != 0) {
            $c = new Criteria();
            $c->add(FcrecdespagPeer :: NUMPAG, $clasemodelo->getNumpag());
            $per = FcrecdespagPeer :: doSelect($c);

            if (!$per) {
              $x[$j]->setNumpag($clasemodelo->getNumpag());
            }
            $x[$j]->save();
          }
          $j++;
        }
      }
      $z = $gridscto[1];
      $j = 0;
      while ($j < count($z)) {
        $z[$j]->delete();
        $j++;
      }
      return -1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function nuevoRubro($annio, $fuente, &$nuevorubro) {
    switch ($fuente) {
      Case '01':
        $nuevorubro = '47';
        break;
      Case '02':
        $nuevorubro = '49';
        break;
      Case '03':
        $nuevorubro = '53';
        break;
      Case '37':
        $nuevorubro = '48';
        break;
    }
  }

  public static function SalvarFacrecpagDetalles($clasemodelo, $grid, $acum) {
    try {
      $fechainicio = date('Y') . '-01-01';
      $dia = H::dateDiff('d', $fechainicio, $clasemodelo->getFeccor());
      $nuevorubro = '';
      $x = $grid[0];
      $j = 0;
      while ($j < count($x)) {
        $annio = substr($x[$j]->getFecven(), 0, 4);
        if ($x[$j]->getCheck()) {
          $r = new Criteria();
          $r->addJoin(FcdefdescPeer::CODDES, FcrangosdesPeer::CODDES);
          $sql = "FCRangosDes.DiasDesde<=" . (int) $dia . " And FCRangosDes.DiasHasta>=" . (int) $dia . "";
          $r->add(FcrangosdesPeer::DIASDESDE, $sql, Criteria::CUSTOM);
          $r->add(FcdefdescPeer::CODFUE, $x[$j]->getFueing());
          $r->add(FcdefdescPeer::AUTO, 'S');
          $fcdefdes = FcrangosdesPeer::doSelectOne($r);
          if ($fcdefdes) {
            $pagcont = $x[$j]->getMontopagcon() - ($x[$j]->getMontopagcon() * $fcdefdes->getValor() / 100);
          } else {
            $pagcont = $x[$j]->getMontopagcon();
          }
          //FCDECPAG
          $c = new Criteria();
          $c->add(FcdecpagPeer::NUMPAG, $clasemodelo->getNumpag());
          $c->add(FcdecpagPeer::NUMERO, $x[$j]->getNumero());
          $c->add(FcdecpagPeer::NUMDEC, $x[$j]->getNumdec());
          $c->add(FcdecpagPeer::FECVEN, $x[$j]->getFecven());
          $c->add(FcdecpagPeer::NUMREF, $x[$j]->getNumref());
          $fcdecpag = FcdecpagPeer :: doSelect($c);
          if (!$fcdecpag) {
            $fcdecpag = new Fcdecpag();
            $fcdecpag->setNumpag($clasemodelo->getNumpag());
            $fcdecpag->setFecven($x[$j]->getFecven());
            $fcdecpag->setNumdec($x[$j]->getNumdec());
            $fcdecpag->setNumero($x[$j]->getNumero());
            $fcdecpag->setNumRef($x[$j]->getNumref());
            if ($acum > 0) {
              if ($acum >= $pagcont) {
                $fcdecpag->setStsdec('L');
              }
              $acum = $acum - $pagcont;
            }
            $fcdecpag->setFueing($x[$j]->getFueing());
            $fcdecpag->setMondec($x[$j]->getMondec());
            $fcdecpag->setMonpag($x[$j]->getMontopagcon());
            $fcdecpag->save();
          }

          $x[$j]->setAutliq($x[$j]->getMontopagcon());
          $x[$j]->setNumpag($clasemodelo->getNumpag());
          $x[$j]->setEdodec('P');
          if ($x[$j]->getMontopagcon() < $x[$j]->getMondec()) {
            $x[$j]->setNombre('Abono a ' . $x[$j]->getNombre());
          }
          $x[$j]->setFecultpag($clasemodelo->getFecpag());
          self::AcumularPago($x[$j]->getFueing(), $x[$j]->getMontopagcon());
          if ($x[$j]->getMontopagcon() <> 0) {
              $cq=$x[$j]->getMontopagcon();
              $cd=$x[$j]->getMontopag();
            if ($x[$j]->getMontopagcon() <> $x[$j]->getMontopag()) {
              self::CrearDeudaAjuste($clasemodelo, $x[$j]);
            }
          }
          $x[$j]->save();
        }
        $j++;
      }

      $z = $grid[1];
      $j = 0;
      while ($j < count($z)) {
        $z[$j]->delete();
        $j++;
      }

      return -1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function CrearDeudaAjuste($clasemodelo, $grid) {
    $valor1 = $grid->getMontopagcon();
    $valor2 = $grid->getMontopag();
    $fecven = $grid->getFecven();
    $MontoAjuste = $valor2 - $valor1;

    $reg = new Fcdeclar();
    if ($MontoAjuste >= 0) {
      $reg->setNumdec('SP' . substr($grid->getNumdec(), 2, 8));
      $reg->setFecven($fecven);
    } else {
      $reg->setNumdec('CR' . substr($grid->getNumdec(), 2, 8));
      $reg->setFecven($fecven);
    }

    $reg->setFueing($grid->getFueing());
    $reg->setFecdec($grid->getFecdec());
    $reg->setRifcon($grid->getRifcon());
    $reg->setNumero($grid->getNumero());
    $reg->setNombre($grid->getNombre());

    if ($MontoAjuste > 0) {
      $reg->getTipo("SDP");
    } else {
      $reg->getTipo("AJU");
    }

    $reg->setNumref($grid->getNumref());
    $reg->setEdodec('V');
    $reg->setMora(0);
    $reg->setProntopg(0);
    $reg->setFundec($grid->getFundec());
    $reg->setNomcon($grid->getNomcon());
    $reg->setAnodec($grid->getAnodec());
    $reg->setMondec($MontoAjuste);
    $reg->setOtro($grid->getOtro());

    $reg->save();
  }

  public static function AcumularPago($fuente, $monto=0) {
    $c = new Criteria();
    $c->add(FcfueprePeer::CODFUE, ($fuente));
    $reg = FcfueprePeer::doSelect($c);

    if ($reg) {
      foreach ($reg as $datos) {
        $datos->setRecfec($datos->getRecfec() + $monto);
        $datos->save();
      }
    }
  }

  public static function SalvarFacrecpagFormPago($clasemodelo, $gridfp, &$acum) {
    try {
      $x = $gridfp[0];
      $k = 0;
      while ($k < count($x)) {

        if ( $x[$k]->getTippag()!=''){// &&  $x[$k]->getMonpag()>0){
        $fc = new Criteria();
        $fc->add(FctippagPeer::TIPPAG, $x[$k]->getTippag());
        $lista = FctippagPeer::doSelectOne($fc);
        if (strtoupper($lista->getDespag()) != 'EFECTIVO') {
          $acum = $acum + $x[$k]->getMonpag();
        }
        $x[$k]->setNumpag($clasemodelo->getNumpag());
        $x[$k]->save();
      }
        $k++;
      }

      $z = $gridfp[1];
      $j = 0;
      while ($j < count($z)) {
        $z[$j]->delete();
        $j++;
      }

      return -1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function FacrecpagDescto($clasemodelo, $grid, $gridfp, $gridscto) {
    try {
      $x = $gridscto[0];
      $j = 0;
      while ($j < count($x)) {
        $x[$j]->setNumpag($clasemodelo->getNumpag());
        $x[$j]->save();
        $j++;
      }

      $z = $grid[1];
      $j = 0;
      while ($j < count($z)) {
        $z[$j]->delete();
        $j++;
      }

      return -1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function VerificarDeudaVeh($num) {
    $cr = new Criteria();
    $cr->add(FcdeclarPeer::NUMREF, trim($num));
    $cr->add(FcdeclarPeer::FUEING, trim('02'));
    $fcdeclar = FcdeclarPeer::doSelectOne($cr);
    if ($fcdeclar) {
      return(false);
    } else {
      return(true);
    }
  }

  public static function VerificarPagoDecInm($numdec) {
    $cr = new Criteria();
    $cr->add(FcdeclarPeer::NUMDEC, trim($numdec));
    $cr->add(FcdeclarPeer::FUEING, trim('02'));
    $fcdeclar = FcdeclarPeer::doSelectOne($cr);
    if (!$fcdeclar) {
      return(false);
    } else {
      return(true);
    }
  }

  public static function eliminarFacvehreg($clase) {

    //Eliminación de detalle Vehiculo
    $c = new Criteria();
    $c->add(FcmodvehPeer::PLAVEH, $clase->getPlaveh());
    $reg1 = FcmodvehPeer::doSelect($c);

    if ($reg1) {
      foreach ($reg1 as $v) {
        $v->delete();
      }
    }

    //Eliminación del Traspaso
    $crt = new Criteria();
    $crt->add(FctravehPeer::PLAVEH, $clase->getPlaveh());
    $reg3 = FctravehPeer::doSelect($crt);

    if ($reg3) {
      foreach ($reg3 as $v) {
        $v->delete();
      }
    }
    $clase->delete();

    return -1;
  }

  public static function salvarFacvehreg($clasemodelo, $grid, $fundec) {
    try {
      //Para el caso de Traspaso
      if ($clasemodelo->getTraspaso() == 'S') {
        $c = new Criteria();
        $c->add(FcconrepPeer::RIFCON, trim($clasemodelo->getRifconant()));
        $fcconrep = FcconrepPeer::doSelectOne($c);
        $clasemodelo->setDueant($clasemodelo->getRifconant());
        $clasemodelo->setPlaant($clasemodelo->getPlaveh());
        $clasemodelo->setDirant($fcconrep->getDircon());
      }
      $clasemodelo->setEstveh('A');
      $clasemodelo->setEstdec('N');
      //Registrar Contribuyente

      $cc = new Criteria();
      $cc->add(FcconrepPeer::RIFCON, $clasemodelo->getRifcon());
      $fcconrep = FcconrepPeer::doSelectOne($cc);
      if (!($fcconrep)) {
        $contribuyente = new Fcconrep();
        $contribuyente->setRifcon($clasemodelo->getRifcon());
        $contribuyente->setNomcon($clasemodelo->getNomcon());
        $contribuyente->setDircon($clasemodelo->getDircon());
        $contribuyente->setNaccon($clasemodelo->getNacconcon());
        $contribuyente->setTipcon($clasemodelo->getTipconcon());
        $contribuyente->setRepcon('C');
        $contribuyente->save();
      }
      //Registrar Representante

      $cr = new Criteria();
      $cr->add(FcconrepPeer::RIFCON, $clasemodelo->getRifrep());
      $fcconrepr = FcconrepPeer::doSelectOne($cr);
      if (!(count($fcconrepr) > 0)) {
        $rep = new Fcconrep();
        $rep->setRifcon($clasemodelo->getRifrep());
        $rep->setNomcon($clasemodelo->getNomconrep());
        $rep->setDircon($clasemodelo->getDirconrep());
        $rep->setNaccon($clasemodelo->getNacconrep());
        $rep->setTipcon($clasemodelo->getTipconrep());
        $rep->setRepcon('R');
        $rep->save();
      }


      //Caso de Traspaso
      if ($clasemodelo->getTraspaso() == 'S') {
        if (self::RegistrarTraspaso($clasemodelo) != -1) {
          return 0;
        }
      }else if ($clasemodelo->getDesincorporar() == 'S') {    //Caso de Desincorporación
        $clasemodelo->setEstveh('D');
        if (self::RegistrarDesincorporar($clasemodelo) != -1) {
          return 0;
        }
      }else {
      
      if ($clasemodelo->getModificar() == 'S') //Caso de modificación
        if (self::RegistrarCambiosFacvehreg($clasemodelo, $fundec) != -1) {
          return 0;
        }
      }

      $clasemodelo->save();

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

//Desincorporación de Vehiculo
  public static function RegistrarDesincorporar($clasemodelo) {
    try {
      $c = new Criteria();
      $c->add(FcdesvehPeer::PLAVEH, $clasemodelo->getPlaveh());
      $reg = FcdesvehPeer::doselectone($c);

      if (!$reg) {
        $c = new Fcdesveh();
        $c->setPlaveh($clasemodelo->getPlaveh());
        $c->setNumdes($clasemodelo->getNumdes());
        $c->setFunrec($clasemodelo->getFundes());
        $c->setMotdes($clasemodelo->getMotdes());
        $c->setFecdes($clasemodelo->getFecdes());
        $c->save();        
      }
      return -1;
      
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

//Registrar modificación de los registros del vehiculo
  public static function RegistrarCambiosFacvehreg($clasemodelo, $fundec) {
    try {
      if ($clasemodelo->getRefmod() == '##########') {
        $sql = "Select refmod From Fcmodveh order by refmod desc ";
        if (Herramientas::BuscarDatos($sql, $result)) {
          $r1 = $result[0]['refmod'];
          $numero = $r1 + 1;
        } else {
          $numero = 1;
        }

        $numero = str_pad($numero, 10, '0', STR_PAD_LEFT);
      } else {
        $numero = str_pad($clasemodelo->getRefmod(), 10, '0', STR_PAD_LEFT);
      }
      //Datos anteriores vehiculo
      $c = new Criteria();
      $c->add(FcRegVehPeer::PLAVEH, $clasemodelo->getPlaveh());
      $reg = FcRegVehPeer::doselectone($c);


      $c = new Fcmodveh();
      $c->setRefmod($numero);
      $c->setPlaveh($clasemodelo->getPlaveh());
      $c->setFecmod($clasemodelo->getFec());
      $c->setCoduso($clasemodelo->getCoduso());
      $c->setAnoveh($clasemodelo->getAnoveh());
      $c->setMarveh($clasemodelo->getMarveh());
      $c->setModveh($clasemodelo->getModveh());
      $c->setColveh($clasemodelo->getColveh());
      $c->setSermot($clasemodelo->getSermot());
      $c->setSercar($clasemodelo->getSercar());
      $c->setPlaant($clasemodelo->getPlaant());
      $c->setDueant($clasemodelo->getDueant());
      $c->setDirant($clasemodelo->getDirant());
      $c->setValori($clasemodelo->getValori());
      $c->setFunrec($clasemodelo->getFunrecmod());
      if ($reg) {
        $c->setCodusoant($reg->getCoduso());
        $c->setAnovehant($reg->getAnoveh());
        $c->setMarvehant($reg->getMarveh());
        $c->setModvehant($reg->getModveh());
        $c->setColvehant($reg->getColveh());
        $c->setSermotant($reg->getSercar());
        $c->setSercarant($reg->getSercar());
        $c->setPlaantant($reg->getPlaant());
        $c->setDueantant($reg->getDueant());
        $c->setDirantant($reg->getDirant());
        $c->setValoriant($reg->getValori());
      }

      $c->save();

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function RegistrarTraspaso($clasemodelo) {
    try {
      $c = new Fctraveh();
      $c->setNumtra($clasemodelo->getNumtra());
      $c->setPlaveh($clasemodelo->getPlaveh());
      $c->setFectra($clasemodelo->getFectra());
      $c->setRifcon($clasemodelo->getRifcon());
      $c->setRifrep($clasemodelo->getRifrep());
      $c->setRifconant($clasemodelo->getRifconant());
      $c->setRifrepant($clasemodelo->getRifrepant());
      $c->setFunrec($clasemodelo->getFunrec());
      $c->save();

      return -1;
    } catch (Exception $ex) {
      //echo $ex;
      //exit();
      return 0;
    }
  }

  public static function generarCorrelativoFacrecpag($clasemodelo) {
    $correlativo = '';

    if ($clasemodelo->getNumpag() == 'INCLUSION') {
      //$num = H::getNextvalSecuencia('fcpagos_numpag_seq');
      $sql = "select numpag from fcpagos where id = (select max(id) from fcpagos);";
      if (Herramientas::BuscarDatos($sql, $result)) {
        $valor = $result[0]['numpag'];
      } else {
        $valor = 0;
      }
      $correlativo = str_pad(trim($valor + 1), 10, '0', STR_PAD_LEFT);
     // $correlativo = str_pad($num, 10, '0', STR_PAD_LEFT);
    } else {
      $correlativo = str_pad(str_replace('#', '0', $clasemodelo->getNumpag()));
    }

    return $correlativo;
  }

  public static function SalvarFacrecpagMaestro(&$clasemodelo, $gridfr) {
    try {
      $status = true;
      $correlativo = "";
      $monefe = 0;
      $pagliq=H::getConfApp2('pagliq', 'hacienda', 'facrecpag');
      if ($pagliq=='S') {
          $formpago = $gridfr[0];        
        if (count($formpago)>0) {          
          $i = 0;
          while ($i < count($formpago)) {

            if ( $formpago[$i]->getTippag()!='' &&  $formpago[$i]->getMonpag()>0){
            $c = new Criteria();
            $c->add(FctippagPeer::TIPPAG, $formpago[$i]->getTippag());
            $lista = FctippagPeer::doSelectOne($c);
            if (strtoupper($lista->getDespag()) == 'EFECTIVO') {
              $monefe = $monefe + $formpago[$i]->getMonpag();
              $status = false;
            }
          }
            $i++;
          }
          if ($status) {
            $clasemodelo->setEdopag('L');
          }
      }
      }else {
          $formpago = $gridfr[0];          
          $i = 0;
          while ($i < count($formpago)) {
          if ( $formpago[$i]->getTippag()!='' &&  $formpago[$i]->getMonpag()>0){
            $c = new Criteria();
            $c->add(FctippagPeer::TIPPAG, $formpago[$i]->getTippag());
            $lista = FctippagPeer::doSelectOne($c);
            if (strtoupper($lista->getDespag()) == 'EFECTIVO') {
              $monefe = $monefe + $formpago[$i]->getMonpag();
              $status = false;
            }
          }
            $i++;
          }
          if ($status) {
            $clasemodelo->setEdopag('L');
          }
      }

      if (!$clasemodelo->getId()) {
        $correlativo = self::generarCorrelativoFacrecpag($clasemodelo);
        $clasemodelo->setNumpag($correlativo);
        $clasemodelo->setNumpagold($correlativo);
         $fecha = date('Y-m-d H:i:s');
        $clasemodelo->setFechorregpag($fecha);
      }
      $clasemodelo->setMonefe(H::FormatoMonto($monefe));
      $clasemodelo->save();
      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function FacinmegDesincorporar($clasemodelo) {
    $clasemodelo->setEstinm('D');
    $clasemodelo->save();
  }

  public static function CalPorcion($porcion, $fechini, $fechfin) {
    $numpor = 0;
    $fechaaux = H::toDateUS($fechini);
    $fechaauxfin = H::toDateUS($fechfin);
    //Cálculo del Nro de porciones
    switch ($porcion) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 6:
      case 12:
        while ((Herramientas::dateAdd('d', 1, $fechaaux, '-')) <= $fechaauxfin) {
          $fechaprox = Herramientas::dateAdd('m', (12 / $porcion), $fechaaux, '+');
          $fechaaux = $fechaprox;
          $numpor = $numpor + 1;
        }
        break;
      case 24 :
        while ((Herramientas::dateAdd('d', 1, $fechaaux, '-')) <= $fechaauxfin) {
          $fechaprox = Herramientas::dateAdd('d', 15, $fechaaux, '+');
          $fechaaux = $fechaprox;
          $numpor = $numpor + 1;
        }
        break;
      case 52 :
        while ((Herramientas::dateAdd('d', 1, $fechaaux, '-')) <= $fechaauxfin) {
          $fechaprox = Herramientas::dateAdd('d', 7, $fechaaux, '+');
          $fechaaux = $fechaprox;
          $numpor = $numpor + 1;
        }
        break;
      case 365 :
        while ((Herramientas::dateAdd('d', 1, $fechaaux, '-')) <= $fechaauxfin) {
          $fechaprox = Herramientas::dateAdd('d', 1, $fechaaux, '+');
          $fechaaux = $fechaprox;
          $numpor = $numpor + 1;
        }
        break;
    }


    return($numpor);
  }

  public static function DistribuirVencInm(&$obj, $porcion, $fechini, $fechfin, $fname, $fechadia, $conter, $bscon, $bster, $coduso, $diaven, $tipoven,$fuente) {
    $numpor = 0;
    $fechaprox = "";
    $valor = "";
    $auxiliar = array();
    $obj = array();
    $fechan = "";
    $fecha2 = "";
    $ultimo = false;
    $diamax = 0;
    $numpor = 0;
    $dateFormat = new sfDateFormat('es_VE');
    $fechaveng = "";
    $sql = "";
    $dia = "";
    $mes = "";
    $annio = "";
    $fechafin = "";

    //Cálculo del Nro de porciones
    $numpor = self::CalPorcion($porcion, $fechini, $fechfin);
    $fechadia = $dateFormat->format($fechadia, 'i', $dateFormat->getInputPattern('d'));
    $fechini = $dateFormat->format($fechini, 'i', $dateFormat->getInputPattern('d'));
    $fecultima = $dateFormat->format($fechfin, 'i', $dateFormat->getInputPattern('d'));
    $anoexactos=1;
    $sql = "select  Extract(year from age('" . $fecultima . "','" . $fechini . "')) as anopasa";
    if (Herramientas :: BuscarDatos($sql, $result)) {
      $anoexactos= $result[0]['anopasa']+1;
    }
    
    switch ($porcion) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 6:
      case 12:
        $obj[0]["id"] = 1;
        $obj[0]["numero"] = 1;
        if ($porcion == 1) {
          $fecha2 = Herramientas::dateAdd('d', 1, (Herramientas::dateAdd('m', (12 / $porcion), $fechini, '+')), '-');
          $obj[0]["fecven"] = substr($fecha2, 0, 4) . "-12-31";
          $auxiliar[0] = $fecha2;
          $fechafin = $fecha2;
        } else {
          $fechafin = Herramientas::dateAdd('d', 1, (Herramientas::dateAdd('m', (12 / $porcion), $fechini, '+')), '-');
          if ($tipoven == 'I') {
            $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $fechini, '+'), '-');
          } else {
            $fecha2 = Herramientas::dateAdd('d', $diaven, $fechafin, '+');
          }
          $obj[0]["fecven"] = $fecha2;
          $auxiliar[0] = $fechafin;
        }
        $obj[0]["nombre"] = $fname . self::ConsDesc($porcion, $fechini) . Herramientas::FormatoFecha($fechafin);

        if ($fecha2 >= $fechadia) {
          $obj[0]["edodecstatus"] = 'VIGENTE';
        } else {
          $obj[0]["edodecstatus"] = 'VENCIDA';
        }

        $obj[0]["tipo"] = strtoupper(substr($fname, 2, 3));
        for ($i = 1; $i < (int) $numpor - 1; $i++) {
          $obj[$i]["tipo"] = strtoupper(substr($fname, 2, 3));
          $obj[$i]["id"] = 1;
          $obj[$i]["numero"] = $i + 1;
          $fechini = Herramientas::dateAdd('d', 1, $auxiliar[$i - 1], '+');
          if (substr($auxiliar[$i - 1], 8, 2) == '31') {
            $fechafin = Herramientas::dateAdd('d', 1, (Herramientas::dateAdd('m', (12 / $porcion), $auxiliar[$i - 1], '+')), '-');
          } else {
            $fechas = Herramientas::dateAdd('m', (12 / $porcion), $auxiliar[$i - 1], '+');
            $sql = "Select last_day('" . $fechas . "') as fecha";
            if (Herramientas::BuscarDatos($sql, $result)) {
              $fechafin = $result[0]['fecha'];
            }
          }
          $auxiliar[$i] = $fechafin;

          if ($tipoven == "I") {
            $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $fechini, '+'), '-');
          } else {
            $fecha2 = Herramientas::dateAdd('d', $diaven, $fechafin, '+');
          }

          $obj[$i]["fecven"] = $fecha2;
          $obj[$i]["nombre"] = $fname . self::ConsDesc($porcion, Herramientas::dateAdd('d', 1, $auxiliar[$i - 1], '+')) . Herramientas::FormatoFecha($fechafin);
          $fechaveng = $fechafin; $dateFormat->format($fechafin, 'i', $dateFormat->getInputPattern('d'));
          //$fechadia = $dateFormat->format($fechadia, 'i', $dateFormat->getInputPattern('d'));
          if ($fechaveng >= $fechadia) {
            $obj[$i]["edodecstatus"] = 'VIGENTE';
          } else {
            $obj[$i]["edodecstatus"] = 'VENCIDA';
          }
        }

        break;
      case 24 :
        $annio = substr($fechini, 0, 4);
        $mes = substr($fechini, 5, 2);
        $dia = substr($fechini, 8, 2);
        $obj[0]["id"] = 1;
        $obj[0]["numero"] = 1;
        $fechafin = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', 15, $fechini, '+'), '-');
        $auxiliar[0] = $fechafin;
        if ($tipoven == 'I') {
          $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $fechini, '+'), '-');
        } else {
          $fecha2 = Herramientas::dateAdd('d', $diaven, $fechafin, '+');
        }
        $obj[0]["fecven"] = $fecha2;
        $obj[0]["nombre"] = $fname . self::ConsDesc($porcion, $fechini) . Herramientas::FormatoFecha($fechafin);
        $obj[0]["tipo"] = strtoupper(substr($fname, 2, 3));
        $fechaveng = $dateFormat->format($fechafin, 'i', $dateFormat->getInputPattern('d'));
        $fechadia = $dateFormat->format($fechadia, 'i', $dateFormat->getInputPattern('d'));
        if ($fechaveng >= $fechadia) {
          $obj[0]["edodecstatus"] = 'VIGENTE';
        } else {
          $obj[0]["edodecstatus"] = 'VENCIDA';
        }
        for ($i = 1; $i < (int) $numpor - 1; $i++) {
          $obj[$i]["id"] = 1;
          $obj[$i]["numero"] = $i + 1;
          //$auxiliar[$i]=Herramientas::dateAdd('d',15,$auxiliar[$i-1],'+');
          $mes = substr($auxiliar[$i - 1], 5, 2);
          $dia = substr($auxiliar[$i - 1], 8, 2);
          $annio = substr($auxiliar[$i - 1], 0, 4);
          if ($mes == '2' && $dia == '15' && (int) ($annio % 4) == 0) {
            $auxiliar[$i] = Herramientas::dateAdd('d', 14, $auxiliar[$i - 1], '+');
          } else if ($mes == '2' && $dia == '15' && (int) ($annio % 4) != 0) {
            $auxiliar[$i] = Herramientas::dateAdd('d', 13, $auxiliar[$i - 1], '+');
          } else if (($mes == '1' or $mes == '3' or $mes == '5' or $mes == '7' or $mes == '8' or $mes == '10' or $mes == '12') && $dia == '15') {
            $auxiliar[$i] = Herramientas::dateAdd('d', 16, $auxiliar[$i - 1], '+');
          } else {
            $auxiliar[$i] = Herramientas::dateAdd('d', 15, $auxiliar[$i - 1], '+');
          }

          $fechini = $auxiliar[$i - 1];



          if ($tipoven == 'I') {
            $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $fechini, '+'), '-');
          } else {
            $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[$i], '+');
          }
          $obj[$i]["fecven"] = $fecha2;
          $obj[$i]["nombre"] = $fname . self::ConsDesc($porcion, Herramientas::dateAdd('d', 1, $auxiliar[$i - 1], '+')) . Herramientas::FormatoFecha($auxiliar[$i]);
          $obj[$i]["tipo"] = strtoupper(substr($fname, 2, 3));
          $fechaveng = $dateFormat->format($obj[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
          $fechadia = $dateFormat->format($fechadia, 'i', $dateFormat->getInputPattern('d'));
          if ($fechaveng >= $fechadia) {
            $obj[$i]["edodecstatus"] = 'VIGENTE';
          } else {
            $obj[$i]["edodecstatus"] = 'VENCIDA';
          }
        }

        break;
      case 52:
      case 365:
        if ($porcion == 52) {
          $auxiliar[0] = Herramientas::dateAdd('d', 1, (Herramientas::dateAdd('d', 7, $fechini, '+')), '-');
        } else if ($porcion == 365) {
          $auxiliar[0] = Herramientas::dateAdd('d', 1, $fechini, '+');
        }

        if ($tipoven == 'I') {
          $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $fechini, '+'), '-');
        } else {
          $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[0], '+');
        }

        $obj[0]["id"] = 1;
        $obj[0]["numero"] = 1;
        $obj[0]["fecven"] = $fecha2;
        $obj[0]["nombre"] = $fname . self::ConsDesc($porcion, $fechini) . Herramientas::FormatoFecha($fecha2);
        $obj[0]["tipo"] = strtoupper(substr($fname, 2, 3));
        $fechaveng = $dateFormat->format($auxiliar[0], 'i', $dateFormat->getInputPattern('d'));
        $fechadia = $dateFormat->format($fechadia, 'i', $dateFormat->getInputPattern('d'));
        if ($fechaveng >= $fechadia) {
          $obj[0]["edodecstatus"] = 'VIGENTE';
        } else {
          $obj[0]["edodecstatus"] = 'VENCIDA';
        }
        for ($i = 1; $i < $numpor; $i++) {
          $obj[$i]["id"] = 1;
          $obj[$i]["numero"] = $i + 1;
          $fechini = $auxiliar[$i - 1];
          if ($porcion == 52) {
            $auxiliar[$i] = Herramientas::dateAdd('d', 7, $auxiliar[$i - 1], '+');
          } else {
            $auxiliar[$i] = Herramientas::dateAdd('d', 7, $auxiliar[$i - 1], '+');
          }
          if ($tipoven == 'I') {
            $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $fechini, '+'), '-');
          } else {
            $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[0], '+');
          }
          $obj[$i]["fecven"] = $fecha2;
          $obj[$i]["nombre"] = $fname . self::ConsDesc($porcion, Herramientas::dateAdd('d', 1, $obj[$i - 1]["fecven"], '+')) . Herramientas::FormatoFecha($fecha2);
          $obj[$i]["tipo"] = strtoupper(substr($fname, 2, 3));
          $fechaveng = $dateFormat->format($obj[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
          $fechadia = $dateFormat->format($fechadia, 'i', $dateFormat->getInputPattern('d'));
          if ($fechaveng >= $fechadia) {
            $obj[$i]["edodecstatus"] = 'VIGENTE';
          } else {
            $obj[$i]["edodecstatus"] = 'VENCIDA';
          }
        }
        break;

      default:

        break;
    }
    $fac=H::getX_vacio('CODUSOINM', 'Fcusoinm', 'Factor', $coduso);
    for ($j = 0; $j < count($obj); $j++) {
      switch ($conter) {
        case 'A' || 'C':
          if (($numpor - 1) > 0 && ($porcion) > 0) {
               $obj[$j]["mondec"] = ((($fac/1000)*($bster+$bscon))*$anoexactos)/ ($numpor - 1);
          } else if (($porcion) > 0) {              
              $obj[$j]["mondec"] = ((($fac/1000)*($bster+$bscon))*$anoexactos)/ ($numpor - 1);
          } else if (($numpor - 1) > 0) {
              $obj[$j]["mondec"] = ((($fac/1000)*($bster+$bscon))*$anoexactos)/ ($numpor - 1);
          } else {
            $obj[$j]["mondec"] = H::FormatoMonto(0);
          }
          break;
        case 'T' :
          $c = new Criteria();
          $c->add(FcregtarconPeer::CODUSOINM, $coduso);
          $c->add(FcregtarconPeer::ESCDES, ($bster + $bscon), CRITERIA::LESS_THAN);
          $c->add(FcregtarconPeer::ESCHAS, ($bster + $bscon), CRITERIA::GREATER_THAN);
          if ($conter == 'C') {
            $c->add(FcregtarconPeer::CODCARINM, $codcarinm);
          }
          $fcregtarcon = FcregtarconPeer::doSelectOne($c);
          if ($fcregtarcon) {
            $monto = ($bster + $bscon) * ($fcregtarcon->getAlicuota() / 1000);
            $obj[$j]["mondec"] = H::FormatoMonto($monto / $porcion);
          }
          break;
      }
    }
    
    //Multas 
     $anodec=substr($fechadia,0,4);
     $sql2="select a.codmul as codmul, a.nommul as nommul, a.tipo as tipo, a.modo as modo, a.monpro as monpro, b.codfuegen as codfuegen
        from fcmultas a, fcfuentesmul b
        where a.tipo='A' and a.tipdec='D' and b.codfue='".$fuente."' and a.codmul=b.codmul";
      if (Herramientas::BuscarDatos($sql2,$result2))
      {
        $z=0;
        while ($z<count($result2))
        {
            
                if ($result2[$z]["modo"]=='I')
                {
                   $fechacompara=$fechini;
                   $anoexactos2=$anoexactos-1;
                }else if ($result2[$z]["modo"]=='E') {
                   $t= new Criteria();
                   $t->add(FcfueprePeer::CODFUE,$fuente);
                   $reg= FcfueprePeer::doSelectOne($t);
                   if ($reg)
                      $fechacompara=$reg->getFecest();
                   else
                       $fechacompara=$fechini;
                }else if ($result2[$z]["modo"]=='D') {
                   $t= new Criteria();
                   $t->add(FcfueprePeer::CODFUE,$fuente);
                   $reg= FcfueprePeer::doSelectOne($t);
                   if ($reg)
                      $fechacompara=$reg->getFeccie();
                   else
                       $fechacompara=$fechini;
                   $anoexactos2=1;
                  }else {
                    $fechacompra=$fechini;
                  }
                $declaraciontotal=H::toFloat(((($fac/1000)*($bster+$bscon))*$anoexactos2));
                /*if ($anodec!="")
                {
                    $fechaantigua=$anodec.substr($fechacompara,4,6);
                    while (H::bisiesto(substr($fechaantigua,0,4)))
                    {
                      $fechaantigua=substr($fechaantigua,0,6).str_pad(((int)substr($fechaantigua,7,2)-1),2,'0',STR_PAD_LEFT);
                    }
                    $fechacompara=$fechaantigua;
                }*/
                $dias=H::DateDiff("d", $fechacompara, $fechadia); //$fechadia-$fechacompara;
                
                $p= new Criteria();
                $p->add(FcrangosmulPeer::CODMUL,$result2[$z]["codmul"]);
                $p->add(FcrangosmulPeer::DIASDESDE,$dias,Criteria::LESS_EQUAL);
                $p->add(FcrangosmulPeer::DIASHASTA,$dias,Criteria::GREATER_EQUAL);
                $resu= FcrangosmulPeer::doSelectOne($p);
                if ($resu)
                    $montoporc=$resu->getValor();
                else
                    $montoporc=0;
                if ($result2[$z]["monpro"]=='M')
                {
                    if ($montoporc!=0)
                        $monto=$montoporc;
                    else
                        $monto=0;
                }else  {
                   $monto=($declaraciontotal*$montoporc)/100;
                }
                if ($monto!=0)
                {
                   $y=count($obj);
                   $obj[$y]["id"]=1;                   
                   $obj[$y]["numero"]=str_pad($y,2,'0',STR_PAD_LEFT);
                   $obj[$y]["fecven"]=date('d/m/Y',strtotime($fechacompara));
                   $obj[$y]["nombre"]=$result2[$z]["nommul"]." Año ".$anodec;
                   $obj[$y]["tipo"]="MUL";
                   $obj[$y]["mondec"]=number_format($monto,2,',','.');;
                   $obj[$y]["edodecstatus"]="VIGENTE";
                }
            $z++;
        }
      }
    
  }

  public static function generarCorrelativoDecVeh($clase) {
    $correlativo = '';

    if ($clase->getNumdec() == '##########') {
      $sql = "SELECT MAX(TO_NUMBER(SUBSTR(NUMDEC,4,7),'99999999')) AS cod FROM  fcdeclar WHERE FUEING='" . $clase->getfuente() . "' AND NUMDEC LIKE 'VH%' ";
      if (Herramientas::BuscarDatos($sql, $result)) {
        $valor = $result[0]['cod'] + 1;
      } else {
        $valor = 1;
      }
      $correlativo = "VH" . str_pad($valor, 8, '0', STR_PAD_LEFT);
    } else {
      $correlativo = $clase->getNumdec();//"VH" . str_pad($valor, 10, '0', STR_PAD_LEFT);
    }

    return $correlativo;
  }

  public static function eliminarFacvehdec($clase) {


    $c = new Criteria();
    $c->add(FcregvehPeer::PLAVEH, $clase->getNumref());
    $fcregveh = FcregvehPeer::doSelectOne($c);
    if ($fcregveh) {
      $fcregveh->setEstdec("N");
      $fcregveh->save();
    }

    //Eliminación de la declaración
    $c = new Criteria();
    $c->add(FcdeclarPeer::NUMDEC, $clase->getNumdec());
    $reg1 = FcdeclarPeer::doSelect($c);

    if ($reg1) {
      foreach ($reg1 as $v) {
        $v->delete();
      }
    }

    return -1;
  }

  //Graba la inf. de la declaración de vehiculo
  public static function salvarFacdecveh($clasemodelo, $grid) {
    $numdec = "";
    $dateFormat = new sfDateFormat('es_VE');
    $saldo = "";

    //Actualización del estatus de la declaración
    $c = new Criteria();
    $c->add(FcregvehPeer::PLAVEH, $clasemodelo->getNumref());
    $fcregveh = FcregvehPeer::doSelectOne($c);
    if ($fcregveh) {
      $fcregveh->setEstdec("D");
      $fcregveh->save();
    }
    //Buscar saldo
    self::BuscarSaldo($saldo, $clasemodelo);


    $c = new Criteria();
    $c->add(FcdeclarPeer::NUMDEC, $clasemodelo->getNumdec());
    $fcdeclar = FcdeclarPeer::doSelectOne($c);
    $x = $grid[0];
    $j = 0;
    if ($clasemodelo->getId() == "") {
      $numdec = self::generarCorrelativoDecVeh($clasemodelo);
    }
    while ($j < count($x)) {
      $fecven = $x[$j]->getFecven();

      if ($clasemodelo->getId() == "") {
        $fcdeclar = new Fcdeclar();
      }
      $fcdeclar->setNumdec($numdec);
      $fcdeclar->setNumref($clasemodelo->getNumref());
      $fcdeclar->setFueing($clasemodelo->getFuente());
      $fcdeclar->setFecdec($clasemodelo->getFecdec());
      $fcdeclar->setRifcon($clasemodelo->getRifcon());
      $fcdeclar->setNomcon($clasemodelo->getNomcon());
      $fcdeclar->setAnodec((int) substr($fecven, 0, 4));
      $fcdeclar->setOtro($clasemodelo->getCodcatinm());
      $fcdeclar->setNumref($clasemodelo->getNumref());
      $fcdeclar->setTipo($x[$j]->getTipo());
      $fcdeclar->setNombre($x[$j]->getNombre());
      $fcdeclar->setNumero($j + 1);
      $fcdeclar->setMora(H::FormatoMonto(0));
      $fcdeclar->setProntopg(H::FormatoMonto(0));
      $fcdeclar->setFundec($clasemodelo->getFundec());
      $fcdeclar->setFecultpag($clasemodelo->getFeccal());
      $fcdeclar->setFecven($x[$j]->getFecven());

      $fcdeclar->setFecini("01/01/" . substr($fecven, 0, 4));
      $fcdeclar->setFeccie("31/12/" . substr($fecven, 0, 4));
      $fcdeclar->setMondec($x[$j]->getMondec());
      if ((float) $saldo <= (float) ($x[$j]->getMondec())) {
        $fcdeclar->setAutliq($saldo);
      } else {
        $fcdeclar->setAutliq($x[$j]->getMondec());
      }
      //Actualizar Saldo
      self::ActualizarSaldo($clasemodelo, $fcdeclar->getAutliq());
      $saldo = $saldo - $fcdeclar->getMondec();
      if ($saldo < 0) {
        $saldo = 0;
      }

      if ($fcdeclar->getMondec() == $fcdeclar->getAutliq() && $fcdeclar->getMondec()>0) {
        $fcdeclar->setEdodec("P");
      } else if ($x[$j]->getEdodecstatus() == 'VIGENTE') {
        $fcdeclar->setEdodec('V');
      } else if ($x[$j]->getEdodecstatus() == 'VENCIDA') {
        $fcdeclar->setEdodec('E');
      }

      $fcdeclar->save();
      $j++;
    }
    return -1;
  }

  public static function ConsDesc($porcion, $fechini) {

    if ($porcion == 2) {
      return(' del ');
    } else {
      return(' del ' . Herramientas::FormatoFecha($fechini) . ' al ');
    }
  }

  public static function ActualizarSaldo($clasemodelo, $monto) {
    $saldo = 0;
    $c = new Criteria();
    $c->add(FcabonosPeer::FUEING, $clasemodelo->getfuentef());
    //En la declaración de Otros ingresos no se pregunta por el Numref
    if ($clasemodelo->getNumref() != '') {
      $c->add(FcabonosPeer::NUMREF, $clasemodelo->getNumref());
    }
    $c->add(FcabonosPeer::RIFCON, $clasemodelo->getRifcon());
    $c->add(FcabonosPeer::STAPAG, 'N');
    $fcabonos = FcabonosPeer::doSelect($c);
    if ($fcabonos && $monto > 0) {
      foreach ($fcabonos as $obj) {
        if ($obj->getSalpag() >= $monto) {
          $obj->setSalpag($obj->getSalpag() - $monto);
        } else {
          $obj->setSalpag(0);
          $monto = $monto - $obj->getSalpag();
        }

        if ($obj->getSalpag() == 0) {
          $obj->setStapag('S');
        }
        $obj->save();
      }
    }
  }

  public static function eliminarFacinmdec($clase) {

    //Actualización de la declaración

    $c = new Criteria();
    $c->add(FcreginmPeer::NROINM, $clase->getNumref());
    $fcreginm = FcreginmPeer::doSelectOne($c);
    if ($fcreginm) {
      $fcreginm->setEstdec("N");
      $fcreginm->save();
    }

    //Eliminación de la declaración
    $cr = new Criteria();
    $cr->add(FcdeclarPeer::NUMDEC, $clase->getNumdec());
    $cr->add(FcdeclarPeer::RIFCON, $clase->getRifcon());
    $cr->add(FcdeclarPeer::NUMREF, $clase->getNumref());
    $reg1 = FcdeclarPeer::doSelect($cr);

    if ($reg1) {
      foreach ($reg1 as $v) {
        $v->delete();
      }
    }

    return -1;
  }

  public static function BuscarSaldo(&$saldo, $clasemodelo) {

    $sql = "Select coalesce(Sum(Salpag),0) as monto from FCAbonos where fueing='" . $clasemodelo->getfuentef() . "' and NumRef ='" . $clasemodelo->getNumref() . "' and rifcon='" . $clasemodelo->getRifcon() . "' AND StaPag='N'";
    if (Herramientas::BuscarDatos($sql, $result)) {
      $saldo = $result[0]['monto'];
    }
  }

  public static function VerificarSolvencia($num) {
    $cr = new Criteria();
    $cr->add(FcdeclarPeer::NUMREF, trim($num));
    $cr->add(FcdeclarPeer::EDODEC, trim('P'), Criteria::NOT_EQUAL);
    $fcdeclar = FcdeclarPeer::doSelectOne($cr);
    if ($fcdeclar) {
      return(true);
    } else {
      return(false);
    }
  }

  public static function VerificarExDeclaracion($num, $fecini, $fecfin) {
    
      $dateFormat = new sfDateFormat('es_VE');
       $fec1 = $dateFormat->format($fecini, 'i', $dateFormat->getInputPattern('d'));
       $fec2 = $dateFormat->format($fecfin, 'i', $dateFormat->getInputPattern('d'));
    
    $cr = new Criteria();
    $cr->add(FcdeclarPeer::NUMREF, trim($num));
//    $cr->add(FcdeclarPeer::FECVEN, $fec1, Criteria::GREATER_EQUAL);
  //  $cr->add(FcdeclarPeer::FECVEN, $fec2, Criteria::LESS_EQUAL);    
    $sql="fcdeclar.fecven<='".$fec2."' and fcdeclar.fecven>='".$fec1."'";
    $cr->add(FcdeclarPeer::FECVEN,$sql,Criteria::CUSTOM);
    $fcdeclar = FcdeclarPeer::doSelectOne($cr);
    if ($fcdeclar) {
      return(true);
    } else {
      return(false);
    }
  }

  public static function VerificarFechaV($porcion, $fechini, $fechfin) {
    $fechaprox = "";
    $dateFormat = new sfDateFormat('es_VE');
    switch ($porcion) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 6:
      case 12:

        $fechaprox = date('d/m/Y', strtotime(Herramientas::dateAdd('d', 1, Herramientas::dateAdd('m', (12 / $porcion), $fechini, '+'), '-')));
        break;
      case 24:
        $fechaprox = date('d/m/Y', strtotime(Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', 15, $fechini, '+'), '-')));
        break;
      case 52:
        $fechaprox = date('d/m/Y', strtotime(Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', 7, $fechini, '+'), '-')));
        break;
      case 365:
        $fechaprox = date('d/m/Y', strtotime(Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', 1, $fechini, '+'), '-')));
        break;
    }

    if ($fechfin < $fechaprox) {
      return(true);
    } else {
      return(false);
    }
  }

  public static function salvarFacprocom($clasemodelo, $grid, $fundec) {


    if ($clasemodelo->getNrocon() == '##########') {
      $sql = "select nrocon from fcprolic where id in (select Max(id) from fcprolic) ";
      if (Herramientas::BuscarDatos($sql, $result)) {
        $r1 = $result[0]['nrocon'];
        $valor = $r1 + 1;
      } else {
        $valor = 1;
      }
      $correlativo = str_pad($valor, 8, '0', STR_PAD_LEFT);
    } else {
      $correlativo = str_pad($clase->getNrocon(), 8, '0', STR_PAD_LEFT);
    }



    self::GrabarContRep($clasemodelo);
    self::GrabarGridFacprocom($clasemodelo, $grid, $correlativo);

    if ($clasemodelo->getId())
      if (self::RegistrarCambiosFacprocom($clasemodelo, $fundec) != -1) {
        return 0;
      }

    $clasemodelo->setNrocon($correlativo);
    $clasemodelo->setStapro('A');
    $clasemodelo->setStadec('N');
    $clasemodelo->save();

    return -1;
  }

  public static function GrabarContRep($clasemodelo) {

    try {
      //Registrar Contribuyente

      $cc = new Criteria();
      $cc->add(FcconrepPeer::RIFCON, $clasemodelo->getRifcon());
      $fcconrep = FcconrepPeer::doSelectOne($cc);
      if (!($fcconrep)) {
        $contribuyente = new Fcconrep();
        $contribuyente->setRifcon($clasemodelo->getRifcon());
        $contribuyente->setNomcon($clasemodelo->getNomcon());
        $contribuyente->setDircon($clasemodelo->getDircon());
        $contribuyente->setNaccon($clasemodelo->getNacconcon());
        $contribuyente->setTipcon($clasemodelo->getTipconcon());
        $contribuyente->setRepcon('C');
        $contribuyente->save();
      }
      //Registrar Representante

      $cr = new Criteria();
      $cr->add(FcconrepPeer::RIFCON, $clasemodelo->getRifrep());
      $fcconrepr = FcconrepPeer::doSelectOne($cr);
      if (!(count($fcconrepr) > 0)) {
        $rep = new Fcconrep();
        $rep->setRifcon($clasemodelo->getRifrep());
        $rep->setNomcon($clasemodelo->getNomconrep());
        $rep->setDircon($clasemodelo->getDirconrep());
        $rep->setNaccon($clasemodelo->getNacconrep());
        $rep->setTipcon($clasemodelo->getTipconrep());
        $rep->setRepcon('R');
        $rep->save();
      }

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function GrabarGridFacprocom($clasemodelo, $grid, $num) {

    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      $x[$j]->setNrocon($num);
      $x[$j]->setRifcon($clasemodelo->getRifcon());
      $x[$j]->setTippro($clasemodelo->getTippro());
      $x[$j]->save();
      $j++;
    }

    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }

    return -1;
  }

  public static function EliminarFacprocom($clasemodelo, $grid) {
    try {

      if (self::EliminarGridFacproco($clasemodelo, $grid) == -1) {
        $clasemodelo->delete();
        return -1;
      }

      return 0;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function EliminarGridFacproco($clasemodelo, $grid) {
    try {
      $c = new Criteria();
      $c->add(FcprolicdetPeer :: NROCON, $clasemodelo->getNrocon());
      $c->add(FcprolicdetPeer :: RIFCON, $clasemodelo->getRifcon());
      $c->add(FcprolicdetPeer :: TIPPRO, $clasemodelo->getTippro());
      FcprolicdetPeer :: doDelete($c);

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function RegistrarCambiosFacprocom($clasemodelo, $fundec) {
    try {
      $numero = str_pad('1', 10, '0', STR_PAD_LEFT);
      if (Herramientas::getVerCorrelativo('refmod', 'Fcmodpro', $r)) {
        $encontrado = false;
        while (!$encontrado) {
          $numero = str_pad($r, 10, '0', STR_PAD_LEFT);
          $c = new Criteria();
          $c->add(FcmodproPeer::REFMOD, $numero);
          $resul = FcmodproPeer::doSelectOne($c);
          if ($resul) {
            $r = $r + 1;
          } else {
            $encontrado = true;
          }
        }
      }

      $c = new Fcmodpro();
      $c->setNrocon($clasemodelo->getNrocon());
      $c->setFecmod(date('Y-m-d'));
      $c->setRefmod($numero);
      $c->setTippro($clasemodelo->getTippro());
      $c->setFunrec($fundec);
      $c->setDespro($clasemodelo->getDespro());
      $c->setDirpro($clasemodelo->getDirpro());

      //Para saber si fue cambiado estos datos se buscan en la BD
      //y se almacenan
      $fcprolic = new Criteria();
      $fcprolic->add(FcprolicPeer::ID, $clasemodelo->getId());
      $reg = FcprolicPeer::doselectone($fcprolic);

      if ($reg) {
        $c->setTipproant($reg->getTippro());
        $c->setDesproant($reg->getDespro());
        $c->setDirproant($reg->getDirpro());
        $c->setMonproant($reg->getMonpro());
      }
      $c->save();

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function generarCorrelativoFacesppub($clase) {
    $correlativo = '';

    if ($clase->getNrocon() == "INCLUSIO") {
      $sql = "select nrocon from fcesplic where id in (select Max(id) from fcesplic) ";
      if (Herramientas::BuscarDatos($sql, $result)) {
        $r1 = $result[0]['nrocon'];
        $valor = $r1 + 1;
      } else {
        $valor = 1;
      }
      $correlativo = str_pad($valor, 8, '0', STR_PAD_LEFT);
    } else {
      $correlativo = str_replace('#', '0', $clase->getNrocon());
    }

    return $correlativo;
  }

  public static function salvarFacesppub($clasemodelo, $grid, $fundec) {
    try {
      $correlativo = '';
      if (!$clasemodelo->getId()) {
        $correlativo = self::generarCorrelativoFacesppub($clasemodelo);
        $clasemodelo->setNrocon($correlativo);
      }

      self::GrabarGridFacesppub($clasemodelo, $grid);

      if ($clasemodelo->getId()) {
        $clasemodelo->setFecrec(date('Y-m-d'));
        $clasemodelo->setFunrec($fundec);
        if (self::RegistrarCambiosFacesppub($clasemodelo, $fundec) != -1) {
          return 0;
        }
      }


      $clasemodelo->setStaest('A');
      $clasemodelo->setStadec('N');
      $clasemodelo->save();

      return -1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function GrabarGridFacesppub($clasemodelo, $grid) {
    try {
      $x = $grid[0];
      $j = 0;
      while ($j < count($x)) {
        $x[$j]->setNrocon($clasemodelo->getNrocon());
        $x[$j]->setRifcon($clasemodelo->getRifcon());
        $x[$j]->setTipesp($clasemodelo->getTipesp());
        $x[$j]->save();
        $j++;
      }
      $z = $grid[1];
      $j = 0;
      while ($j < count($z)) {
        $z[$j]->delete();
        $j++;
      }

      return -1;
    } catch (Exception $ex) {
      echo $ex;
      ;
      return 0;
    }
  }

  public static function RegistrarCambiosFacesppub($clasemodelo, $fundec) {
    try {
      $numero = str_pad('1', 10, '0', STR_PAD_LEFT);
      if (Herramientas::getVerCorrelativo('refmod', 'Fcmodpro', $r)) {
        $encontrado = false;
        while (!$encontrado) {
          $numero = str_pad($r, 10, '0', STR_PAD_LEFT);
          $c = new Criteria();
          $c->add(FcmodproPeer::REFMOD, $numero);
          $resul = FcmodproPeer::doSelectOne($c);
          if ($resul) {
            $r = $r + 1;
          } else {
            $encontrado = true;
          }
        }
      }

      $c = new Fcmodpro();
      $c->setNrocon($clasemodelo->getNrocon());
      $c->setFecmod(date('Y-m-d'));
      $c->setRefmod($numero);
      $c->setTipesp($clasemodelo->getTipesp());
      $c->setFunrec($fundec);
      $c->setDesesp($clasemodelo->getDesesp());
      $c->setDiresp($clasemodelo->getDiresp());

      //Para saber si fue cambiado estos datos se buscan en la BD
      //y se almacenan
      $fcesplic = new Criteria();
      $fcesplic->add(FcesplicPeer::ID, $clasemodelo->getId());
      $reg = FcesplicPeer::doselectone($fcesplic);

      if ($reg) {
        $c->setTipespant($reg->getTipesp());
        $c->setDesespant($reg->getDesesp());
        $c->setDirespant($reg->getDiresp());
        $c->setMonespant($reg->getMonesp());
      }

      $c->save();

      return -1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function EliminarFacesppub($clasemodelo, $grid) {
    try {
      if (self::EliminarGridFacesppub($clasemodelo, $grid) == -1) {
        $clasemodelo->delete();
        return -1;
      }

      return 0;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function EliminarGridFacesppub($clasemodelo, $grid) {
    try {
      $c = new Criteria();
      $c->add(FcesplicdetPeer :: NROCON, $clasemodelo->getNrocon());
      $c->add(FcesplicdetPeer :: RIFCON, $clasemodelo->getRifcon());
      $c->add(FcesplicdetPeer :: TIPESP, $clasemodelo->getTipesp());
      FcesplicdetPeer :: doDelete($c);

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function generarCorrelativoFacapulic($clase, $valor) {
    $correlativo = '';

    if ($clase->getNrocon() == "########") {
      $sql = "select nrocon from fcapulic where id in (select Max(id) from fcapulic) ";
      if (Herramientas::BuscarDatos($sql, $result)) {
        $r1 = $result[0]['nrocon'];
        $valor = $r1 + 1;
      } else {
        $valor = 1;
      }
      $correlativo = str_pad($valor, 8, '0', STR_PAD_LEFT);
    } else {
      $correlativo = str_replace('#', '0', $clase->getNrocon());
    }

    return $correlativo;
  }

  public static function salvarFacapulic($clasemodelo, $grid, $fundec) {
    try {

      if (!$clasemodelo->getId()) {
        $numero = self::generarCorrelativoFacapulic($clasemodelo);
      }
      $clasemodelo->setNrocon($numero);
      self::GrabarGridFacapulic($clasemodelo, $grid);

      if ($clasemodelo->getId()) {
        $clasemodelo->setFecrec(date('Y-m-d'));
        $clasemodelo->setFunrec($fundec);
        if (self::RegistrarCambiosFacapulic($clasemodelo, $fundec) != -1) {
          return 0;
        }
      }


      $clasemodelo->setStaapu('A');
      $clasemodelo->setStadec('N');
      $clasemodelo->save();

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function GrabarGridFacapulic($clasemodelo, $grid) {
    try {
      $x = $grid[0];
      $j = 0;
      while ($j < count($x)) {
        $x[$j]->setNrocon($clasemodelo->getNrocon());
        $x[$j]->setRifcon($clasemodelo->getRifcon());
        $x[$j]->setTipapu($clasemodelo->getTipapu());
        $x[$j]->save();
        $j++;
      }

      $z = $grid[1];
      $j = 0;
      while ($j < count($z)) {
        $z[$j]->delete();
        $j++;
      }

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function RegistrarCambiosFacapulic($clasemodelo, $fundec) {
    try {
      $numero = str_pad('1', 10, '0', STR_PAD_LEFT);
      if (Herramientas::getVerCorrelativo('refmod', 'Fcmodpro', $r)) {
        $encontrado = false;
        while (!$encontrado) {
          $numero = str_pad($r, 10, '0', STR_PAD_LEFT);
          $c = new Criteria();
          $c->add(FcmodproPeer::REFMOD, $numero);
          $resul = FcmodproPeer::doSelectOne($c);
          if ($resul) {
            $r = $r + 1;
          } else {
            $encontrado = true;
          }
        }
      }

      $c = new Fcmodpro();
      $c->setNrocon($clasemodelo->getNrocon());
      $c->setFecmod(date('Y-m-d'));
      $c->setRefmod($numero);
      $c->setTipapu($clasemodelo->getTipapu());
      $c->setFunrec($fundec);
      $c->setDesapu($clasemodelo->getDesapu());
      $c->setDirapu($clasemodelo->getDirapu());

      //Para saber si fue cambiado estos datos se buscan en la BD
      //y se almacenan
      $fcapulic = new Criteria();
      $fcapulic->add(FcapulicPeer::ID, $clasemodelo->getId());
      $reg = FcapulicPeer::doselectone($fcapulic);

      if ($reg) {
        $c->setTipapuant($reg->getTipapu());
        $c->setDesapuant($reg->getDesapu());
        $c->setDirapuant($reg->getDirapu());
        $c->setMonapuant($reg->getMonapu());
      }

      $c->save();

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function EliminarFacapulic($clasemodelo, $grid) {
    try {
      if (self::EliminarGridFacapulic($clasemodelo, $grid) == -1) {
        $clasemodelo->delete();
        return -1;
      }

      return 0;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function EliminarGridFacapulic($clasemodelo, $grid) {
    try {
      $c = new Criteria();
      $c->add(FcapulicdetPeer :: NROCON, $clasemodelo->getNrocon());
      $c->add(FcapulicdetPeer :: RIFCON, $clasemodelo->getRifcon());
      $c->add(FcapulicdetPeer :: TIPAPU, $clasemodelo->getTipapu());
      FcapulicdetPeer :: doDelete($c);

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function FecvSolvencia($edodec, $fecha) {

    if (( $edodec == "P")) {
      return($fecha);
    } else if (( $edodec == "P") && ($fecha < date("Y-m-d"))) {
      return($fecha);
    } else if (( $edodec != "P") && ( $fecha < date("Y-m-d"))) {
      return($fecha);
    }else
      return '';
  }

  public static function FecuSolvencia($edodec, $fechau, $fecha) {
    if ($edodec == "P") {
      return($fechau);
    } else if (( $edodec == "P") && ($fecha) < date("Y-m-d")) {
      return($fechau);
    }
    else
      return '';
  }

  public static function EdodecSolvencia($edodec, $fechav) {
    if (($edodec != "P") && ($fechav < date("Y-m-d"))) {
      $edodecstatus = "D";
    } else {
      $edodecstatus = $edodec;
    }

    return $edodecstatus;
  }

  public static function generarCorrelativoSolvencia($clase) {
    $correlativo = '';

    if ($clase->getCodsol() == '##########') {
      $sql = "select codsol from fcsolvencia where id in (select Max(id) from fcsolvencia where codsol Like 'Z%') ";
      if (Herramientas::BuscarDatos($sql, $result)) {
          $encontrado=false;
           $r = substr($result[0]['codsol'], 1, 6) + 1;
            while (!$encontrado)
            {              
              $correlativo = "Z" . str_pad($r, 6, '0', STR_PAD_LEFT) . "-" . date($clase->getFecexp('y'));
              $sql="select codsol from fcsolvencia where codsol='".$correlativo."'";
              if (Herramientas::BuscarDatos($sql,$result))
              {
                $r=$r+1;
              }
              else
              {
                $encontrado=true;
              }
            }          
        
      } else {
        $valor = 1;
        $correlativo = "Z" . str_pad($valor, 6, '0', STR_PAD_LEFT) . "-" . date($clase->getFecexp('y'));
      }      
    } else {
      $correlativo = str_pad($clase->getCodsol(), 10, '0', STR_PAD_LEFT);
    }

    return $correlativo;
  }

  public static function salvarFacsolvencia($clase, $grid, $gridrs, $fundec) {

    $cod = '';
    if ($clase->getId() == '') {
      $cod = self::generarCorrelativoSolvencia($clase);
      $clase->setCodsol($cod);
      $clase->setStasol("V");
      $c = new Criteria();
      $c->add(FctipsolPeer::CODTIP, $clase->getCodtip());
      $reg = FctipsolPeer::doSelectOne($c);
      //Generar Deuda
      if (count($reg) > 0) {
        if ($reg->getGendeu() == 'S') {
          $fecha = date($clase->getFecexp("d/m/Y"));
          $d = new Criteria();
          $d->add(FcfueprePeer::CODFUE, $reg->getFueing());
          $regis = FcfueprePeer::doSelectOne($d);
          $fcdeclar = new Fcdeclar();
          $fcdeclar->setNumdec('CS ' . substr($cod, 3, 9));
          $fcdeclar->setNumero('01');
          $fcdeclar->setFecven($clase->getFecexp());
          $fcdeclar->setFueing($reg->getFueing());
          $fcdeclar->setFecdec($clase->getFecexp());
          $fcdeclar->setRifcon($clase->getRifcon());
          $fcdeclar->setNombre('EMISIÓN DE SOLVENCIA VÁLIDA HASTA EL ' . $fecha);
          $fcdeclar->setNumRef('CS ' . substr($cod, 3, 9));
          $fcdeclar->setMondec($reg->getMonsol());
          $fcdeclar->setmora(0);
          $fcdeclar->setProntopg(0);
          $fcdeclar->setEdodec('V');
          $fcdeclar->setFundec($fundec);
          $fcdeclar->setNomcon($clase->getNomcon());
          $fcdeclar->setAutliq(0);
          $fcdeclar->setMonabo(0);
          $fcdeclar->setConpag('N');
          $fcdeclar->setAnodec(date($clase->getFecexp('y')));
          if (count($regis) > 0) {
            $fcdeclar->setTipo($regis->getNomabr());
          } else {
            $fcdeclar->setTipo('CyS');
          }
          $fcdeclar->save();
        }
      }
    }

    $edodecstatus = "";
    $ref = explode("-", $clase->getReferencia(),2);
    if (count($ref) > 0) {


      for ($e = 0; $e < count($ref); $e++) {
        if ($e == 0) {
          $clase->setReferencia($ref[$e]);
        } else if ($e == 1) {
          $clase->setCatastro($ref[$e]);
        }
      }
    }

    $clase->save();
    //Grid General
    $x = isset($grid[0]) ? $grid[0] : array();
    $j = 0;
    while ($j < count($x)) {
      if ($cod != '') {
        $x[$j]->setCodsol($cod);
      }
      if ($x[$j]->getEdodecstatus() == 'PAGADA') {
        $edodecstatus = "P";
      } else if ($x[$j]->getEdodecstatus() == 'VIGENTE') {
        $edodecstatus = "V";
      } else if ($x[$j]->getEdodecstatus() == 'VENCIDA') {
        $edodecstatus = "E";
      } else if ($x[$j]->getEdodecstatus() == 'PENDIENTE') {
        $edodecstatus = "D";
      }

      $x[$j]->setEdodec($edodecstatus);
      $x[$j]->save();
      $j++;
    }

    $z = isset($grid[1]) ? $grid[1] : array();
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }
    //Grid resumen
    $y = isset($gridrs[0]) ? $gridrs[0] : array();
    $l = 0;
    while ($l < count($y)) {
      if ($cod != '') {
        $y[$l]->setCodsol($cod);
      }
      if ($y[$l]->getEdodecrsstatus() == 'PAGADA') {
        $edodecstatus = "P";
      } else if ($y[$l]->getEdodecrsstatus() == 'VIGENTE') {
        $edodecstatus = "V";
      } else if ($y[$l]->getEdodecrsstatus() == 'VENCIDA') {
        $edodecstatus = "E";
      } else if ($y[$l]->getEdodecrsstatus() == 'PENDIENTE') {
        $edodecstatus = "D";
      }

      $y[$l]->setEdodec($edodecstatus);
      $y[$l]->save();
      $l++;
    }
    $y = isset($gridrs[1]) ? $gridrs[1] : array();
    $h = 0;
    while ($h < count($y)) {
      $y[$h]->delete();
      $h++;
    }


    return -1;
  }

  public static function eliminarSolvencia($clase) {
    if ($clase->getStasol() != 'N') {


      //Eliminamos los Detalles
      //GENERALES
      $c = new Criteria();
      $c->add(FcsoldetPeer::CODSOL, $clase->getCodsol());
      $reg1 = FcsoldetPeer::doSelect($c);

      if ($reg1) {
        foreach ($reg1 as $v) {
          $v->delete();
        }
      }

      //RESUMEN
      $c = new Criteria();
      $c->add(Fcsoldet2Peer::CODSOL, $clase->getCodsol());
      $reg1 = Fcsoldet2Peer::doSelect($c);

      if ($reg1) {
        foreach ($reg1 as $v) {
          $v->delete();
        }
      }
      
      $p= new Criteria();
      $p->add(FcdeclarPeer::NUMDEC,'CS ' . substr($clase->getCodsol(), 3, 9));
      $p->add(FcdeclarPeer::RIFCON,$clase->getRifcon());
      $p->add(FcdeclarPeer::NUMREF,'CS ' . substr($clase->getCodsol(), 3, 9));
      FcdeclarPeer::doDelete($p);

      $clase->delete();

      return -1;
    } else {
      return 711;
    }
  }

  public static function GrabarGridFacsolvencia($clasemodelo, $grid) {
    //try{
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      $x[$j]->setCodsol($clasemodelo->getCodsol());
      $x[$j]->setCodfue($clasemodelo->getFueing());
      $x[$j]->setObjeto($clasemodelo->getNomabrnumref());
      $x[$j]->setEdodec($clasemodelo->getEdodecgrid());
      $x[$j]->setConpag($clasemodelo->getConpagstatus());
      $x[$j]->save();
      $j++;
    }

    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }

    return -1;

    /* } catch (Exception $ex){
      return 0;
      } */
  }

  public static function GrabarGrid2Facsolvencia($clasemodelo, $grid) {
    // try{
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      $x[$j]->setCodsol($clasemodelo->getCodsol());
      $x[$j]->setCodfue($clasemodelo->getFueing());
      $x[$j]->setObjeto($clasemodelo->getNomabrnumref());
      $x[$j]->setEdodec($clasemodelo->getEdodecgrid());
      $x[$j]->setConpag($clasemodelo->getConpagstatus());
      $x[$j]->save();
      $j++;
    }

    $z = $grid[1];
    $j = 0;
    while ($j < count($z)) {
      $z[$j]->delete();
      $j++;
    }

    return -1;

    /* } catch (Exception $ex){
      return 0;
      } */
  }

  public static function GrabarGridFacrepfisliq($clasemodelo, $grid) {
    try {
      $x = $grid[0];
      $j = 0;
      while ($j < count($x)) {
        if (!$clasemodelo->getId()) {
          $x[$j]->setNumrep($clasemodelo->getNumrep());
        }
        $x[$j]->save();
        $j++;
      }

      $z = $grid[1];
      $j = 0;
      while ($j < count($z)) {
        $z[$j]->delete();
        $j++;
      }

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function GrabarGriddetFacrepfisliq($clasemodelo, $grid) {
    try {
      $x = $grid[0];
      $j = 0;
      while ($j < count($x)) {
        if ($x[$j]->getNum() != '') {

          if (!$clasemodelo->getId()) {
            $x[$j]->setNumrep($clasemodelo->getNumrep());
          }
          $x[$j]->save();
        }
        $j++;
      }

      $z = $grid[1];
      $j = 0;
      while ($j < count($z)) {
        $z[$j]->delete();
        $j++;
      }

      return -1;
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function CrearDeudaReparo($numdecest, $gridD, $clasemodelo) {
    $numero = $clasemodelo->getNumrep();
    $sql = "Select * from fcdeclar where numdec='NINGUNREGISTRO'";
    if (!(Herramientas::BuscarDatos($sql, $result))) {
      $x = $gridD[0];
      $j = 0;
      while ($j < count($x)) {
        $fcdeclar = new Fcdeclar();
        if ($x[$j]->getDescrip() == "IMPUESTO CAUSADO NO DECLARADO, AÑO " . $clasemodelo->getAnniofin()) {
          $fcdeclar->setNumdec(substr($clasemodelo->getNumrep(), 6, 10));
          $fcdeclar->setModo('A');
          $fcdeclar->setAnodec($clasemodelo->getAnniofin());
        } else {
          if ($numdecest != '') {
            $fcdeclar->setNumdec($numdecest);
            $fcdeclar->setOtro($clasemodelo->getNumrep());
            $fcdeclar->setModo('E');
            $fcdeclar->setAnodec((int) $clasemodelo->getAnniofin() + 1);
          }
        }
        $fcdeclar->setTipo($x[$j]->getTipo());
        $fcdeclar->setNombre($x[$j]->getDescrip());
        $fcdeclar->setNumero($j + 1);
        $fcdeclar->setFecven($x[$j]->getFecha());
        $fcdeclar->setFueing($x[$j]->getFuente());
        $fcdeclar->setFecdec($clasemodelo->getFecrep());
        $fcdeclar->setRifcon($clasemodelo->getRifcon());
        $fcdeclar->setMondec($x[$j]->getMonto());
        $fcdeclar->setMora(0);
        $fcdeclar->setProntopg(0);
        $fcdeclar->setEdodec('V');
        $fcdeclar->setFundec($clasemodelo->getFunrec());
        $fcdeclar->save();
        $j++;
      }
    }
  }

  public static function salvarDeclaracionReparo($clasemodelo, $grid) {
    $c = new Criteria();
    $c->add(FcsollicPeer::NUMSOL, $clasemodelo->getNumlic());
    $fcsollic = FcsollicPeer::doSelectOne($c);
    if ($fcsollic) {
      $fcsollic->setStadec('D');
      $fcsollic->save();
    }
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {

      $c = new Criteria();
      $c->add(FcactpicPeer::NUMDOC, $clasemodelo->getNumlic());
      $c->add(FcactpicPeer::CODACT, $x[$j]->getCodact());
      $c->add(FcactpicPeer::ANODEC, $clasemodelo->getAnniofin());
      if ((int) $x[$j]->getAno() <= (int) $clasemodelo->getAnniofin()) {
        $c->add(FcactpicPeer::MODO, "D");
      } else {
        $c->add(FcactpicPeer::MODO, "E");
      }
      $resul = FcactpicPeer::doSelectOne($c);


      if (($resul)) {
        $resul->setMonact($x[$j]->getMonfis());
      } else {
        $resul = new Fcactpic();
        $resul->setNumdoc($clasemodelo->getNumlic());
        $resul->setCodact($x[$j]->getCodact());
        $resul->setMonact($x[$j]->getMonfis());
        $resul->setAnodec($x[$j]->getAnniofin());
        $resul->setModo("A");
      }
      $resul->save();

      $j++;
    }
  }

  public static function salvarFacrepfisliq($clasemodelo, $grid, $gridD) {
    $numdecest = '';
    //try {
    if ($clasemodelo->getNumrep() == '###############') {
      $sql = "Select NumRep as correl from FcRepFis where id in(Select Max(Id)from FcRepFis)";
      if (Herramientas::BuscarDatos($sql, $result)) {
        $valor = $result[0]['correl'] + 1;

        // $clasemodelo->setNumrep('DSHM-RF000001-'.date('y'));
      } else {
        $valor = 1;
      }
      $clasemodelo->setNumrep(str_pad($valor, 15, '0', STR_PAD_LEFT));
    } else {
      $clasemodelo->setNumrep(str_replace('#', '0', $clasemodelo->getNumrep()));
    }
    $sql = "select a.numdec from fcdeclar a, fcdefins b where a.numref= '" . $clasemodelo->getNumlic() . "' and a.fueing=b.codpic and anodec='" . $clasemodelo->getAnniofin() . "' and modo='E'";

    if (!(Herramientas::BuscarDatos($sql, $result))) {
      $tieneestimada = false;
    } else {
      $tieneestimada = true;
      $numdecest = $result[0]['numdec'];
    }
    self::GrabarGridFacrepfisliq($clasemodelo, $grid);
    self::GrabarGriddetFacrepfisliq($clasemodelo, $gridD);
    self::CrearDeudaReparo($numdecest, $gridD, $clasemodelo);
    self::salvarDeclaracionReparo($clasemodelo, $grid);
    $clasemodelo->setFecrec(date('Y-m-d'));
    $clasemodelo->setStaapu('A');
    $clasemodelo->setStadec('N');
    $clasemodelo->setModo('R');
    $clasemodelo->save();

    return -1;

    /* } catch (Exception $ex) {
      return 0;
      } */
  }

  public static function DistSaldoVeh($grid, &$griddeuda=array(), $FechaFin="", $Fechaant="", $Anoveh="", $numpor="", $valori="", $FechaInicio="", $fuente="", $fechadia="") {
    $anocalculo = "";
    $encontro = false;
    $posicion = "";
    $monafo = "";
    $porali = "";
    $anv = "";
    $j = 0;
    $anovig = "";
    $Anolim = "";

    if (count($grid) > 0) {
      for ($i = 0; $i < count($griddeuda); $i++) {
        $anv = substr($griddeuda[$i]['fecven'], 0, 4);
        if ($anocalculo != $anv) {
          $anocalculo = (int) substr($griddeuda[$i]['fecven'], 0, 4);
          $encontro = false;
          $j = 0;
          while ($j < count($grid) && (!$encontro)) {
            $anovig = (int)$grid[$j]->getAnovig();
            if ($anovig >= $anocalculo) {
              $posicion = $j;
              $encontro = true;
            }
            $j = $j + 1;
          }
          if ($encontro) {
            //$posicion = count($grid) - 1;
            $monafo = $grid[$posicion]->getMonafo();
            $porali = $grid[$posicion]->getPorali();
            $Anolim = $grid[$posicion]->getAnolim();
            //$coduso = $grid[$posicion]->getCoduso();
          }
        }

        $annio = 1; //round(H::DateDiff("D", $FechaFin, $Fechaant) / 365);
        $dateFormat = new sfDateFormat('es_VE');    
        $fec1 = $dateFormat->format($Fechaant, 'i', $dateFormat->getInputPattern('d'));
        $fec2 = $dateFormat->format($FechaFin, 'i', $dateFormat->getInputPattern('d'));
         $sql = "select  Extract(year from age('" . $fec2 . "','" . $fec1 . "')) as anopasa";
        if (Herramientas :: BuscarDatos($sql, $result)) {
          $annio= $result[0]['anopasa']+1;
        }        

        
        $anovar = H::getConfApp2('anovar', 'hacienda', 'facvehdec');
        $anoval = H::getConfApp2('anoval', 'hacienda', 'facvehdec');
        $anomen4 = H::getConfApp2('anomen4', 'hacienda', 'facvehdec');
        if ($anovar=='S')
        {
             if ((int)substr($FechaFin,6,4)<=$anoval)
                $griddeuda[$i]["mondec"] = $monafo / ($numpor - 1) * $annio;
             else {
                  if ($anomen4=='S')                  
                      $griddeuda[$i]["mondec"] = H::FormatoMonto((H::toFloat($valori) * ($porali / 100)) / (($numpor - 1)) * $annio);   
                  else
                      $griddeuda[$i]["mondec"] = $monafo / ($numpor - 1) * $annio;
               }
        }else {
        if (((int) substr($griddeuda[$i]['fecven'], 0, 4) - (int) $Anoveh) >= (int) $Anolim) {
          $griddeuda[$i]["mondec"] = H::FormatoMonto($monafo / (($numpor - 1) * $annio));
        } else {
          $griddeuda[$i]["mondec"] = H::FormatoMonto((H::toFloat($valori) * ($porali / 100)) / (($numpor - 1)) * $annio);
        }
        }
      }
      
      //Multas 
     $anodec=substr($fechadia,0,4);
     $sql2="select a.codmul as codmul, a.nommul as nommul, a.tipo as tipo, a.modo as modo, a.monpro as monpro, b.codfuegen as codfuegen
        from fcmultas a, fcfuentesmul b
        where a.tipo='A' and a.tipdec='D' and b.codfue='".$fuente."' and a.codmul=b.codmul";
      if (Herramientas::BuscarDatos($sql2,$result2))
      {
        $z=0;
        while ($z<count($result2))
        {
          if ($result2[$z]["modo"]=='I')
            {
               $fechacompara=$Fechaant;//$FechaInicio;
               $annio2=$annio-1;
            }else if ($result2[$z]["modo"]=='E') {
               $t= new Criteria();
               $t->add(FcfueprePeer::CODFUE,$fuente);
               $reg= FcfueprePeer::doSelectOne($t);
               if ($reg)
                  $fechacompara=$reg->getFecest();
               else
                   $fechacompara=$Fechaant;
            }elseif ($result2[$z]["modo"]=='D') {
               $t= new Criteria();
               $t->add(FcfueprePeer::CODFUE,$fuente);
               $reg= FcfueprePeer::doSelectOne($t);
               if ($reg)
                  $fechacompara=$reg->getFeccie();
               else
                   $fechacompara=$Fechaant;
              $annio2=1;
              }else {
                $fechacompra=$Fechaant;
              }
              //$declaraciontotal=H::toFloat($valori) * ($porali / 100);//H::toFloat($monafo*$annio2);
              $declaraciontotal=H::toFloat($monafo*$annio2);
                /*if ($anodec!="")
                {
                    $fechaantigua=$anodec.substr($fechacompara,4,6);
                    while (H::bisiesto(substr($fechaantigua,0,4)))
                    {
                      $fechaantigua=substr($fechaantigua,0,6).str_pad(((int)substr($fechaantigua,7,2)-1),2,'0',STR_PAD_LEFT);
                    }
                    $fechacompara=$fechaantigua;
                }*/
                //$dias=$fechadia-$fechacompara;
                $dias=H::DateDiff("d", $fechacompara, $fechadia);
                $p= new Criteria();
                $p->add(FcrangosmulPeer::CODMUL,$result2[$z]["codmul"]);
                $p->add(FcrangosmulPeer::DIASDESDE,$dias,Criteria::LESS_EQUAL);
                $p->add(FcrangosmulPeer::DIASHASTA,$dias,Criteria::GREATER_EQUAL);
                $resu= FcrangosmulPeer::doSelectOne($p);
                if ($resu)
                    $montoporc=$resu->getValor();
                else
                    $montoporc=0;
                if ($result2[$z]["monpro"]=='M')
                {
                    if ($montoporc!=0)
                        $monto=$montoporc;
                    else
                        $monto=0;
                }else  {
                   $monto=($declaraciontotal*$montoporc)/100;
                }
                if ($monto!=0)
                {
                   $y=count($griddeuda);
                   $griddeuda[$y]["id"]=1;                   
                   $griddeuda[$y]["numero"]=str_pad($y,2,'0',STR_PAD_LEFT);
                   $griddeuda[$y]["fecven"]=date('d/m/Y',strtotime($fechacompara));
                   $griddeuda[$y]["nombre"]=$result2[$z]["nommul"]." Año ".$anodec;
                   $griddeuda[$y]["tipo"]="MUL";
                   $griddeuda[$y]["mondec"]=number_format($monto,2,',','.');;
                   $griddeuda[$y]["edodecstatus"]="VIGENTE";
                }
            $z++;
        }
      }
      
    }
  }

  public static function DistSaldoOtroIng($valori="", &$griddeuda=array(), $numpor="") {
    $acum = 0;
    for ($i = 0; $i < count($griddeuda); $i++) {
      $monto = H::toFloat($valori) / ($numpor);
      $acum = $acum + H::toFloat($monto);
      $griddeuda[$i]["mondec"] = $monto;
    }
    if ($acum > H::toFloat($valori)) {
      $griddeuda[0]["mondec"] = H::toFloat($griddeuda[0]["mondec"]) - ($acum - H::toFloat($valori));
    } else {
      $griddeuda[0]["mondec"] = H::toFloat($griddeuda[0]["mondec"]) + (H::toFloat($valori) - $acum);
    }
  }

  //Graba la inf. de la declaración de inmueble
  public static function salvarFacdecinm($clasemodelo, $grid) {
    $numdec = "";
    $dateFormat = new sfDateFormat('es_VE');
    $saldo = "";

    //Actualización del estatus de la declaración
    $c = new Criteria();
    $c->add(FcreginmPeer::NROINM, $clasemodelo->getNumref());
    $fcreginm = FcreginmPeer::doSelectOne($c);
    if ($fcreginm) {
      $fcreginm->setEstdec("D");
      $fcreginm->save();
    }
    //Buscar saldo
    self::BuscarSaldo($saldo, $clasemodelo);


    $c = new Criteria();
    $c->add(FcdeclarPeer::NUMDEC, $clasemodelo->getNumdec());
    $fcdeclar = FcdeclarPeer::doSelectOne($c);
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      $fecven = $x[$j]->getFecven();
      $numdec = str_pad($clasemodelo->getNumref(), 10, '0', STR_PAD_LEFT);
      if ($clasemodelo->getId() == "") {
        $fcdeclar = new Fcdeclar();
        //$numdec = substr($numdec, 8, 7) . "-" . substr($fecven, 2, 2);
        $numdec = substr($numdec, 0, 7) . "-" . substr($fecven, 2, 2);
      }
      $fcdeclar->setNumdec($numdec);
      $fcdeclar->setFueing($clasemodelo->getFuentef());
      $fcdeclar->setFecdec($clasemodelo->getFecdec());
      $fcdeclar->setRifcon($clasemodelo->getRifcon());
      $fcdeclar->setNomcon($clasemodelo->getNomcon());
      $fcdeclar->setAnodec((int) substr($fecven, 0, 4));
      $fcdeclar->setOtro($clasemodelo->getCodcatinm());
      $fcdeclar->setNumref($clasemodelo->getNumref());
      $fcdeclar->setTipo($x[$j]->getTipo());
      $fcdeclar->setNombre($x[$j]->getNombre());
      $fcdeclar->setNumero($j + 1);
      $fcdeclar->setMora(H::FormatoMonto(0));
      $fcdeclar->setProntopg(H::FormatoMonto(0));
      $fcdeclar->setFundec($clasemodelo->getFundec());
      $fcdeclar->setFecultpag($clasemodelo->getFeccal());
      $fcdeclar->setFecven($x[$j]->getFecven());

      $fcdeclar->setFecini("01/01/" . substr($fecven, 0, 4));
      $fcdeclar->setFeccie("31/12/" . substr($fecven, 0, 4));
      $fcdeclar->setMondec($x[$j]->getMondec());
      if ((float) $saldo <= (float) ($x[$j]->getMondec())) {
        $fcdeclar->setAutliq($saldo);
      } else {
        $fcdeclar->setAutliq($x[$j]->getMondec());
      }
      //Actualizar Saldo
      self::ActualizarSaldo($clasemodelo, $fcdeclar->getAutliq());

      //EL ESTATUS VA MAL
      if ($fcdeclar->getMondec() == $fcdeclar->getAutliq()) {
        $fcdeclar->setEdodec("P");
      } else if ($x[$j]->getEdodecstatus() == 'VIGENTE') {
        $fcdeclar->setEdodec('V');
      } else if ($x[$j]->getEdodecstatus() == 'VENCIDA') {
        $fcdeclar->setEdodec('E');
      }
      $fcdeclar->setExipaguni($clasemodelo->getExipaguni());

      $fcdeclar->save();
      $j++;
    }
    return -1;
  }

  public static function DistribuirVencimientoPropaganda($FechaDia, $FechaInicio, $fportion, $fportionName, $grid_datos, &$grid= array(), $clasemodelo) {
    try {
      $reg_grid = $grid_datos;

      switch ($fportion) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 6:
        case 12:
          $grid[0]["id"] = '';
          $auxiliar = date('d/m/Y', strtotime(Herramientas::dateAdd('m', (int) 12 / $fportion, $FechaInicio, '-')) - 1);
          $grid[0]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('m', (int) 3, $FechaInicio, '-')) - 1);

          if ($grid[0]["fecven"] >= $FechaDia) {
            $grid[0]["edodecstatus"] = 'VIGENTE';
          } else {
            $grid[0]["edodecstatus"] = 'VENCIDA';
          }

          /* 	if ($fportion == '1')
            {
            $grid[0]["nombre"] = $fportionName." del ".$grid[0]["fecven"];
            }else{
            $grid[0]["nombre"] = $fportionName." del ".$FechaInicio." al ".$grid[0]["fecven"];
            }
           */
          $grid[0]["nombre"] = $clasemodelo->getDespro();

          $grid[0]["tipo"] = 'PAG';

          for ($i = 1; $i < count($reg_grid); $i++) {
            /* 	if ($i > 0){
              $auxiliar= str_replace("/", "-",$grid[$i-1]["fecven"]);
              $FechaInicio = date('d/m/Y',strtotime(Herramientas::dateAdd('d',1,$auxiliar,'+')));
              } */

            $grid[$i]["id"] = '';
            $grid[$i]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('m', (int) 12 / $fportion, $grid[$i - 1]["fecven"], '+')));
            $grid[$i]["tipo"] = 'PAG';
            $grid[$i]["nombre"] = $clasemodelo->getDespro();

//Falta la ultima columna del costo

            $grid[$i]["mondec"] = $clasemodelo->getFrecuencia();

            if ($grid[$i]["fecven"] >= $FechaDia) {
              $grid[$i]["edodecstatus"] = 'VIGENTE';
            } else {
              $grid[$i]["edodecstatus"] = 'VENCIDA';
            }
          }
          break;
        case 24:
          $DiasMax = 0;
          $Ultimo = false;
          $fecha = $FechaInicio;

          if ((substr($fecha, 2, 2) == '4' or substr($fecha, 2, 2) == '6' or substr($fecha, 2, 2) == '9' or substr($fecha, 2, 2) == '11') and substr($fecha, 0, 2) == '30') {
            $Ultimo = true;
          }
          if ((substr($fecha, 2, 2) == '1' or substr($fecha, 2, 2) == '3' or substr($fecha, 2, 2) == '5' or substr($fecha, 2, 2) == '7' or substr($fecha, 2, 2) == '8' or substr($fecha, 2, 2) == '10' or substr($fecha, 2, 2) == '12') and substr($fecha, 0, 2) == '31') {
            $Ultimo = true;
          }

          if (substr($fecha, 2, 2) == '2') {
            if ((substr($fecha, 6, 4) % 4) == '0' and substr($fecha, 2, 2) == '29') {
              $Ultimo = true;
            } else {
              if ((substr($fecha, 6, 4) % 4) <> '0' and substr($fecha, 2, 2) == '28') {
                $Ultimo = true;
              }
            }
          }

          $grid[0]["id"] = '';
          $grid[0]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('m', (int) 15, $FechaInicio, '+')) - 1);

          if ($fportion == '1') {
            $grid[0]["nombre"] = $clasemodelo->getDespro() . " " . $fportionName . " del " . $grid[0]["fecven"];
          } else {
            $grid[0]["nombre"] = $clasemodelo->getDespro() . " " . $fportionName . " del " . $FechaInicio . " al " . $grid[0]["fecven"];
          }

          $grid[0]["tipo"] = strtoupper(substr($clasemodelo->getDespro(), 2, 3));

          if ($grid[0]["fecven"] >= $FechaDia) {
            $grid[0]["edodecstatus"] = 'VIGENTE';
          } else {
            $grid[0]["edodecstatus"] = 'VENCIDA';
          }


          for ($i = 1; $i < count($reg_grid); $i++) {
            $grid[$i]["id"] = '';
            if (($i % 2) == 0) {
              $grid[$i]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('m', 1, $FechaInicio, '+')));
              if ($grid[$i]["fecven"] >= $FechaDia) {
                $grid[$i]["edodecstatus"] = 'VIGENTE';
              } else {
                $grid[$i]["edodecstatus"] = 'VENCIDA';
              }

              if (substr($fecha, 2, 2) == '02') {
                if ($Ultimo) {
                  if (substr($fecha, 0, 2) == '28') {
                    $grid[$i]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('m', 3, $grid[$i]["fecven"], '+')));
                    if ($grid[$i]["fecven"] >= $FechaDia) {
                      $grid[$i]["edodecstatus"] = 'VIGENTE';
                    } else {
                      $grid[$i]["edodecstatus"] = 'VENCIDA';
                    }
                  } else {
                    if (substr($fecha, 0, 2) == '29') {
                      $grid[$i]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('m', 2, $grid[$i]["fecven"], '+')));
                      if ($grid[$i]["fecven"] >= $FechaDia) {
                        $grid[$i]["edodecstatus"] = 'VIGENTE';
                      } else {
                        $grid[$i]["edodecstatus"] = 'VENCIDA';
                      }
                    }
                  }
                } else {
                  if ($DiasMax > 28) {
                    $grid[$i]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('d', $DiasMax - substr($fecha, 0, 2), $grid[$i]["fecven"], '+')));
                    if ($grid[$i]["fecven"] >= $FechaDia) {
                      $grid[$i]["edodecstatus"] = 'VIGENTE';
                    } else {
                      $grid[$i]["edodecstatus"] = 'VENCIDA';
                    }
                  }
                }
              } else {   //substr($fecha,2,2)== '2'
                if ($Ultimo and (((substr($fecha, 2, 2) == '4') or substr($fecha, 2, 2) == '6') or (substr($fecha, 2, 2) == '9') or (substr($fecha, 2, 2) == '11')) and (substr($fecha, 0, 2) == '30')) {
                  $grid[$i]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('d', 1, $grid[$i]["fecven"], '+')));
                  if ($grid[$i]["fecven"] >= $FechaDia) {
                    $grid[$i]["edodecstatus"] = 'VIGENTE';
                  } else {
                    $grid[$i]["edodecstatus"] = 'VENCIDA';
                  }
                }
              }
            } else {
              $grid[$i]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('d', 15, $grid[$i - 1]["fecven"], '+')));
              if ($grid[$i]["fecven"] >= $FechaDia) {
                $grid[$i]["edodecstatus"] = 'VIGENTE';
              } else {
                $grid[$i]["edodecstatus"] = 'VENCIDA';
              }
              $DiasMax = substr($fecha, 0, 2);
              $fecha = $grid[$i - 1]["fecven"];
            }

            if ($fportion == '1') {
              $grid[$i]["nombre"] = $clasemodelo->getDespro() . " " . $fportionName . " del " . $grid[$i]["fecven"];
            } else {
              $grid[$i]["nombre"] = $clasemodelo->getDespro() . " " . $fportionName . " del " . date('d/m/Y', strtotime($grid[($i - 1)]["fecven"]) + 1) . " al " . $grid[$i]["fecven"];
            }

            $grid[$i]["tipo"] = strtoupper(substr($clasemodelo->getDespro(), 2, 3));
          }//FOR
          break;

        case 52:
          $grid[0]["id"] = '';
          $grid[0]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('d', 7, $FechaInicio - 1, '-')));
          if ($fportion == '1') {
            $grid[0]["nombre"] = $clasemodelo->getDespro() . " " . $fportionName . " del " . $FechaInicio;
          } else {
            $grid[0]["nombre"] = $clasemodelo->getDespro() . " " . $fportionName . " del " . $FechaInicio . " al " . $grid[0]["fecven"];
          }

          $grid[0]["tipo"] = strtoupper(substr($clasemodelo->getDespro(), 2, 3));
          if ($grid[0]["fecven"] >= $FechaDia) {
            $grid[0]["edodecstatus"] = 'VIGENTE';
          } else {
            $grid[0]["edodecstatus"] = 'VENCIDA';
          }

          for ($i = 1; $i < count($reg_grid); $i++) {
            $grid[$i]["id"] = '';
            $grid[$i]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('d', 7, $grid[$i - 1]["fecven"], '+')));

            if ($grid[$i]["fecven"] >= $FechaDia) {
              $grid[$i]["edodecstatus"] = 'VIGENTE';
            } else {
              $grid[$i]["edodecstatus"] = 'VENCIDA';
            }

            $grid[$i]["tipo"] = strtoupper(substr($clasemodelo->getDespro(), 2, 3));

            if ($fportion == '1') {
              $grid[$i]["nombre"] = $clasemodelo->getDespro() . " " . $fportionName . " del " . $grid[$i]["fecven"];
            } else {
              $grid[$i]["nombre"] = $clasemodelo->getDespro() . " " . $fportionName . " del " . date('d/m/Y', strtotime($grid[$i - 1]["fecven"]) + 1) . " al " . $grid[$i]["fecven"];
            }
          }
          break;


        case 365:
          $grid[0]["id"] = '';
          $grid[0]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('d', 1, $FechaInicio - 1, '+')));
          if ($fportion == '1') {
            $grid[0]["nombre"] = $clasemodelo->getDespro() . " " . $fportionName . " del " . $FechaInicio;
          } else {
            $grid[0]["nombre"] = $clasemodelo->getDespro() . " " . $fportionName . " del " . $FechaInicio . " al " . $grid[0]["fecven"];
          }

          $grid[0]["tipo"] = strtoupper(substr($fportionName, 2, 3));
          if ($grid[0]["fecven"] >= $FechaDia) {
            $grid[0]["edodecstatus"] = 'VIGENTE';
          } else {
            $grid[0]["edodecstatus"] = 'VENCIDA';
          }

          for ($i = 1; $i < count($reg_grid); $i++) {
            $grid[$i]["id"] = '';
            $grid[$i]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('d', 1, $grid[$i - 1]["fecven"], '+')));

            if ($grid[$i]["fecven"] >= $FechaDia) {
              $grid[$i]["edodecstatus"] = 'VIGENTE';
            } else {
              $grid[$i]["edodecstatus"] = 'VENCIDA';
            }

            $grid[$i]["tipo"] = strtoupper(substr($clasemodelo->getDespro(), 2, 3));

            if ($fportion == '1') {
              $grid[$i]["nombre"] = $clasemodelo->getDespro() . " " . $fportionName . " del " . $grid[$i]["fecven"];
            } else {
              $grid[$i]["nombre"] = $clasemodelo->getDespro() . " " . $fportionName . " del " . date('d/m/Y', strtotime($grid[$i - 1]["fecven"]) + 1) . " al " . $grid[$i]["fecven"];
            }
          }
          break;
      }
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function saveFacprodec($clasemodelo, $grid, $gridDeuda) {

    $x = $gridDeuda[0];
    $y = $grid[0];
    $fecha = '';
    $fecha = $clasemodelo->getFeccie();
    if (!$clasemodelo->getId()) { //COTIZACION NUEVA
      $annio = substr($fecha, 2, 2);
      $numero = "P" . substr($clasemodelo->getNumref(), 3, 6) . "-" . $annio;
      $sql = "select numdec from fcdeclar where numdec='" . $numero . "'";
      if (Herramientas::BuscarDatos($sql, $result)) {
        return 708;
      } else {
        $clasemodelo->setNumdec($numero);
      }
    }

    //Cambio de estatus de la declaración
    $c = new Criteria();
    $c->add(FcprolicPeer::NROCON, $clasemodelo->getNumref());
    $reg = FcprolicPeer::doSelectone($c);
    if ($reg) {
      $reg->setStadec('D');
      $reg->save();
    }

    $c = new Criteria();
    $c->add(FcabonosPeer::RIFCON, $clasemodelo->getRifcon());
    $c->add(FcabonosPeer::FUEING, '04');
    $c->add(FcabonosPeer::STAPAG, 'N');
    $reg = FcabonosPeer::doSelectone($c);
    if ($reg) {
      $saldo = $reg->getSalpag();
    } else {
      $saldo = 0;
    }


    $j = 0;
    while ($j < count($x)) {
      if (!$clasemodelo->getId()) {
        $x[$j]->setNumdec($clasemodelo->getNumdec());
        $x[$j]->setFueing($clasemodelo->getFuente());
        $x[$j]->setFecdec($clasemodelo->getFecdec());
        $x[$j]->setNumref($clasemodelo->getNumref());
      }
      $x[$j]->setFeccie($fecha);
      $x[$j]->setFecini($clasemodelo->getFecini());
      $x[$j]->setNomcon($clasemodelo->getNomcon());
      $x[$j]->setRifcon($clasemodelo->getRifcon());
      $x[$j]->setMora(0);
      $x[$j]->setProntopg(0);
      $x[$j]->setNumpag($clasemodelo->getNumpag());
      $x[$j]->setFundec($clasemodelo->getFundec());

      $c = new Criteria();
      $c->add(FcfueprePeer::CODFUE, $clasemodelo->getFuente());
      $reg = FcfueprePeer::doSelectone($c);

      if ($reg) {
        $reg->setDeufec($reg->getDeufec() + $x[$j]->getMondec());
        $reg->save();
      }

      if ($saldo <= $x[$j]->getMondec()) {
        $x[$j]->setAutliq($saldo);
      } else {
        $x[$j]->setAutliq($x[$j]->getMondec());
      }

      $saldo = $saldo - $x[$j]->getMondec();

      if ($saldo < 0) {
        $saldo = 0;
      }

      if ($x[$j]->getEdodecstatus() == 'VIGENTE') {
        $x[$j]->setEdodec('V');
      } elseif ($x[$j]->getEdodecstatus() == 'VENCIDA') {
        $x[$j]->setEdodec('E');
      }

      if ($x[$j]->getMondec() == $clasemodelo->getAutliq()) {
        $x[$j]->setEdodec('P');
      }


      $x[$j]->save();
      $j++;
    }


    return -1;
  }

  public static function saveFacespdec($clasemodelo, $grid, $gridDeuda) {
    try {
      $x = $gridDeuda[0];
      $y = $grid[0];
      $fecha = $clasemodelo->getFeccie();

      if (!$clasemodelo->getId()) { //COTIZACION NUEVA
        $numero = "S" . substr($clasemodelo->getNumref(), 3, 6) . "-" . substr($fecha, 2, 2);
        $sql = "select numdec from fcdeclar where numdec='" . $numero . "'";
        if (Herramientas::BuscarDatos($sql, $result)) {
          return 709;
        } else {
          $clasemodelo->setNumdec($numero);
        }
      }
      //Cambio de estatus declaración
      $c = new Criteria();
      $c->add(FcesplicPeer::NROCON, $clasemodelo->getNumref());
      $reg = FcesplicPeer::doSelectone($c);
      if ($reg) {
        $reg->setStadec('D');
        $reg->save();
      }
      //Saldo_Abono

      $c = new Criteria();
      $c->add(FcabonosPeer::RIFCON, $clasemodelo->getRifcon());
      $c->add(FcabonosPeer::FUEING, '05');
      $c->add(FcabonosPeer::STAPAG, 'N');
      $reg = FcabonosPeer::doSelectone($c);
      if ($reg) {
        $saldo = $reg->getSalpag();
      } else {
        $saldo = 0;
      }
      $j = 0;

      while ($j < count($x)) {
        $x[$j]->setNumdec($clasemodelo->getNumdec());
        $x[$j]->setFueing($clasemodelo->getFuente());
        $x[$j]->setFecdec($clasemodelo->getFecdec());
        $x[$j]->setRifcon($clasemodelo->getRifcon());
        $x[$j]->setNumref($clasemodelo->getNumref());
        $x[$j]->setMora(0);
        $x[$j]->setProntopg(0);
        $x[$j]->setNumpag($clasemodelo->getNumpag());
        $x[$j]->setFundec($clasemodelo->getFundec());
        $x[$j]->setNomcon($clasemodelo->getNomcon());
        $x[$j]->setFeccie($fecha);
        $x[$j]->setFecini($clasemodelo->getFecini());
        $c = new Criteria();
        $c->add(FcfueprePeer::CODFUE, $clasemodelo->getFuente());
        $reg = FcfueprePeer::doSelectone($c);
        if ($reg) {
          $reg->setDeufec($reg->getDeufec() + $x[$j]->getMondec());
          $reg->save();
        }

        if ($saldo <= $x[$j]->getMondec()) {
          $x[$j]->setAutliq($saldo);
        } else {
          $x[$j]->setAutliq($x[$j]->getMondec());
        }

        $saldo = $saldo - $x[$j]->getMondec();
        $monto = $x[$j]->getAutliq();
        //Actualizar_Saldo
        $c = new Criteria();
        $c->add(FcabonosPeer::RIFCON, $clasemodelo->getRifcon());
        $c->add(FcabonosPeer::FUEING, '05');
        $c->add(FcabonosPeer::STAPAG, 'N');
        $reg = FcabonosPeer::doSelectone($c);
        if ($reg) {
          foreach ($reg as $datos) {
            if ($monto > 0) {
              if ($datos->getSalpag() >= $monto) {
                $datos->setSalpag($datos->getSalpag() - $monto);
              } else {
                $datos->setSalpag(0);
                $monto = $monto - $datos->getSalpag();
              }
              if ($datos->getSalpag() == 0) {
                $datos->setStapag('S');
              }
            }
            $datos->save();
          }
        }
        ////////////////

        if ($saldo < 0) {
          $saldo = 0;
        }

        if ($x[$j]->getEdodecstatus() == 'VIGENTE') {
          $x[$j]->setEdodec('V');
        } elseif ($x[$j]->getEdodecstatus() == 'VENCIDA') {
          $x[$j]->setEdodec('E');
        }

        if ($x[$j]->getMondec() == $clasemodelo->getAutliq()) {
          $x[$j]->setEdodec('P');
        }

        $x[$j]->save();
        $j++;
      }


      return -1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function EliminarFacespdec($clasemodelo) {
    try {
      $c = new Criteria();
      $c->add(FcdeclarPeer::NUMDEC, $clasemodelo->getNumdec());
      $c->add(FcdeclarPeer::RIFCON, $clasemodelo->getRifcon());
      $c->add(FcdeclarPeer::NUMREF, $clasemodelo->getNumref());
      FcdeclarPeer::doDelete($c);

      $c = new Criteria();
      $c->add(FcesplicPeer::NROCON, $clasemodelo->getNumref());
      $reg = FcesplicPeer::doSelectone($c);
      if ($reg) {
        $reg->getStadec('N');
        $reg->save();
      }

      return -1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function saveFacapudec($clasemodelo, $grid, $gridDeuda) {
    try {
      $x = $gridDeuda[0];
      $y = $grid[0];
      $fecha = $clasemodelo->getFeccie();

      if (!$clasemodelo->getId()) { //COTIZACION NUEVA
        $numero = "A" . substr($clasemodelo->getNumref(), 3, 6) . "-" . substr($fecha, 2, 2);
        $sql = "select numdec from fcdeclar where numdec='" . $numero . "'";
        if (Herramientas::BuscarDatos($sql, $result)) {
          return 710;
        } else {
          $clasemodelo->setNumdec($numero);
        }
      }
      //Cambio de estatus declaración
      $c = new Criteria();
      $c->add(FcapulicPeer::NROCON, $clasemodelo->getNumref());
      $reg = FcapulicPeer::doSelectone($c);
      if ($reg) {
        $reg->setStadec('D');
        $reg->save();
      }
      //Saldo_Abono

      $c = new Criteria();
      $c->add(FcabonosPeer::RIFCON, $clasemodelo->getRifcon());
      $c->add(FcabonosPeer::FUEING, '06');
      $c->add(FcabonosPeer::STAPAG, 'N');
      $reg = FcabonosPeer::doSelectone($c);
      if ($reg) {
        $saldo = $reg->getSalpag();
      } else {
        $saldo = 0;
      }
      $j = 0;

      while ($j < count($x)) {
        $x[$j]->setNumdec($clasemodelo->getNumdec());
        $x[$j]->setFueing($clasemodelo->getFuente());
        $x[$j]->setFecdec($clasemodelo->getFecdec());
        $x[$j]->setRifcon($clasemodelo->getRifcon());
        $x[$j]->setNumref($clasemodelo->getNumref());
        $x[$j]->setMora(0);
        $x[$j]->setProntopg(0);
        $x[$j]->setNumpag($clasemodelo->getNumpag());
        $x[$j]->setFundec($clasemodelo->getFundec());
        $x[$j]->setNomcon($clasemodelo->getNomcon());
        $x[$j]->setFeccie($fecha);
        $x[$j]->setFecini($clasemodelo->getFecini());
        //Acumular deuda
        $c = new Criteria();
        $c->add(FcfueprePeer::CODFUE, $clasemodelo->getFuente());
        $reg = FcfueprePeer::doSelectone($c);
        if ($reg) {
          $reg->setDeufec($reg->getDeufec() + $x[$j]->getMondec());
          $reg->save();
        }

        if ($saldo <= $x[$j]->getMondec()) {
          $x[$j]->setAutliq($saldo);
        } else {
          $x[$j]->setAutliq($x[$j]->getMondec());
        }

        $saldo = $saldo - $x[$j]->getMondec();
        $monto = $x[$j]->getAutliq();
        //Actualizar_Saldo
        $c = new Criteria();
        $c->add(FcabonosPeer::RIFCON, $clasemodelo->getRifcon());
        $c->add(FcabonosPeer::FUEING, '06');
        $c->add(FcabonosPeer::STAPAG, 'N');
        $reg = FcabonosPeer::doSelectone($c);
        if ($reg) {
          foreach ($reg as $datos) {
            if ($monto > 0) {
              if ($datos->getSalpag() >= $monto) {
                $datos->setSalpag($datos->getSalpag() - $monto);
              } else {
                $datos->setSalpag(0);
                $monto = $monto - $datos->getSalpag();
              }
              if ($datos->getSalpag() == 0) {
                $datos->setStapag('S');
              }
            }
            $datos->save();
          }
        }
        ////////////////

        if ($saldo < 0) {
          $saldo = 0;
        }

        if ($x[$j]->getEdodecstatus() == 'VIGENTE') {
          $x[$j]->setEdodec('V');
        } elseif ($x[$j]->getEdodecstatus() == 'VENCIDA') {
          $x[$j]->setEdodec('E');
        }

        if ($x[$j]->getMondec() == $clasemodelo->getAutliq()) {
          $x[$j]->setEdodec('P');
        }

        $x[$j]->save();
        $j++;
      }


      return -1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function EliminarFacapudec($clasemodelo) {
    try {
      $c = new Criteria();
      $c->add(FcapulicPeer::NROCON, $clasemodelo->getNumref());
      $reg = FcapulicPeer::doSelectone($c);
      if ($reg) {
        $reg->getStadec('N');
        $reg->save();
      }
      $c = new Criteria();
      $c->add(FcdeclarPeer::NUMDEC, $clasemodelo->getNumdec());
      $c->add(FcdeclarPeer::RIFCON, $clasemodelo->getRifcon());
      $c->add(FcdeclarPeer::NUMREF, $clasemodelo->getNumref());
      FcdeclarPeer::doDelete($c);

      return -1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function generarCorrelativoConvenio($clase) {
    $tienecorrelativo = false;
    $correlativo = '';

    if ($clase->getCodsol() == '##########') {
      if (Herramientas::getVerCorrelativo('refcon', 'fcconpag', $r)) { // Buscar Correlativo
        $tienecorrelativo = true;
        $encontrado = false;

        while (!$encontrado) {
          $r1 = str_pad($r, 6, '0', STR_PAD_LEFT);
          $numero = "DHM" . substr($r1, 2, strlen($r1)) . "/" . date($clase->getFeccon('y'));
          $sql = "select refcon from fcconpag where refcon ='" . $numero . "'";
          if (Herramientas::BuscarDatos($sql, $result)) {
            $r = $r + 1;
          } else {
            $encontrado = true;
          }
        }

        $correlativo = str_pad($r, 6, '0', STR_PAD_LEFT);
      }
    } else {
      $correlativo = str_replace('#', '0', $clase->getCodsol());
    }

    /* if ($tienecorrelativo==true)
      {
      Herramientas::getSalvarCorrelativo('reftra','cpsoltrasla','Referencia',$correlativo,&$msg);
      } */
    return $correlativo;
  }

  public static function salvarConvenio($clase, $gridC, $gridP, $gridR) {
    //GUARDA CONVENIO
    $cod = self::generarCorrelativoConvenio($clase);
    $refcon = "DHM" . substr($cod, 2, strlen($cod)) . "/" . date($clase->getFeccon('y'));

    $clase->setRefcon($refcon);
    $clase->setStacon("N");
    $clase->save();

    //GRABAR DETALLE CONVENIO
    //EN CASO DE MODIFICACION, Elimina los datos viejos
    $c = new Criteria();
    $c->add(FcdetconPeer::REFCON, $refcon);
    $reg = FcdetconPeer::doSelect($c);

    if ($reg) {
      foreach ($reg as $r) {
        $r->delete();
      }
    }

    $gridS = $gridC[0];

    $i = 0;
    $con = 1;
    while ($i < count($gridS)) {
      if ($gridS[$i]) {
        $c2 = new Fcdetcon();
        $c2->setRefcon($refcon);
        $c2->setDescuo($gridS[$i]['descuo']);
        $c2->setObscuo($gridS[$i]['obscuo']);
        $c2->setFecven($gridS[$i]['fecven']);
        $c2->setMoncuo($gridS[$i]['moncuo']);
        $c2->setMonpag(0);
        $c2->setNumdec($refcon);
        $c2->setNumcuo($con);
        $c2->save();
        $i++;
        $con++;
      } else {
        $i++;
      }
    }

    //GRABAR DETALLE CONVENIO POR DESGLOSADO POR FUENTE
    //EN CASO DE MODIFICACION, Elimina los datos viejos
    $c = new Criteria();
    $c->add(FcdetconfuePeer::REFCON, $refcon);
    $reg = FcdetconfuePeer::doSelect($c);

    if ($reg) {
      foreach ($reg as $r) {
        $r->delete();
      }
    }

    $gridS = $gridR[0];

    $i = 0;
    $con = 1;
    while ($i < count($gridS)) {
      if ($gridS[$i]) {
        $c2 = new Fcdetconfue();
        $c2->setRefcon($refcon);
        $c2->setDescuo($gridS[$i]['descuo']);
        $c2->setObscuo($gridS[$i]['obscuo']);
        $c2->setFecven($gridS[$i]['fecven']);
        $c2->setMoncuo($gridS[$i]['moncuo']);
        $c2->setMonpag(0);
        $c2->setFuente($gridS[$i]['fuente']);
        $c2->setNumdec($refcon);
        $c2->setNumcuo($con);
        $c2->save();
        $i++;
        $con++;
      } else {
        $i++;
      }
    }

    //Actualiza Deudas Antiguas
    $gridS = $gridP[0];

    $i = 0;
    $con = 1;
    while ($i < count($gridS)) {
      if ($gridS[$i]) {
        $c2 = new Fcdeucon();
        $c2->setRefcon($refcon);
        $c2->setFecven($gridS[$i]['fecven']);
        $c2->setFueing($gridS[$i]['fuente']);
        $c2->setNumdec($gridS[$i]['numdec']);
        $c2->setNumero($con);
        $c2->save();


        $c = new Criteria();
        $c->add(FcdeclarPeer::NUMDEC, $gridS[$i]['numdec']);
        $c->add(FcdeclarPeer::NUMREF, $refcon);
        $c->add(FcdeclarPeer::FECVEN, $gridS[$i]['fecven']);
        $c->add(FcdeclarPeer::FUEING, $gridS[$i]['fueing']);

        $c3 = new Fcdeclar();


        $i++;
        $con++;
      } else {
        $i++;
      }
    }

    return -1;
  }

  /*


    ' actualizar deudas antiguas
    For Pos = 1 To GridBd1.Rows - 1
    If Trim(GridBd1.TextMatrix(Pos, 0)) <> "" Then
    Sql = "Select * from FCDeuCon"
    Set Tabla2 = DataBaseGrid.OpenResultset(Sql, rdOpenDynamic, rdConcurRowVer, rdExecDirect)


    Sql = "Select * from FCDECLAR where NumDec='" + GridBd1.TextMatrix(Pos, 3) + "' and NumRef='" + GridBd1.TextMatrix(Pos, 4) + "' and TO_CHAR(FecVen,'dd/mm/yyyy')='" + GridBd1.TextMatrix(Pos, 6) + "' And Numero='" + GridBd1.TextMatrix(Pos, 1) + "' AND FueIng='" + GridBd1.TextMatrix(Pos, 15) + "'"
    Set TablaPagos = DataBaseGrid.OpenResultset(Sql, rdOpenDynamic, rdConcurRowVer, rdExecDirect)
    TablaPagos.Edit
    TablaPagos!EdoDec = "P"
    TablaPagos!AutLiq = TablaPagos!MonDec
    TablaPagos!ConPAG = "S"
    '         LaFuente = TablaPagos!Fueing
    TablaPagos.Update
    TablaPagos.Close
    End If
    Next

    ' generar deudas nuevas
    Sql = "Select * from FCDECLAR"
    Set FCDeclar = DataBaseGrid.OpenResultset(Sql, rdOpenDynamic, rdConcurRowVer, rdExecDirect)

    For Pos = 1 To GridBd5.Rows - 1
    ''      Numero = "C" + FILL(CStr(Pos), "0", 2, 1) + Mid(DatosIns(0).Text, 4, 7)
    ''      Numero = "C" + FILL(CStr(Pos), "0", 2, 1) + Mid(DatosIns(0).Text, 4, 7)
    FCDeclar.AddNew
    FCDeclar!NumDec = DatosIns(0).Text ''"C" & FILL(CStr(Pos), "0", 2, 1) & Mid(DatosIns(0).Text, 4, 7)
    FCDeclar!Numero = FILL(CStr(Pos), "0", 2, 1)
    FCDeclar!FecVen = CDate(GridBd5.TextMatrix(Pos, 0))
    FCDeclar!Fueing = GridBd5.TextMatrix(Pos, 5)
    FCDeclar!FecDec = Fechas(0).Text
    FCDeclar!RifCon = FILL(DatosIns(1).Text, " ", 14, 3)
    FCDeclar!Tipo = "CVP"
    FCDeclar!Nombre = Trim(GridBd5.TextMatrix(Pos, 2)) + " Porcion Corresp. a " + Trim(GridBd5.TextMatrix(Pos, 1))
    FCDeclar!NumRef = DatosIns(0).Text
    FCDeclar!MonDec = CDbl(GridBd5.TextMatrix(Pos, 4))
    FCDeclar!mora = CDbl(0)
    FCDeclar!AutLiq = CDbl(0)
    FCDeclar!ProntoPg = CDbl(0)
    FCDeclar!EdoDec = "V"
    FCDeclar!ConPAG = "S"
    FCDeclar!FUNDEC = NomUsu
    FCDeclar.Update
    Next
    FCDeclar.Close
    'GenerarPago
    Exit Sub

    errores:
    If Err.Number > 0 Then
    m = MsgBox("Advertencia Número: " + Str(Err.Number) + " en el sistema (" + Err.Description + ")", vbCritical, "Facturación de Hacienda Municipal")
    Err.Clear
    Limpiar
    Exit Sub
    End If 'err.number
    End Sub
   */

  public static function Buscar_CodigoHijo($codcatfis) {
    $sql = "Select * from fccatfis where codcatfis Like '" . $codcatfis . "%'";
    if (Herramientas::BuscarDatos($sql, $result)) {
      if (count($result) > 1)
        return true;
      else
        return false;
    }
    else {
      return false;
    }
  }

  public static function buscarEstIng($codpar='', $ano='', &$totest='0,00', &$arreglo=array()) {
    $totest = "0,00";
    $arreglo = array();
    $sql = "select perest as perest, sum(monto) as monto from fcesting where codpar='" . $codpar . "' and ano='" . $ano . "' group by perest";
    if (Herramientas::BuscarDatos($sql, $result)) {
      $i = 0;
      while ($i < count($result)) {
        if ($result[$i]["perest"] != '00') {
          $j = count($arreglo) + 1;
          switch ($result[$i]["perest"]) {
            case '01':
              $arreglo[$j - 1]["perest2"] = 'ENERO';
              $arreglo[$j - 1]["monto"] = number_format($result[$i]["monto"], 2, ',', '.');
              $arreglo[$j - 1]["id"] = "9";
              break;
            case '02':
              $arreglo[$j - 1]["perest2"] = 'FEBRERO';
              $arreglo[$j - 1]["monto"] = number_format($result[$i]["monto"], 2, ',', '.');
              $arreglo[$j - 1]["id"] = "9";
              break;
            case '03':
              $arreglo[$j - 1]["perest2"] = 'MARZO';
              $arreglo[$j - 1]["monto"] = number_format($result[$i]["monto"], 2, ',', '.');
              $arreglo[$j - 1]["id"] = "9";
              break;
            case '04':
              $arreglo[$j - 1]["perest2"] = 'ABRIL';
              $arreglo[$j - 1]["monto"] = number_format($result[$i]["monto"], 2, ',', '.');
              $arreglo[$j - 1]["id"] = "9";
              break;
            case '05':
              $arreglo[$j - 1]["perest2"] = 'MAYO';
              $arreglo[$j - 1]["monto"] = number_format($result[$i]["monto"], 2, ',', '.');
              $arreglo[$j - 1]["id"] = "9";
              break;
            case '06':
              $arreglo[$j - 1]["perest2"] = 'JUNIO';
              $arreglo[$j - 1]["monto"] = number_format($result[$i]["monto"], 2, ',', '.');
              $arreglo[$j - 1]["id"] = "9";
              break;
            case '07':
              $arreglo[$j - 1]["perest2"] = 'JULIO';
              $arreglo[$j - 1]["monto"] = number_format($result[$i]["monto"], 2, ',', '.');
              $arreglo[$j - 1]["id"] = "9";
              break;
            case '08':
              $arreglo[$j - 1]["perest2"] = 'AGOSTO';
              $arreglo[$j - 1]["monto"] = number_format($result[$i]["monto"], 2, ',', '.');
              $arreglo[$j - 1]["id"] = "9";
              break;
            case '09':
              $arreglo[$j - 1]["perest2"] = 'SEPTIEMBRE';
              $arreglo[$j - 1]["monto"] = number_format($result[$i]["monto"], 2, ',', '.');
              $arreglo[$j - 1]["id"] = "9";
              break;
            case '10':
              $arreglo[$j - 1]["perest2"] = 'OCTUBRE';
              $arreglo[$j - 1]["monto"] = number_format($result[$i]["monto"], 2, ',', '.');
              $arreglo[$j - 1]["id"] = "9";
              break;
            case '11':
              $arreglo[$j - 1]["perest2"] = 'NOVIEMBRE';
              $arreglo[$j - 1]["monto"] = number_format($result[$i]["monto"], 2, ',', '.');
              $arreglo[$j - 1]["id"] = "9";
              break;
            case '12':
              $arreglo[$j - 1]["perest2"] = 'DICIEMBRE';
              $arreglo[$j - 1]["monto"] = number_format($result[$i]["monto"], 2, ',', '.');
              $arreglo[$j - 1]["id"] = "9";
              break;
          }
        } else {
          $totest = number_format($result[$i]["monto"], 2, ',', '.');
        }
        $i++;
      }
    }
  }

  public static function distribuirPeriodos($totest, &$arreglo) {
    $valor = H::toFloat($totest) / 12;
    $arreglo = array();
    $total = 0;
    $totalgen = 0;
    $i = 1;
    while ($i <= 12) {
      $j = count($arreglo) + 1;

      switch ($i) {
        case 1:
          $arreglo[$j - 1]["perest2"] = 'ENERO';
          $arreglo[$j - 1]["monto"] = number_format($valor, 2, ',', '.');
          $arreglo[$j - 1]["id"] = "9";
          break;
        case 2:
          $arreglo[$j - 1]["perest2"] = 'FEBRERO';
          $arreglo[$j - 1]["monto"] = number_format($valor, 2, ',', '.');
          $arreglo[$j - 1]["id"] = "9";
          break;
        case 3:
          $arreglo[$j - 1]["perest2"] = 'MARZO';
          $arreglo[$j - 1]["monto"] = number_format($valor, 2, ',', '.');
          $arreglo[$j - 1]["id"] = "9";
          break;
        case 4:
          $arreglo[$j - 1]["perest2"] = 'ABRIL';
          $arreglo[$j - 1]["monto"] = number_format($valor, 2, ',', '.');
          $arreglo[$j - 1]["id"] = "9";
          break;
        case 5:
          $arreglo[$j - 1]["perest2"] = 'MAYO';
          $arreglo[$j - 1]["monto"] = number_format($valor, 2, ',', '.');
          $arreglo[$j - 1]["id"] = "9";
          break;
        case 6:
          $arreglo[$j - 1]["perest2"] = 'JUNIO';
          $arreglo[$j - 1]["monto"] = number_format($valor, 2, ',', '.');
          $arreglo[$j - 1]["id"] = "9";
          break;
        case 7:
          $arreglo[$j - 1]["perest2"] = 'JULIO';
          $arreglo[$j - 1]["monto"] = number_format($valor, 2, ',', '.');
          $arreglo[$j - 1]["id"] = "9";
          break;
        case 8:
          $arreglo[$j - 1]["perest2"] = 'AGOSTO';
          $arreglo[$j - 1]["monto"] = number_format($valor, 2, ',', '.');
          $arreglo[$j - 1]["id"] = "9";
          break;
        case 9:
          $arreglo[$j - 1]["perest2"] = 'SEPTIEMBRE';
          $arreglo[$j - 1]["monto"] = number_format($valor, 2, ',', '.');
          $arreglo[$j - 1]["id"] = "9";
          break;
        case 10:
          $arreglo[$j - 1]["perest2"] = 'OCTUBRE';
          $arreglo[$j - 1]["monto"] = number_format($valor, 2, ',', '.');
          $arreglo[$j - 1]["id"] = "9";
          break;
        case 11:
          $arreglo[$j - 1]["perest2"] = 'NOVIEMBRE';
          $arreglo[$j - 1]["monto"] = number_format($valor, 2, ',', '.');
          $arreglo[$j - 1]["id"] = "9";
          break;
        case 12:
          $monto = H::toFloat($totest) - $totalgen;
          $arreglo[$j - 1]["perest2"] = 'DICIEMBRE';
          $arreglo[$j - 1]["monto"] = number_format($monto, 2, ',', '.');
          $arreglo[$j - 1]["id"] = "9";
          break;
      }
      $totalgen = H::toFloat($totalgen) + H::toFloat($valor);
      $i++;
    }
  }

  public static function grabarClasificadorIngresos($fcpreing, $grid) {
    if (!$fcpreing->getId())
      $fcpreing->setEstcie('N');

    $fcpreing->save();

    if ($fcpreing->getEstcie() == 'N') {
      $c = new Criteria();
      $c->add(FcestingPeer::CODPAR, $fcpreing->getCodpar());
      $c->add(FcestingPeer::ANO, $fcpreing->getAnno());
      FcestingPeer::doDelete($c);

      if (H::toFloat($fcpreing->getTotalest()) != 0) {
        $x = $grid[0];
        if (count($x) != 0) {
          $j = 0;
          while ($j < count($x)) {
            $disting = new Fcesting();
            $disting->setCodpar($fcpreing->getCodpar());
            $disting->setAno($fcpreing->getAnno());
            $disting->setPerest(str_pad($j + 1, 2, '0', STR_PAD_LEFT));
            $disting->setMonto($x[$j]->getMonto());
            $disting->save();
            $j++;
          }
          $disting = new Fcesting();
          $disting->setCodpar($fcpreing->getCodpar());
          $disting->setAno($fcpreing->getAnno());
          $disting->setPerest('00');
          $disting->setMonto(H::toFloat($fcpreing->getTotalest()));
          $disting->save();
        }
      }
    }
  }

  public static function verificarNroControlPago($numcontrol) {
    $sql = "Select * From FcPagos Where NumPag = '" . $numcontrol . "'";
    if (Herramientas :: BuscarDatos($sql, $result)) {
      return true;
    } else {
      return false;
    }
  }

  public static function verificarNroControlDec($numcontrol) {
    $sql = "Select * From FcDeclar Where NumDec = '" . $numcontrol . "'";
    if (Herramientas :: BuscarDatos($sql, $result)) {
      return true;
    } else {
      return false;
    }
  }

  public static function CalculoDeclaracion($fuente, &$porcion="", &$fportion="", &$fname="", &$diaven="", &$tipoven="") {

    $datos = Constantes::Porciones();
    $c = new Criteria();
    $c->add(FcfueprePeer::CODFUE, $fuente);
    $fcfuepre = FcfueprePeer::doSelectOne($c);
    if ($fcfuepre) {
      if ($fcfuepre->getFrecob() == 999) {
        $porcion = 1;
        $fname = "PAGO UNICO";
      } else {
        $porcion = $fcfuepre->getFrecob();
      }
      $fportion = $datos[$porcion];
      $diaven = $fcfuepre->getDiaven();
      $tipoven = $fcfuepre->getTipven();
      return(true);
    } else {
      return(false);
    }
  }

  public static function SustituirFormula($tipo, $ut, $numref, $rifcon, &$valores) {
    $valorut = 0;
    $cadena = '';
    $c = new Criteria();
    $c->add(FctipproPeer::TIPPRO, $tipo);
    $fctippro = FctipproPeer::doSelectOne($c);
    if ($fctippro) {
      $cadena = $fctippro->getParpro();
      $unipar = $fctippro->getUnipar();
      if ($unipar > 0) {
        $valorut = H::toFloat($ut) * H::toFloat($unipar);
      }
      $sql = "Select * from FcTipProDet Where TipPro='" . $tipo . "' and tipo='F'";
      if (Herramientas :: BuscarDatos($sql, $result)) {
        $i = 0;
        while ($i < count($result)) {
          $cadena = str_replace($result[$i]['tipvar'], $result[$i]['valor'], $cadena);
          $i++;
        }
      }

      $sql = "Select * From FcProLicDet Where NroCon='" . $numref . "' And RifCon='" . $rifcon . "' and TipPro='" . $tipo . "'";
      if (Herramientas :: BuscarDatos($sql, $res)) {
        $i = 0;
        while ($i < count($res)) {
          $cadena = str_replace($res[$i]['campo'], $res[$i]['valor'], $cadena);
          $i++;
        }
      }
      $cadena = str_replace('UT', $valorut, $cadena);
      $sql = "Select (" . $cadena . ") as cadena From Empresa";
      if (Herramientas :: BuscarDatos($sql, $resu)) {
        $valores = $resu[0]['cadena'];
      } else {
        $valores = 0;
      }
    }
  }

  public static function MontoDecPropraganda(&$griddeuda, $tipo, $frecuencia, $ut, $numref, $rifcon, $indcalpro) {
    $valores = 0;
    if (count($griddeuda) > 0) {
      if ($indcalpro == 'N') {
        self::SustituirFormula($tipo, $ut, $numref, $rifcon, $valores);
      } else {
        $monto = 0;
        $c = new Criteria();
        $c->add(FctipproPeer::TIPPRO, $tipo);
        $fctippro = FctipproPeer::doSelectOne($c);
        if ($fctippro) {
          $unipar = $fctippro->getUnipar();
          ;
          $sql = "Select * From FcProLicDet Where NroCon='" . $numref . "' And RifCon='" . $rifcon . "' and TipPro='" . $tipo . "'";
          if (Herramientas :: BuscarDatos($sql, $res)) {
            $i = 0;
            while ($i < count($res)) {
              $valores = $valores + H::toFloat($res[0]['valor']) * H::toFloat($ut) * $unipar;
              $i++;
            }
          }
        }
      }
      $monto = H::toFloat($valores) / H::toFloat($frecuencia);
      for ($i = 0; $i < count($griddeuda); $i++) {

        $griddeuda[$i]["mondec"] = H::FormatoMonto($monto);
      }
    }
  }

  public static function SustituirFormulaEsp($tipo, $ut, $numref, $rifcon, &$valores) {
    $valorut = 0;
    $cadena = '';
    $valores = 0;
    $c = new Criteria();
    $c->add(FctipespPeer::TIPESP, $tipo);
    $fctipesp = FctipespPeer::doSelectOne($c);
    if ($fctipesp) {
      $cadena = $fctipesp->getParesp();
      $unipar = $fctipesp->getUnipar();
      if ($unipar > 0) {
        $valorut = H::toFloat($ut) * H::toFloat($unipar);
      }
      $sql = "Select * from FcTipEspDet Where TipEsp='" . $tipo . "' and tipo='F'";
      if (Herramientas :: BuscarDatos($sql, $result)) {
        $i = 0;
        while ($i < count($result)) {
          $cadena = str_replace($result[$i]['tipvar'], $result[$i]['valor'], $cadena);
          $i++;
        }
      }

      $sql = "Select * From FcEspLicDet Where NroCon='" . $numref . "' And RifCon='" . $rifcon . "' and TipEsp='" . $tipo . "'";
      if (Herramientas :: BuscarDatos($sql, $res)) {
        $i = 0;
        while ($i < count($res)) {
          $cadena = str_replace($res[$i]['campo'], $res[$i]['valor'], $cadena);
          $i++;
        }
      }
      $cadena = str_replace('UT', $valorut, $cadena);
      $sql = "Select (" . $cadena . ") as cadena From Empresa";
      if (Herramientas :: BuscarDatos($sql, $resu)) {
        $valores = $resu[0]['cadena'];
      } else {
        $valores = 0;
      }
    }
  }

  public static function MontoDecEspectaculo(&$griddeuda, $tipo, $frecuencia, $ut, $numref, $rifcon, $indcalesp) {
    $valores = 0;
    if (count($griddeuda) > 0) {

      if ($indcalesp == 'N') {
        self::SustituirFormulaEsp($tipo, $ut, $numref, $rifcon, $valores);
      } else {
        $c = new Criteria();
        $c->add(FctipespPeer::TIPESP, $tipo);
        $fctipesp = FctipespPeer::doSelectOne($c);
        if ($fctipesp) {
          $unipar = $fctipesp->getUnipar();
          $sql = "Select * From FcEspLicDet Where NroCon='" . $numref . "' And RifCon='" . $rifcon . "' and TipEsp='" . $tipo . "'";
          if (Herramientas :: BuscarDatos($sql, $res)) {
            $i = 0;
            while ($i < count($res)) {
              $valores = $valores + H::toFloat($res[0]['valor']) * H::toFloat($ut) * $unipar;
              $i++;
            }
          }
        }
      }
      $monto = H::toFloat($valores) / H::toFloat($frecuencia);
      for ($i = 0; $i < count($griddeuda); $i++) {

        $griddeuda[$i]["mondec"] = H::FormatoMonto($monto);
      }
    } else {
      $griddeuda[$i]["mondec"] = H::FormatoMonto(0);
    }
  }

  public static function SustituirFormulaApuesta($tipo, $ut, $numref, $rifcon, &$valores) {
    $valorut = 0;
    $cadena = '';
    $valores = 0;
    $c = new Criteria();
    $c->add(FctipapuPeer::TIPAPU, $tipo);
    $fctipapu = FctipapuPeer::doSelectOne($c);
    if ($fctipapu) {
      $cadena = $fctipapu->getParapu();
      $unipar = $fctipapu->getUnipar();
      if ($unipar > 0) {
        $valorut = H::toFloat($ut) * H::toFloat($unipar);
      }
      $sql = "Select * from FcTipApuDet Where TipApu='" . $tipo . "' and tipo='F'";
      if (Herramientas :: BuscarDatos($sql, $result)) {
        $i = 0;
        while ($i < count($result)) {
          $cadena = str_replace($result[$i]['tipvar'], $result[$i]['valor'], $cadena);
          $i++;
        }
      }

      $sql = "Select * From FcApuLicDet Where NroCon='" . $numref . "' And RifCon='" . $rifcon . "' and TipApu='" . $tipo . "'";
      if (Herramientas :: BuscarDatos($sql, $res)) {
        $i = 0;
        while ($i < count($res)) {
          $cadena = str_replace($res[$i]['campo'], $res[$i]['valor'], $cadena);
          $i++;
        }
      }
      $cadena = str_replace('UT', $valorut, $cadena);
      $sql = "Select (" . $cadena . ") as cadena From Empresa";
      if (Herramientas :: BuscarDatos($sql, $resu)) {
        $valores = $resu[0]['cadena'];
      } else {
        $valores = 0;
      }
    }
  }

  public static function MontoDecApuestaLic(&$griddeuda, $tipo, $frecuencia, $ut, $numref, $rifcon) {
    $valores = 0;
    if (count($griddeuda) > 0) {

      self::SustituirFormulaApuesta($tipo, $ut, $numref, $rifcon, $valores);

      $monto = H::toFloat($valores) / H::toFloat($frecuencia);
      for ($i = 0; $i < count($griddeuda); $i++) {

        $griddeuda[$i]["mondec"] = H::FormatoMonto($monto);
      }
    } else {
      $griddeuda[$i]["mondec"] = H::FormatoMonto(0);
    }
  }

  public static function DistribuirVencimiento($valori="", $grid= array(), $Anoveh="", $FechaDia="", $FechaInicio="", $FechaFin="", $fportion="", $fportionName="", &$griddeuda= array(), $diaven="", $tipoven="", $mod="", $ut="", $indunidadt="", $fname="", $fuente="") {
    try {

      $dateFormat = new sfDateFormat('es_VE');
      $fecha2 = "";
      $auxiliar = array();
      $Fechaant = $FechaInicio;
      $FechaInicio2 = H::toDateUS($FechaInicio);
      $ocu = 0;
      //Cálculo del Nro de porciones
      $numpor = self::CalPorcion($fportion, $FechaInicio, $FechaFin);
      switch ($fportion) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 6:
        case 12:
          if ($fportion == '1') {
            $auxiliar[0] = $FechaInicio2;
          } else {
            $auxiliar[0] = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('m', (int) 12 / $fportion, $FechaInicio2, '+'), '-');
          }

          if ($tipoven == "I") {
            if ($diaven != 0) {
              $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $FechaInicio2, '+'), '-');
            } else {
              $fecha2 = $FechaInicio2;
            }
          } else {

            $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[0], '+');
          }

          $griddeuda[0]["fecven"] = $fecha2; 
          $griddeuda[0]["id"] = 9;
          $griddeuda[0]["numero"] = 1;
          $fecven = $fecha2; //$dateFormat->format($fecha2, 'i', $dateFormat->getInputPattern('d'));
          $fecdia = $dateFormat->format($FechaDia, 'i', $dateFormat->getInputPattern('d'));

          if ($fecha2 >= $fecdia) {
            $griddeuda[0]["edodecstatus"] = 'VIGENTE';
          } else {
            $griddeuda[0]["edodecstatus"] = 'VENCIDA';
          }
          if ($mod == 'facvehdec') {
            if ($fportion == '1') {
              $griddeuda[0]["nombre"] = $fportionName . " del " . Herramientas::FormatoFecha($auxiliar[0]);
            } else {
              $griddeuda[0]["nombre"] = $fportionName . " del " . $FechaInicio . " al " . Herramientas::FormatoFecha($auxiliar[0]);
            }
            $griddeuda[0]["tipo"] = "VEH";
          } else if ($mod == 'facotringreg') {
            $griddeuda[0]["nombre"] = $fportionName . ' VENCIMIENTO ' .Herramientas::FormatoFecha($auxiliar[0]);
            $griddeuda[0]["tipo"] = "";
          } else if ($mod == 'facprodec') {
            $griddeuda[0]["nombre"] = $fportionName;
            $griddeuda[0]["tipo"] = "PAG";
          } else if ($mod == 'facespdec' || $mod == 'facapudec') {
            $griddeuda[0]["nombre"] = $fname;
            $griddeuda[0]["tipo"] = "PAG";
          } else if ($mod == 'facdecinmlot' || $mod == 'facdecvehlot') {
            $ocu = Herramientas::instr($auxiliar[0], '-', 0, 1);

            if ($ocu > 0) {
              $fechafinal = H::FormatoFecha($auxiliar[0]);
            } else {
              $fechafinal = $auxiliar[0];
            }
            $griddeuda[0]["nombre"] = $fportionName . self::Descripcion($fportion, $FechaInicio) . $fechafinal;
            $griddeuda[0]["tipo"] = "";
          }
          if ($mod != 'facprodec' && $mod != 'facespdec' && $mod == 'facapudec') {
            $griddeuda[0]["tipo"] = strtoupper(substr($fportionName, 2, 3));
          }


          for ($i = 1; $i < (int) $numpor - 1; $i++) {
            $griddeuda[$i]["id"] = 9;
            $griddeuda[$i]["numero"] = $i + 1;
            $FechaInicio = Herramientas::dateAdd('d', 1, $auxiliar[$i - 1], '+');
            $auxiliar[$i] = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('m', (int) 12 / $fportion, $FechaInicio, '+'), '-');

            if ($tipoven == "I") {
              if ($diaven != 0) {
                $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $FechaInicio, '+'), '-');
              } else {
                $fecha2 = $FechaInicio;
              }
            } else {
              $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[$i], '+');
            }
            $griddeuda[$i]["fecven"] = $fecha2; 

            $fecven = $fecha2; //$dateFormat->format($fecha2, 'i', $dateFormat->getInputPattern('d'));
            $fecdia = $dateFormat->format($FechaDia, 'i', $dateFormat->getInputPattern('d'));
            if ($fecha2 >= $fecdia) {
              $griddeuda[$i]["edodecstatus"] = 'VIGENTE';
            } else {
              $griddeuda[$i]["edodecstatus"] = 'VENCIDA';
            }

            if ($mod != 'facotringreg') {
              $griddeuda[$i]["tipo"] = strtoupper(substr($fportionName, 2, 3));
            }
            if ($mod == 'facvehdec') {
              if ($fportion == '1') {
                $griddeuda[$i]["nombre"] = $fportionName . " del " . Herramientas::FormatoFecha($auxiliar[$i]);
              } else {
                $griddeuda[$i]["nombre"] = $fportionName . " del " . Herramientas::FormatoFecha($FechaInicio) . " al " . Herramientas::FormatoFecha($auxiliar[$i]);
              }
              $griddeuda[$i]["tipo"] = "VEH";
            } else if ($mod == 'facotringreg') {
              $griddeuda[$i]["nombre"] = $fportionName . ' VENCIMIENTO ' . Herramientas::FormatoFecha($auxiliar[$i]);
            } else if ($mod == 'facprodec') {
              $griddeuda[$i]["nombre"] = $fportionName;
              $griddeuda[$i]["tipo"] = "PAG";
            } else if ($mod == 'facespdec' || $mod == 'facapudec') {
              $griddeuda[$i]["nombre"] = $fname;
              $griddeuda[$i]["tipo"] = "PAG";
            } else if ($mod == 'facdecinmlot' || $mod == 'facdecvehlot') {
              $ocu = Herramientas::instr($auxiliar[$i], '-', 0, 1);

              if ($ocu > 0) {
                $fechafinal = H::FormatoFecha($auxiliar[$i]);
              } else {
                $fechafinal = $auxiliar[$i];
              }
              $griddeuda[$i]["nombre"] = $fportionName . self::Descripcion($fportion, $FechaInicio) . $fechafinal;
            }

            if ($mod != 'facprodec' && $mod != 'facespdec' && $mod == 'facapudec') {
              $griddeuda[$i]["tipo"] = strtoupper(substr($fportionName, 2, 3));
            }else $griddeuda[$i]["tipo"] = 'VEH';
          }
          break;
        case 24:
          $DiasMax = 0;
          $fecha = $FechaInicio;
          $FechaInicio2 = H::toDateUS($FechaInicio);
          $griddeuda[0]["id"] = 9;
          $griddeuda[0]["numero"] = 1;


          $auxiliar[0] = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', 15, $FechaInicio2, '+'), '-');

          if ($tipoven == "I") {
            if ($diaven != 0) {
              $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $FechaInicio2, '+'), '-');
            } else {
              $fecha2 = $FechaInicio2;
            }
          } else {
            $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[0], '+');
          }

          $griddeuda[0]["fecven"] = $fecha2;
          $griddeuda[0]["id"] = 9;
          $griddeuda[0]["numero"] = 1;
          $fecdia = $dateFormat->format($FechaDia, 'i', $dateFormat->getInputPattern('d'));

          if ($fecha2 >= $fecdia) {
            $griddeuda[0]["edodecstatus"] = 'VIGENTE';
          } else {
            $griddeuda[0]["edodecstatus"] = 'VENCIDA';
          }
          if ($mod == 'facvehdec') {
            if ($fportion == '1') {
              $griddeuda[0]["nombre"] = $fportionName . " del " . Herramientas::FormatoFecha($auxiliar[0]);
            } else {
              $griddeuda[0]["nombre"] = $fportionName . " del " . $FechaInicio . " al " . Herramientas::FormatoFecha($auxiliar[0]);
            }
            $griddeuda[0]["tipo"] = "VEH";
          } else if ($mod == 'facotringreg') {
            $griddeuda[0]["nombre"] = $fportionName;
          } else if ($mod == 'facprodec') {
            $griddeuda[0]["nombre"] = $fportionName . " del " . $FechaInicio . " al " . Herramientas::FormatoFecha($auxiliar[0]);
          } else if ($mod == 'facespdec' || $mod == 'facapudec') {
            $griddeuda[0]["nombre"] = $fname . " " . $fportionName . " del " . Herramientas::FormatoFecha($auxiliar[0]);
          } else if ($mod == 'facdecinmlot' || $mod == 'facdecvehlot') {
            $ocu = Herramientas::instr($auxiliar[0], '-', 0, 1);

            if ($ocu > 0) {
              $fechafinal = H::FormatoFecha($auxiliar[0]);
            } else {
              $fechafinal = $auxiliar[0];
            }
            $griddeuda[0]["nombre"] = $fportionName . self::Descripcion($fportion, $FechaInicio) . $fechafinal;
          }

          $griddeuda[0]["tipo"] = strtoupper(substr($fportionName, 2, 3));


          for ($i = 1; $i < (int) $numpor - 1; $i++) {
            $griddeuda[$i]["id"] = 9;
            $griddeuda[$i]["numero"] = $i + 1;
            $mes = substr($auxiliar[$i - 1], 5, 2);
            $dia = substr($auxiliar[$i - 1], 8, 2);
            $annio = substr($auxiliar[$i - 1], 0, 4);
            if ($mes == '2' && $dia == '15' && (int) ($annio % 4) == 0) {
              $auxiliar[$i] = Herramientas::dateAdd('d', 14, $auxiliar[$i - 1], '+');
            } else if ($mes == '2' && $dia == '15' && (int) ($annio % 4) != 0) {
              $auxiliar[$i] = Herramientas::dateAdd('d', 13, $auxiliar[$i - 1], '+');
            } else if (($mes == '1' or $mes == '3' or $mes == '5' or $mes == '7' or $mes == '8' or $mes == '10' or $mes == '12') && $dia == '15') {
              $auxiliar[$i] = Herramientas::dateAdd('d', 16, $auxiliar[$i - 1], '+');
            } else {
              $auxiliar[$i] = Herramientas::dateAdd('d', 15, $auxiliar[$i - 1], '+');
            }

            $FechaInicio = Herramientas::dateAdd('d', 1, $auxiliar[$i - 1], '+');

            if ($tipoven == "I") {
              if ($diaven != 0) {
                $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $FechaInicio, '+'), '-');
              } else {
                $fecha2 = $FechaInicio;
              }
            } else {
              $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[$i], '+');
            }
            $griddeuda[$i]["fecven"] = $fecha2;

            $fecdia = $dateFormat->format($FechaDia, 'i', $dateFormat->getInputPattern('d'));
            if ($fecha2 >= $fecdia) {
              $griddeuda[$i]["edodecstatus"] = 'VIGENTE';
            } else {
              $griddeuda[$i]["edodecstatus"] = 'VENCIDA';
            }

            $griddeuda[$i]["tipo"] = strtoupper(substr($fportionName, 2, 3));
            if ($mod == 'facvehdec') {
              if ($fportion == '1') {
                $griddeuda[$i]["nombre"] = $fportionName . " del " . Herramientas::FormatoFecha($auxiliar[$i]);
              } else {
                $griddeuda[$i]["nombre"] = $fportionName . " del " . Herramientas::FormatoFecha($FechaInicio) . " al " . Herramientas::FormatoFecha($auxiliar[$i]);
              }
              $griddeuda[$i]["tipo"] = "VEH";
            } else if ($mod == 'facotringreg') {
              $griddeuda[$i]["nombre"] = $fportionName;
            } else if ($mod == 'facprodec') {
              $griddeuda[$i]["nombre"] = $fportionName . " del " . $FechaInicio . " al " . Herramientas::FormatoFecha($auxiliar[$i]);
            } else if ($mod == 'facespdec' || $mod == 'facapudec') {
              $griddeuda[$i]["nombre"] = $fname . " " . $fportionName . " del " . Herramientas::FormatoFecha($auxiliar[$i]);
            } else if ($mod == 'facdecinmlot' || $mod == 'facdecvehlot') {
              $ocu = Herramientas::instr($auxiliar[$i], '-', 0, 1);

              if ($ocu > 0) {
                $fechafinal = H::FormatoFecha($auxiliar[$i]);
              } else {
                $fechafinal = $auxiliar[$i];
              }
              $griddeuda[$i]["nombre"] = $fportionName . self::Descripcion($fportion, $FechaInicio) . $fechafinal;
            }
          }

          break;

        case 52:
        case 365:
          $FechaInicio2 = H::toDateUS($FechaInicio);
          if ($fportion == 52) {
            $auxiliar[0] = Herramientas::dateAdd('d', 1, (Herramientas::dateAdd('d', 7, $FechaInicio2, '+')), '-');
          } else if ($fportion == 365) {
            $auxiliar[0] = Herramientas::dateAdd('d', 1, $FechaInicio2, '+');
          }

          if ($tipoven == 'I') {
            if ($diaven != 0) {
              $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $FechaInicio2, '+'), '-');
            } else {
              $fecha2 = $FechaInicio2;
            }
          } else {
            $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[0], '+');
          }

          $griddeuda[0]["id"] = 1;
          $griddeuda[0]["numero"] = 1;
          $griddeuda[0]["fecven"] = $fecha2;
          if ($mod == 'facvehdec') {
            if ($fportion == '1') {
              $griddeuda[0]["nombre"] = $fportionName . " del " . Herramientas::FormatoFecha($FechaInicio2);
            } else {
              $griddeuda[0]["nombre"] = $fportionName . " del " . $FechaInicio . " al " . Herramientas::FormatoFecha($auxiliar[0]);
            }
            $griddeuda[0]["tipo"] = "VEH";
          } else if ($mod == 'facotringreg') {
            $griddeuda[0]["nombre"] = $fportionName;
          } else if ($mod == 'facprodec') {
            $griddeuda[0]["nombre"] = $fportionName . " del " . $FechaInicio . " al " . Herramientas::FormatoFecha($auxiliar[0]);
          } else if ($mod == 'facespdec' || $mod == 'facapudec') {
            $griddeuda[0]["nombre"] = $fname . " " . $fportionName . " del " . Herramientas::FormatoFecha($auxiliar[0]);
          } else if ($mod == 'facdecinmlot' || $mod == 'facdecvehlot') {
            $ocu = Herramientas::instr($auxiliar[0], '-', 0, 1);

            if ($ocu > 0) {
              $fechafinal = H::FormatoFecha($auxiliar[0]);
            } else {
              $fechafinal = $auxiliar[0];
            }
            $griddeuda[0]["nombre"] = $fportionName . self::Descripcion($fportion, $FechaInicio) . $fechafinal;
          }

          $griddeuda[0]["tipo"] = strtoupper(substr($fportionName, 2, 3));
          $fecven = $fecha2; //$dateFormat->format($fecha2, 'i', $dateFormat->getInputPattern('d'));
          $fecdia = $dateFormat->format($FechaDia, 'i', $dateFormat->getInputPattern('d'));
          if ($fecven >= $fecdia) {
            $griddeuda[0]["edodecstatus"] = 'VIGENTE';
          } else {
            $griddeuda[0]["edodecstatus"] = 'VENCIDA';
          }

          for ($i = 1; $i < (int) $numpor - 1; $i++) {
            $FechaInicio = Herramientas::dateAdd('d', 1, $auxiliar[$i - 1], '+');

            if ($fportion == 52) {
              $auxiliar[$i] = Herramientas::dateAdd('d', 7, $FechaInicio, '+');
            } else if ($fportion == 365) {
              $auxiliar[$i] = Herramientas::dateAdd('d', 1, $FechaInicio, '+');
            }

            if ($tipoven == 'I') {
              if ($diaven != 0) {
                $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $FechaInicio, '+'), '-');
              } else {
                $fecha2 = $FechaInicio;
              }
            } else {
              $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[$i], '+');
            }

            $griddeuda[$i]["id"] = 1;
            $griddeuda[$i]["numero"] = $i + 1;
            $griddeuda[$i]["fecven"] = $fecha2;

            $fecdia = $dateFormat->format($FechaDia, 'i', $dateFormat->getInputPattern('d'));
            if ($fecha2 >= $fecdia) {
              $griddeuda[$i]["edodecstatus"] = 'VIGENTE';
            } else {
              $griddeuda[$i]["edodecstatus"] = 'VENCIDA';
            }

            $griddeuda[$i]["tipo"] = strtoupper(substr($fportionName, 2, 3));
            if ($mod == 'facvehdec') {
              $griddeuda[$i]["tipo"] = "VEH";
              if ($fportion == '1') {
                $griddeuda[$i]["nombre"] = $fportionName . " del " . Herramientas::FormatoFecha($auxiliar[$i]);
              } else {
                $griddeuda[$i]["nombre"] = $fportionName . " del " . date('d/m/Y', strtotime($FechaInicio) + 1) . " al " . Herramientas::FormatoFecha($auxiliar[$i]);
              }
              
            } else if ($mod == 'facotringreg') {
              $griddeuda[$i]["nombre"] = $fportionName;
            } else if ($mod == 'facprodec') {
              $griddeuda[$i]["nombre"] = $fportionName . " del " . $FechaInicio . " al " . Herramientas::FormatoFecha($auxiliar[0]);
            } else if ($mod == 'facespdec' || $mod == 'facapudec') {
              $griddeuda[$i]["nombre"] = $fname . " " . $fportionName . " del " . Herramientas::FormatoFecha($auxiliar[$i]);
            } else if ($mod == 'facdecinmlot' || $mod == 'facdecvehlot') {
              $ocu = Herramientas::instr($auxiliar[$i], '-', 0, 1);

              if ($ocu > 0) {
                $fechafinal = H::FormatoFecha($auxiliar[$i]);
              } else {
                $fechafinal = Herramientas::FormatoFecha($auxiliar[$i]);
              }
              $griddeuda[$i]["nombre"] = $fportionName . self::Descripcion($fportion, $FechaInicio) . $fechafinal;
            }
          }
          break;
      }
      $anovar = H::getConfApp2('anovar', 'hacienda', 'facvehdec');
      $anoval = H::getConfApp2('anoval', 'hacienda', 'facvehdec');
      $anomen4 = H::getConfApp2('anomen4', 'hacienda', 'facvehdec');
      
      if ($mod == 'facvehdec') {
       if ($anovar=='S') {
           if ((int)substr($FechaFin,6,4)<=$anoval) {
               self::DistSaldoVeh($grid, $griddeuda, $FechaFin, $Fechaant, $Anoveh, $numpor, $valori, $FechaInicio, $fuente,$fecdia);
           }
           else {
               if ($anomen4=='S')
               {
                   $anoact=(int)date('Y');
                   $anocom=(int)$Anoveh;
                   $resta=$anoact-$anocom;
                   if ($resta<=4)
                      self::DistSaldoVeh($grid, $griddeuda, $FechaFin, $Fechaant, $Anoveh, $numpor, $valori, $FechaInicio, $fuente,$fecdia);
                   else
                       self::DistSaldoVehUt($grid, $griddeuda, $ut, $fportion, $FechaInicio, $fuente, $FechaFin, $Fechaant,$fecdia, $Anoveh);     
                           
               }else {
               self::DistSaldoVehUt($grid, $griddeuda, $ut, $fportion, $FechaInicio, $fuente, $FechaFin, $Fechaant,$fecdia, $Anoveh);     
               }
           }
       }else {
           if ($indunidadt!= 'S') {
          self::DistSaldoVeh($grid, $griddeuda, $FechaFin, $Fechaant, $Anoveh, $numpor, $valori, $FechaInicio, $fuente, $fecdia);
        } else {
          self::DistSaldoVehUt($grid, $griddeuda, $ut, $fportion, $FechaInicio, $fuente, $FechaFin, $Fechaant,$fecdia,$Anoveh);
        }
       }
                
      } else if ($mod == 'facotringreg') {
        self::DistSaldoOtroIng($valori, $griddeuda, $numpor-1);
      }
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function DistSaldoVehUt($grid, &$griddeuda, $ut, $porcion, $FechaInicio, $fuente, $FechaFin, $Fechaant,$fechadia, $Anoveh) {
    $encontro = false;
    $posicion;
    $porali = 0;
    $anocalculo;
    $saldo = 0;
    $saldo2 = 0;
    $j = 0;
    for ($i = 0; $i < count($griddeuda); $i++) {
      $anocalculo = (int) substr($griddeuda[$i]['fecven'], 0, 47);
      $sql="select valorut from fcdefut where to_char(fecini,'YYYY')='".$anocalculo."'";
      if (Herramientas::BuscarDatos($sql,$result2))
      {
          $ut=$result2[0]["valorut"];
      }
      while ($j < count($grid) && (!$encontro)) {
        $anovig = $grid[$j]->getAnovig();
        if ((int) $anovig = (int) $anocalculo) {
          $porali = $grid[$j]->getPorali();
          $encontro = true;
        }
        $j = $j + 1;
      }
      $saldo =
              $griddeuda[$i]["mondec"] = H::FormatoMonto(($ut * $porali)/$porcion);
      $saldo2=$saldo2 + ($ut * $porali)/$porcion;
    }
    
    $annio = 1; //round(H::DateDiff("D", $FechaFin, $Fechaant) / 365);
    $dateFormat = new sfDateFormat('es_VE');    
    $fec1 = $dateFormat->format($Fechaant, 'i', $dateFormat->getInputPattern('d'));
    $fec2 = $dateFormat->format($FechaFin, 'i', $dateFormat->getInputPattern('d'));
     $sql = "select  Extract(year from age('" . $fec2 . "','" . $fec1 . "')) as anopasa";
    if (Herramientas :: BuscarDatos($sql, $result)) {
      $annio= $result[0]['anopasa']+1;
    }        
    
    //Multas 
     $anodec=substr($fechadia,0,4);
     $sql2="select a.codmul as codmul, a.nommul as nommul, a.tipo as tipo, a.modo as modo, a.monpro as monpro, b.codfuegen as codfuegen
        from fcmultas a, fcfuentesmul b
        where a.tipo='A' and a.tipdec='D' and b.codfue='".$fuente."' and a.codmul=b.codmul";
      if (Herramientas::BuscarDatos($sql2,$result2))
      {
        $z=0;
        while ($z<count($result2))
        {
          $declaraciontotal=0;
          if ($result2[$z]["modo"]=='I')
            {
               $fechacompara=$Fechaant;
               $annio2=$annio-1;
            }else if ($result2[$z]["modo"]=='E') {
               $t= new Criteria();
               $t->add(FcfueprePeer::CODFUE,$fuente);
               $reg= FcfueprePeer::doSelectOne($t);
               if ($reg)
                  $fechacompara=$reg->getFecest();
               else
                   $fechacompara=$Fechaant;
            }elseif ($result2[$z]["modo"]=='D') {
               $t= new Criteria();
               $t->add(FcfueprePeer::CODFUE,$fuente);
               $reg= FcfueprePeer::doSelectOne($t);
               if ($reg)
                  $fechacompara=$reg->getFeccie();
               else
                   $fechacompara=$Fechaant;
              $annio2=1;
              }else {
                $fechacompra=$Fechaant;
              }
              if ($anodec!=substr($fechacompara,0,4))
                $declaraciontotal=$saldo2 -  ((($ut * $porali)));
              else
                $declaraciontotal=(($ut * $porali))*$annio2;
                /*if ($anodec!="")
                {
                    $fechaantigua=$anodec.substr($fechacompara,4,6);
                    while (H::bisiesto(substr($fechaantigua,0,4)))
                    {
                      $fechaantigua=substr($fechaantigua,0,6).str_pad(((int)substr($fechaantigua,7,2)-1),2,'0',STR_PAD_LEFT);
                    }
                    $fechacompara=$fechaantigua;
                }*/
                //$dias=$fechadia-$fechacompara;
                $dias=H::DateDiff("d", $fechacompara, $fechadia);
                $p= new Criteria();
                $p->add(FcrangosmulPeer::CODMUL,$result2[$z]["codmul"]);
                $p->add(FcrangosmulPeer::DIASDESDE,$dias,Criteria::LESS_EQUAL);
                $p->add(FcrangosmulPeer::DIASHASTA,$dias,Criteria::GREATER_EQUAL);
                $resu= FcrangosmulPeer::doSelectOne($p);
                if ($resu)
                    $montoporc=$resu->getValor();
                else
                    $montoporc=0;
                if ($result2[$z]["monpro"]=='M')
                {
                    if ($montoporc!=0)
                        $monto=$montoporc;
                    else
                        $monto=0;
                }else  {
                   $monto=($declaraciontotal*$montoporc)/100;
                }
                if ($monto!=0)
                {
                   $y=count($griddeuda);
                   $griddeuda[$y]["id"]=1;                   
                   $griddeuda[$y]["numero"]=str_pad($y,2,'0',STR_PAD_LEFT);
                   $griddeuda[$y]["fecven"]=date('d/m/Y',strtotime($fechacompara));
                   $griddeuda[$y]["nombre"]=$result2[$z]["nommul"]." Año ".$anodec;
                   $griddeuda[$y]["tipo"]="MUL";
                   $griddeuda[$y]["mondec"]=number_format($monto,2,',','.');;
                   $griddeuda[$y]["edodecstatus"]="VIGENTE";
                }
            $z++;
        }
      }
    
  }

  //Graba la inf. de la declaración de  otros ingresos
  public static function salvarFacdecotr($clasemodelo, $grid) {
    $numdec = "";
    $dateFormat = new sfDateFormat('es_VE');
    $saldo = "";
    if ($clasemodelo->getId() == "") {

      $numdec = self::generarCorrelativoDecOtr($clasemodelo);
    }
    $clasemodelo->setNrocon($numdec);
    $clasemodelo->setStaapu('A');
    $clasemodelo->setEstdec('N');


    if ($clasemodelo->getValor() == 'Facturación Simultanea') {
      self::salvarDeclaracion($numdec, $saldo, $clasemodelo, $grid);
    }


    $clasemodelo->save();
    return -1;
  }

  public static function salvarDeclaracion($numdec, $saldo, $clasemodelo, $grid) {
    //Buscar saldo
    self::BuscarSaldo($saldo, $clasemodelo);


    $c = new Criteria();
    $c->add(FcdeclarPeer::NUMDEC, $clasemodelo->getNumcon());
    $fcdeclar = FcdeclarPeer::doSelectOne($c);
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      $fecven = $x[$j]->getFecven();

      if ($clasemodelo->getId() == "") {
        $fcdeclar = new Fcdeclar();
      }
      $fcdeclar->setNumref($clasemodelo->getNumref());
      $fcdeclar->setNumdec($numdec);
      $fcdeclar->setFueing($clasemodelo->getCodFue());
      $fcdeclar->setFecdec($clasemodelo->getFecreg());
      $fcdeclar->setRifcon($clasemodelo->getRifcon());
      $fcdeclar->setNomcon($clasemodelo->getNomcon());
      $fcdeclar->setNumref($clasemodelo->getNumref());
      $fcdeclar->setTipo($x[$j]->getTipo());
      $fcdeclar->setNombre($x[$j]->getNombre());
      $fcdeclar->setNumero($j + 1);
      $fcdeclar->setMora(H::FormatoMonto(0));
      $fcdeclar->setProntopg(H::FormatoMonto(0));
      $fcdeclar->setFundec($clasemodelo->getFundec());
      $fcdeclar->setFecultpag($clasemodelo->getFeccal());
      $fcdeclar->setFecven($x[$j]->getFecven());
      $fcdeclar->setMondec($x[$j]->getMondec());

      if ((float) $saldo <= (float) ($x[$j]->getMondec())) {
        $fcdeclar->setAutliq($saldo);
      } else {
        $fcdeclar->setAutliq($x[$j]->getMondec());
      }


      //Actualizar Saldo
      self::ActualizarSaldo($clasemodelo, $fcdeclar->getAutliq());
      $saldo = $saldo - $fcdeclar->getMondec();
      if ($saldo < 0) {
        $saldo = 0;
      }

      if ($fcdeclar->getMondec() == $fcdeclar->getAutliq() && $fcdeclar->getMondec()>0) {
        $fcdeclar->setEdodec("P");
      } else if ($x[$j]->getEdodecstatus() == 'VIGENTE') {
        $fcdeclar->setEdodec('V');
      } else if ($x[$j]->getEdodecstatus() == 'VENCIDA') {
        $fcdeclar->setEdodec('E');
      }

      $fcdeclar->save();
      $j++;
    }
    return -1;
  }

  public static function generarCorrelativoDecOtr($clase) {
    $correlativo = '';
    $nomabr = '';
    $c = new Criteria();
    $c->add(FcfueprePeer::CODFUE, $clase->getCodfue());
    $fcfuepre = FcfueprePeer::doSelectOne($c);
    if ($fcfuepre) {
      $nomabr = $fcfuepre->getNomabr();
    }
    if ($clase->getNrocon() == '##########') {
      $sql = "Select nrocon from FCOtrIng where NroCon like'" . $nomabr . "%' AND id in (Select Max(id) from FCOtrIng where NroCon like'" . $nomabr . "%')";

      if (Herramientas::BuscarDatos($sql, $result)) {
           $encontrado=false;
           $r = SUBSTR($result[0]['nrocon'], 3, strlen($result[0]['nrocon'])) + 1; 
            while (!$encontrado)
            {              
              $correlativo = str_pad($nomabr, 3, "0", STR_PAD_RIGHT) . str_pad($r, 5, '0', STR_PAD_LEFT);
              $sql="select nrocon from fcotring where nrocon='".$correlativo."'";
              if (Herramientas::BuscarDatos($sql,$result))
              {
                $r=$r+1;
              }
              else
              {
                $encontrado=true;
              }
            }        
      } else {
        $valor = 1;
        $correlativo = str_pad($nomabr, 3, "0", STR_PAD_RIGHT) . str_pad($valor, 5, '0', STR_PAD_LEFT);
      }
      
    } else {
      $correlativo = str_pad($nomabr, 3, "0", STR_PAD_RIGHT) . str_pad($clase->getNrocon(), 5, '0', STR_PAD_LEFT);
    }

    return $correlativo;
  }

  public static function eliminarFacotringdec($clase) {

    $cr = new Criteria();
    $cr->add(FcotringPeer::NROCON, $clase->getNrocon());
    $reg = FcotringPeer::doSelect($cr);
    if ($reg) {
      foreach ($reg as $v) {
        $v->delete();
      }
    }

    //Eliminación de la declaración
    $c = new Criteria();
    $c->add(FcdeclarPeer::NUMDEC, $clase->getNrocon());
    $c->add(FcdeclarPeer::RIFCON, $clase->getRifcon());
    $c->add(FcdeclarPeer::NUMREF, $clase->getNumref());
    $reg1 = FcdeclarPeer::doSelect($c);

    if ($reg1) {
      foreach ($reg1 as $v) {
        $v->delete();
      }
    }

    return -1;
  }

  public static function VerificarPagoDeclaracion($numdec) {
    $cr = new Criteria();
    $cr->add(FcdeclarPeer::NUMDEC, trim($numdec));
    $cr->add(FcdeclarPeer::EDODEC, 'P');
    $fcdeclar = FcdeclarPeer::doSelectOne($cr);
    if ($fcdeclar) {
      return(false);
    } else {
      return(true);
    }
  }

  public static function VerificarDecPag($numdec) {
    $cr = new Criteria();
    $cr->add(FcdecpagPeer::NUMDEC, trim($numdec));
    $fcdeclar = FcdecpagPeer::doSelectOne($cr);
    if ($fcdeclar) {
      return(false);
    } else {
      return(true);
    }
  }

  public static function cargarActividadesComerciales($primeravez, $codigo, $anodeclar, $numerodec, $modo, $stacion, $nuevo, &$arreglodet, &$totexe,$fechadeclara) {
    $arreglodet = array();
    $totexe = "0,00";

    if (!$primeravez) {
      $sql = "Select AnoDec as Fecano,Modo as modo from FCDeclar where Numref='" . $codigo . "' and (modo='D' or modo='E' or modo='A') ORDER BY AnoDec DESC,FecDec Desc,modo";
      if (Herramientas::BuscarDatos($sql, $result)) {
        $mimodo = $result[0]["modo"];
      } else {
        if ($modo == 'D')
          $mimodo = 'D';
        else
          $mimodo='E';
      }

      if ($nuevo == '') {
        if ($modo == 'E') {
          $sql2 = "Select * from FCACTPIC where NumDoc='" . $codigo . "' AND (ANODEC='" . ($anodeclar) . "' or ANODEC is null) and (Modo='" . $mimodo . "' or Modo is null)";
          $anodecl = (float) $anodeclar - 1;
        } else {
          $sql2 = "Select * from FCACTPIC where NumDoc='" . $codigo . "' AND ANODEC='" . $anodeclar . "' and Modo='" . $mimodo . "'";
          $anodecl = (float) $anodeclar;
        }
      } else {
        if ($modo == 'D') {
          $sql2 = "Select * from FCACTPIC where NumDoc='" . $codigo . "' AND ANODEC='" . $anodeclar . "' and Modo='D'";
          $anodecl = (float) $anodeclar - 1;
        } else {
          $sql2 = "Select * from FCACTPIC where NumDoc='" . $codigo . "' AND ANODEC='" . $anodeclar . "' and Modo='E'";
          $anodecl = (float) $anodeclar;
        }
      }
    } else {
      $sql2 = "Select * from FCACTPIC where NumDoc='" . $codigo . "' and coalesce(AnoDec,' ')=' '";
      if (!Herramientas::BuscarDatos($sql2, $output))
        $sql2 = "Select * from FCACTPIC where NumDoc='" . $codigo . "' and Modo='M'";
      $anodecl = (float) $anodeclar;
    }

    if (Herramientas::BuscarDatos($sql2, $result2)) {
      $j = 0;
      while ($j < count($result2)) {
        $r = new Criteria();
        $r->add(FcajustePeer::NUMDEC, $numerodec);
        $regis = FcajustePeer::doSelectOne($r);
        if ($regis) {
          if ($regis->getMonact() != 0) {
            $montoingreso = $result2[$j]["monant"];
          } else {
            $montoingreso = $result2[$j]["monact"];
          }
        }else
          $montoingreso=$result2[$j]["monact"];

        $arreglodet[$j]["codact"] = $result2[$j]["codact"];
        $arreglodet[$j]["desact"] = H::getX_vacio('CODACT', 'Fcactcom', 'Desact', $result2[$j]["codact"]);
        $arreglodet[$j]["monbru"] = "0,00";
        $cactividad = 0;
        $encontroact = -1;
        if ($modo == 'E') {
        $sql3 = "select a.codact as codact, a.desact as desact, (a.mintri*b.valorut) as mintri, a.afoact as alicuota, (CASE when a.minofac='F' then 'Factor'
                    else 'Minimo' end) as minfac, (CASE when a.exoner='S' then 'SI' else 'NO' end) as exonerable, (CASE when a.bascan='S' then 'SI' else 'NO' end) as cantidad
                    from fcactcom a, fcdefut b where
                    a.codact='" . $result2[$j]["codact"] . "' and a.anoact='" . $anodeclar . "' and b.fecini<='" . $fechadeclara . "' and b.fecfin>='" . $fechadeclara . "'";
        }else {
          $sql3="select a.codact as codact, a.desact as desact, (a.mintri*b.valorut) as mintri, a.afoact as alicuota,
                  (CASE when a.minofac='F' then 'Factor' else 'Minimo' end) as minfac,
                  (CASE when a.exoner='S' then 'SI' else 'NO' end) as exonerable, (CASE when a.bascan='S' then 'SI' else 'NO' end) as cantidad 
                  from fcactcom a, fcdefut b, fcactpic c, fcdeclar d
                  where a.codact='" . $result2[$j]["codact"] . "' and c.numdoc='" . $codigo . "' and c.anodec='".$anodeclar."' and c.modo='E' and b.fecini<=d.fecdec and b.fecfin>=d.fecdec
                  and a.codact=c.codact and a.anoact=c.anodec and c.numdoc=d.numref and c.anodec=d.anodec and c.modo=d.modo
                  group by a.codact, a.desact, a.afoact,a.bascan,a.mintri,b.valorut, minfac, exonerable";
        }
        Herramientas::BuscarDatos($sql3, $result3);

        $t = 0;
        while ($t < count($result3) && $encontroact == -1) {
          if ($arreglodet[$j]["codact"] == $result3[$t]["codact"]) {
            $encontroact = $cactividad;
            break;
          } else {
            $cactividad = $cactividad + 1;
            $t++;
          }
        }

        if ($encontroact >= 0) {
          if ($result3[0]["desact"] != "")
            $arreglodet[$j]["desact"] = $result3[0]["desact"];               
            $arreglodet[$j]["monbru"] = number_format($result3[0]["mintri"], 2, ',', '.');
        }

        if ($encontroact >= 0) {
          $arreglodet[$j]["desact"] = $result3[0]["desact"];
          $unidad = H::getX_vacio('CODEMP', 'Fcdefins', 'unipic', '001');
          if ($unidad == 'B') {
            $monacomparar = $result3[0]["mintri"];
          } else {
            $monacomparar = $result3[0]["mintri"];
          }
          if ($modo == 'D')
            $pordec = 1;
          else
            $pordec=1;

          if ($stacion == 'S')
            $factser = 1;
          else
            $factser=1;

          if ($result3[0]["minfac"] == 'Factor') {
            $calculo = $montoingreso * $pordec * $factser * $result3[0]["alicuota"];           
            $arreglodet[$j]["monbru"] = number_format($calculo, 2, ',', '.');
            $calculo2 = (($montoingreso - $result2[$j]["porexo"]) * $pordec * $factser * $result3[0]["alicuota"]);
            $totexe = number_format($calculo2, 2, ',', '.');
          } else {
            $calculo = $montoingreso * $result3[0]["alicuota"] / 100;
            $arreglodet[$j]["monbru"] = number_format($calculo, 2, ',', '.');
            $calculo2 = $montoingreso * $pordec * $factser * $result3[0]["alicuota"] / 100;
            $arreglodet[$j]["monbru"] = number_format($calculo2, 2, ',', '.');
          }
          if (H::toFloat($arreglodet[$j]["monbru"]) <= $monacomparar) {
              if ($result3[0]["cantidad"]=='SI')
                $monacomparar=$monacomparar*$result2[$j]["monact"];
            $arreglodet[$j]["monbru"] = number_format($monacomparar, 2, ',', '.');
          }
        }

        if ($montoingreso == 0) {
          $arreglodet[$j]["monact"] = "0,00";
        }

        $arreglodet[$j]["monact"] = number_format($montoingreso, 2, ',', '.');
        $arreglodet[$j]["monexo"] = number_format($result2[$j]["porexo"], 2, ',', '.');
        $arreglodet[$j]["monreb"] = number_format($result2[$j]["monreb"], 2, ',', '.');
        $calculo3 = H::toFloat($arreglodet[$j]["monbru"]) - H::toFloat($arreglodet[$j]["monexo"]) - H::toFloat($arreglodet[$j]["monreb"]);
        $arreglodet[$j]["imppag"] = number_format($calculo3, 2, ',', '.');
        $arreglodet[$j]["id"] = "9";

        $j++;
      }
    }
  }

  public static function declaracionUnica($numref, $modo, $anodec, $lafuente, $lafuenteaju) {
    $c = new Criteria();
    $c->add(FcdeclarPeer::NUMREF, $numref);
    $c->add(FcdeclarPeer::MODO, $modo);
    $sql = "fcdeclar.anodec='" . $anodec . "' and (fcdeclar.fueing='" . $lafuente . "' or fcdeclar.fueing='" . $lafuenteaju . "')";
    $c->add(FcdeclarPeer::ANODEC, $sql, Criteria::CUSTOM);
    $reg = FcdeclarPeer::doSelectOne($c);
    if ($reg)
      $declaunica = true;
    else
      $declaunica=true;

    return $declaunica;
  }

  public static function actualizarSaldoLic($fuente, $numref, $rifcon, $monto) {
    $saldo = 0;
    $c = new Criteria();
    $c->add(FcabonosPeer::FUEING, $fuente);
    $c->add(FcabonosPeer::NUMREF, $numref);
    $c->add(FcabonosPeer::RIFCON, $rifcon);
    $c->add(FcabonosPeer::STAPAG, 'N');
    $fcabonos = FcabonosPeer::doSelect($c);
    if ($fcabonos && $monto > 0) {
      foreach ($fcabonos as $objetos) {
        if ($objetos->getSalpag() >= $monto) {
          $objetos->setSalpag($objetos->getSalpag() - $monto);
        } else {
          $objetos->setSalpag(0);
          $monto = $monto - $objetos->getSalpag();
        }

        if ($objetos->getSalpag() == 0)
          $objetos->setStapag('S');
        else
          $objetos->setStapag('N');

        $objetos->save();
      }
    }
  }

  public static function calcularDeclaracionAnterior($monto, $codact, $numref, $anodec) {
    $calculadecant = 0;
    /*$sql3 = "select a.codact as codact, a.desact as desact, (a.mintri*b.valunitri) as mintri, a.afoact as alicuota,
        (CASE when a.minofac='F' then 'Factor' else 'Minimo' end) as minfac,
        (CASE when a.exoner='S' then 'SI' else 'NO' end) as exonerable from fcactcom a, fcdefins b, fcactpic c
        where a.codact='" . $codact . "' and c.numdoc='" . $numref . "' and c.anodec='" . $anodec . "' and c.modo='E'
        and a.codact=c.codact and a.anoact=c.anodec";*/
      $sql3="select a.codact as codact, a.desact as desact, (a.mintri*b.valorut) as mintri, a.afoact as alicuota,
(CASE when a.minofac='F' then 'Factor' else 'Minimo' end) as minfac,
(CASE when a.exoner='S' then 'SI' else 'NO' end) as exonerable 
from fcactcom a, fcdefut b, fcactpic c, fcdeclar d
where a.codact='" . $codact . "' and c.numdoc='" . $numref . "' and c.anodec='" . $anodec . "' and c.modo='E' and b.fecini<=d.fecdec and b.fecfin>=d.fecdec
and a.codact=c.codact and a.anoact=c.anodec and c.numdoc=d.numref and c.anodec=d.anodec and c.modo=d.modo
group by a.codact, a.desact, a.afoact,a.mintri,b.valorut, minfac, exonerable";


    if (Herramientas::BuscarDatos($sql3, $result3)) {
      $unidad = H::getX_vacio('CODEMP', 'Fcdefins', 'unipic', '001');
      if ($unidad == 'B') {
        $mimonto = $result3[0]["mintri"];
      } else {
        $mimonto = $result3[0]["mintri"];
      }
      $pordec = 1;
      $factser = 1;

      if ($result3[0]["minfac"] == 'Factor') {
        $calculadecant = $monto * $pordec * $factser * $result3[0]["alicuota"];
      } else {
        $calculadecant = $monto * $pordec * $factser * $result3[0]["alicuota"] / 100;
      }
      if ($calculadecant < $mimonto)
        $calculadecant = $mimonto;
    }
    return $calculadecant;
  }

  public static function Repetido($grid, $codact, $fila, $col) {
    $repetido = false;
    $i = 0;
    while ($i < count($grid)) {
      $codact2 = $grid[$i][$col];
      if ($i != $fila) {
        if ($codact == $codact2) {
          $repetido = true;
          break;
        }
      }
      $i++;
    }

    return $repetido;
  }

  public static function Descripcion($porcion, $fecha) {
    $descrip = "";
    if ($porcion == 1)
      $descrip = " del ";
    else
      $descrip=" del " . date('d/m/Y', strtotime($fecha)) . " al ";

    return $descrip;
  }

  public static function distribucionVencimientoActComerciales($filas, $fecdec, $porcion, $params, &$grid) {
    $fechadia = $fecdec;
    $fechainicio = $params[11];
    switch ($porcion) {
      case (1 || 2 || 3 || 4 || 6 || 12):
        $feciniaux = $fechainicio;
        $i = 1;
        while ($i <= $filas) {
          if ($i > 1) {
            $feciniaux = H::dateAdd('d', 1, $fecfinaux, '+');
          }
          $fecfinaux = H::dateAdd('d', 1, H::dateAdd('m', (int) 12 / $porcion, $feciniaux, '+'), '-');
          $grid[$i]["numero"] = str_pad($i, 2, '0', STR_PAD_LEFT);
          if ($params[7] == 'I') {
            /* if ($i==1) //Codigo VB no me funciona
              $grid[$i]["fecven"]=date('d/m/Y',strtotime(H::dateAdd('d',1,H::dateAdd('m',1+$params[6]/30,$feciniaux,'+'),'-')));
              else
              $grid[$i]["fecven"]=date('d/m/Y',strtotime(H::dateAdd('d',1,H::dateAdd('m',1,$feciniaux,'+'),'-'))); */
            $grid[$i]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', 1, H::dateAdd('d', $params[6], $feciniaux, '+'), '-')));
          } else {

            /* if ((int)($params[6]%30)==0)  //Codigo VB no me funciona
              {
              if ($i==1)
              $grid[$i]["fecven"]=date('d/m/Y',strtotime(H::dateAdd('d',1,H::dateAdd('m',1+$params[6]/30,$feciniaux,'+'),'-')));
              else
              $grid[$i]["fecven"]=date('d/m/Y',strtotime(H::dateAdd('d',1,H::dateAdd('m',1+$params[6]/30,$feciniaux,'+'),'-')));
              }else {
              $grid[$i]["fecven"]=date('d/m/Y',strtotime(H::dateAdd('d',1,H::dateAdd('m',1+$params[6]/30,$feciniaux,'+'),'-')));
              } */
            $grid[$i]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', $params[6], $fecfinaux, '+')));
          }
          $grid[$i]["nombre"] = $params[9] . self::Descripcion($porcion, $feciniaux) . date('d/m/Y', strtotime($fecfinaux));
          $grid[$i]["tipo"] = strtoupper(substr($params[9], 0, 3));
          $grid[$i]["mondec"] = "0,00";
          $dateFormat = new sfDateFormat('es_VE');
          $fec1 = $dateFormat->format($grid[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
          if ($fec1 >= $fechadia)
            $grid[$i]["edodecstatus"] = "VIGENTE";
          else
            $grid[$i]["edodecstatus"] = "VENCIDA";

          $grid[$i]["fueing"] = $params[0];
          $grid[$i]["id"] = "9";

          $i++;
        }
        break;
      case (24):
        $diamax = 0;
        $ultimo = false;
        $fecha = $fechainicio;

        /* if ((date('m',strtotime($fecha))==4 || date('m',strtotime($fecha))==6 || date('m',strtotime($fecha))==9 || date('m',strtotime($fecha))==11) && date('d',strtotime($fecha))==30)
          $ultimo=true;

          if ((date('m',strtotime($fecha))==1 || date('m',strtotime($fecha))==3 || date('m',strtotime($fecha))==5 || date('m',strtotime($fecha))==7 || date('m',strtotime($fecha))==8 || date('m',strtotime($fecha))==10 || date('m',strtotime($fecha))==12) && date('d',strtotime($fecha))==31)
          $ultimo=true;

          if (date('m',strtotime($fecha))==2)
          {
          if ((date('Y',strtotime($fecha))%4==0) && (date('d',strtotime($fecha))==29))
          $ultimo=true;
          else {
          if ((date('Y',strtotime($fecha))%4==0) && (date('d',strtotime($fecha))==28))
          $ultimo=true;
          }
          } */
        $grid[1]["numero"] = "1";
        $auxiliar[1] = H::dateAdd('d', 1, H::dateAdd('d', 15, $fechainicio, '+'), '-');
        if ($params[7] == 'I')
          $grid[1]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', 1, H::dateAdd('d', $params[6], $feciniaux, '+'), '-')));
        else
          $grid[1]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', $params[6], $auxiliar[1], '+')));

        $grid[1]["nombre"] = $params[9] . self::Descripcion($porcion, $fechainicio) . date('d/m/Y', strtotime($auxiliar[1]));
        $grid[1]["tipo"] = strtoupper(substr($params[9], 0, 3));
        $grid[1]["mondec"] = "0,00";
        $dateFormat = new sfDateFormat('es_VE');
        $fec1 = $dateFormat->format($grid[1]["fecven"], 'i', $dateFormat->getInputPattern('d'));
        if ($fec1 >= $fechadia)
          $grid[1]["edodecstatus"] = "VIGENTE";
        else
          $grid[1]["edodecstatus"] = "VENCIDA";

        $grid[1]["fueing"] = $params[0];
        $grid[1]["id"] = "9";
        $i = 2;
        while ($i <= $filas) {
          /* if ($i%2==0)
            {
            $grid[$i]["fecven"]=date('d/m/Y',strtotime(H::dateAdd('m',1,$fecha,'+')));
            $dateFormat = new sfDateFormat('es_VE');
            $fec1 = $dateFormat->format($grid[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
            if ($fec1>=$fechadia)
            $grid[$i]["edodecstatus"]="VIGENTE";
            else
            $grid[$i]["edodecstatus"]="VENCIDA";
            $grid[$i]["fueing"]=$params[0];
            $grid[$i]["id"]="9";

            if (date('m',strtotime($fecha))==2)
            {
            if ($ultimo) {
            if (date('d',strtotime($fecha))==28)
            {
            $grid[$i]["fecven"]=date('d/m/Y',strtotime(H::dateAdd('d',3,$fec1,'+')));
            $dateFormat = new sfDateFormat('es_VE');
            $fec2 = $dateFormat->format($grid[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
            if ($fec2>=$fechadia)
            $grid[$i]["edodecstatus"]="VIGENTE";
            else
            $grid[$i]["edodecstatus"]="VENCIDA";
            $grid[$i]["fueing"]=$params[0];
            $grid[$i]["id"]="9";
            }else {
            if (date('d',strtotime($fecha))==29)
            {
            $grid[$i]["fecven"]=date('d/m/Y',strtotime(H::dateAdd('d',2,$fec1,'+')));
            $dateFormat = new sfDateFormat('es_VE');
            $fec2 = $dateFormat->format($grid[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
            if ($fec2>=$fechadia)
            $grid[$i]["edodecstatus"]="VIGENTE";
            else
            $grid[$i]["edodecstatus"]="VENCIDA";
            $grid[$i]["fueing"]=$params[0];
            $grid[$i]["id"]="9";
            }
            }
            }else {
            if ($diamax>28)
            {
            $grid[$i]["fecven"]=date('d/m/Y',strtotime(H::dateAdd('d',$diamax-(int)date('d',strtotime($fecha)),$fec1,'+')));
            $dateFormat = new sfDateFormat('es_VE');
            $fec2 = $dateFormat->format($grid[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
            if ($fec2>=$fechadia)
            $grid[$i]["edodecstatus"]="VIGENTE";
            else
            $grid[$i]["edodecstatus"]="VENCIDA";
            $grid[$i]["fueing"]=$params[0];
            $grid[$i]["id"]="9";
            }
            }
            }else {
            if ($ultimo && (date('m',strtotime($fecha))==4 || date('m',strtotime($fecha))==6 || date('m',strtotime($fecha))==9 || date('m',strtotime($fecha))==11) && date('d',strtotime($fecha))==30)
            {
            $grid[$i]["fecven"]=date('d/m/Y',strtotime(H::dateAdd('d',1,$fec1,'+')));
            $dateFormat = new sfDateFormat('es_VE');
            $fec2 = $dateFormat->format($grid[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
            if ($fec2>=$fechadia)
            $grid[$i]["edodecstatus"]="VIGENTE";
            else
            $grid[$i]["edodecstatus"]="VENCIDA";
            $grid[$i]["fueing"]=$params[0];
            $grid[$i]["id"]="9";
            }
            }
            }else {

            $dateFormat = new sfDateFormat('es_VE');
            $fec2 = $dateFormat->format($grid[$i-1]["fecven"], 'i', $dateFormat->getInputPattern('d'));
            $grid[$i]["fecven"]=date('d/m/Y',strtotime(H::dateAdd('d',15,$fec2,'+')));
            $dateFormat = new sfDateFormat('es_VE');
            $fec3 = $dateFormat->format($grid[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
            if ($fec3>=$fechadia)
            $grid[$i]["edodecstatus"]="VIGENTE";
            else
            $grid[$i]["edodecstatus"]="VENCIDA";
            $grid[$i]["fueing"]=$params[0];
            $grid[$i]["id"]="9";
            } */

          $dia = substr($auxiliar[$i - 1], 8, 2);
          $mes = substr($auxiliar[$i - 1], 5, 2);
          $annio = substr($auxiliar[$i - 1], 0, 4);
          if ($mes == '2' && $dia == '15' && (int) ($annio % 4) == 0) {
            $auxiliar[$i] = Herramientas::dateAdd('d', 14, $auxiliar[$i - 1], '+');
          } else if ($mes == '2' && $dia == '15' && (int) ($annio % 4) != 0) {
            $auxiliar[$i] = Herramientas::dateAdd('d', 13, $auxiliar[$i - 1], '+');
          } else if (($mes == '1' or $mes == '3' or $mes == '5' or $mes == '7' or $mes == '8' or $mes == '10' or $mes == '12') && $dia == '15') {
            $auxiliar[$i] = Herramientas::dateAdd('d', 16, $auxiliar[$i - 1], '+');
          } else {
            $auxiliar[$i] = Herramientas::dateAdd('d', 15, $auxiliar[$i - 1], '+');
          }

          $fechainicio = Herramientas::dateAdd('d', 1, $auxiliar[$i - 1], '+');

          if ($tipoven == "I") {
            $grid[$i]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', 1, Herramientas::dateAdd('d', $params[6], $fechainicio, '+'), '-')));
          } else {
            $grid[$i]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('d', $params[6], $auxiliar[$i], '+')));
          }

          $grid[$i]["numero"] = "01";
          $grid[$i]["nombre"] = $params[9] . self::Descripcion($porcion, $fechainicio) . date('d/m/Y', strtotime($auxiliar[$i]));
          $grid[$i]["tipo"] = strtoupper(substr($params[9], 0, 3));
          $grid[$i]["mondec"] = "0,00";
          $dateFormat = new sfDateFormat('es_VE');
          $fec3 = $dateFormat->format($grid[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
          if ($fec3 >= $fechadia)
            $grid[$i]["edodecstatus"] = "VIGENTE";
          else
            $grid[$i]["edodecstatus"] = "VENCIDA";
          $grid[$i]["fueing"] = $params[0];
          $grid[$i]["id"] = "9";
          $i++;
        }
        break;
      case (52 || 365):
        $grid[1]["numero"] = "01";
        if ($porcion === 52)
          $auxiliar[1] = H::dateAdd('d', 1, H::dateAdd('d', 7, $fechainicio, '+'), '-');
        else
          $auxiliar[1] = H::dateAdd('d', 1, H::dateAdd('d', 1, $fechainicio, '+'), '-');
        if ($params[7] == 'I')
          $grid[1]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', 1, H::dateAdd('d', $params[6], $fechainicio, '+'), '-')));
        else
          $grid[1]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', $params[6], $auxiliar[1], '+')));

        $grid[1]["nombre"] = $params[9] . self::Descripcion($porcion, $fechainicio) . date('d/m/Y', strtotime($auxiliar[1]));
        $grid[1]["tipo"] = strtoupper(substr($params[9], 0, 3));
        $grid[1]["mondec"] = "0,00";
        $dateFormat = new sfDateFormat('es_VE');
        $fec1 = $dateFormat->format($grid[1]["fecven"], 'i', $dateFormat->getInputPattern('d'));
        if ($fec1 >= $fechadia)
          $grid[1]["edodecstatus"] = "VIGENTE";
        else
          $grid[1]["edodecstatus"] = "VENCIDA";

        $grid[1]["fueing"] = $params[0];
        $grid[1]["id"] = "9";
        $i = 2;
        while ($i <= $filas) {
          $fechainicio = Herramientas::dateAdd('d', 1, $auxiliar[$i - 1], '+');
          if ($porcion == 52)
            $auxiliar[$i] = H::dateAdd('d', 7, $auxiliar[$i - 1], '+');
          else
            $auxiliar[$i] = H::dateAdd('d', 1, $auxiliar[$i - 1], '+');
          if ($params[7] == 'I')
            $grid[$i]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', 1, H::dateAdd('d', $params[6], $fechainicio, '+'), '-')));
          else
            $grid[$i]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', $params[6], $auxiliar[$i], '+')));
          $grid[$i]["numero"] = $i;
          $grid[$i]["nombre"] = $params[9] . self::Descripcion($porcion, H::dateAdd('d', 1, $fechainicio, '+')) . date('d/m/Y', strtotime($auxiliar[$i]));
          $grid[$i]["tipo"] = strtoupper(substr($params[9], 0, 3));
          $grid[$i]["mondec"] = "0,00";
          $dateFormat = new sfDateFormat('es_VE');
          $fectres = $dateFormat->format($grid[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
          if ($fectres >= $fechadia)
            $grid[$i]["edodecstatus"] = "VIGENTE";
          else
            $grid[$i]["edodecstatus"] = "VENCIDA";

          $grid[$i]["fueing"] = $params[0];
          $grid[$i]["id"] = "9";
          $i++;
        }
        break;
    }
  }

  public static function salvarPlanillas($clasemodelo, $grid) {
    $clasemodelo->save();

    //Grabar Tasas
    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      if ($x[$j]->getCodtas() != "") {
        $x[$j]->setCodpla($clasemodelo->getCodpla());
        $x[$j]->save();
      }
      $j++;
    }
    $z = $grid[1];
    $l = 0;
    if (!empty($z[$l])) {
      while ($j < count($z)) {
        $z[$l]->delete();
        $l++;
      }
    }
  }

  public static function verificarPagos($numpago) {
    $cr = new Criteria();
    $cr->add(FcpagosPeer::NUMPAG, trim($numpago));
    $cr->add(FcpagosPeer::EDOPAG, 'V');
    $fcpagos = FcpagosPeer::doSelectOne($cr);
    if (!$fcpagos) {
      return(true);
    } else {
      return(false);
    }
  }

  public static function FacrepagAnular($griddetalle, $numpag, $motanu, $rifcon) {
    $j = 0;
    foreach ($griddetalle as $dec) {
      $cr = new criteria();
      $cr->add(FcdeclarPeer::NUMDEC, $dec->getNumdec());
      $cr->add(FcdeclarPeer::NUMREF, $dec->getNumref());
      $cr->add(FcdeclarPeer::NUMERO, $dec->getNumero());
      $cr->add(FcdeclarPeer::FECVEN, $dec->getFecven());
      $fcdeclar = FcdeclarPeer::doSelectOne($cr);

      if ($fcdeclar) {
        if ($griddetalle[$j]->getAutliq() >= $fcdeclar->getAutliq()) {
          $fcdeclar->setAutliq($dat->getAutliq() - $griddetalle[$j]->getAutliq());
          $fcdeclar->setEdodec('V');
          $fcdeclar->save();
        } else {
          $fcdeclar->setEdodec('V');
          $fcdeclar->save();
        }
//        $c = new criteria();
//        $c->add(FcdeclarPeer::NUMDEC, trim($dec->Numdec()), CRITERIA::NOT_EQUAL);
//        $c->add(FcdeclarPeer::EDODEC, 'P', CRITERIA::NOT_EQUAL);
//        $c->add(FcdeclarPeer::NUMDEC, 'SP' . substr($dec->getNumdec(), 2, 8));
//        $criterion->addOr($c->getNewCriterion(FcdeclarPeer::NUMDEC, 'CR' . substr($dec->getNumdec(), 2, 8), Criteria::EQUAL));
//        $c->add($criterion);
//        FcdeclarPeer::doDelete($c);
      }
      $j++;
    }
    //Eliminamos deuda en caso de que exista
      H::EliminarRegistro('Fcdeclar', 'Numdec', 'CR'.substr($numpag, 2, 8));
      
    $c = new criteria();
    $c->add(FcpagosPeer::NUMPAG, trim($numpag));
    $fcpagos = FcpagosPeer::doSelectOne($c);
    if ($fcpagos) {
        $fcpagos->setEdoPag('A');
        $fcpagos->setMotanu($motanu);
        $fcpagos->setCedanu($rifcon);
        $fcpagos->setFecanu(date('Y-m-d'));
        $fcpagos->save();
    }
  }

  public static function salvarDeclaracionPlanillas($fcotring, $grid) {
    $aux = split('!', $fcotring->getRubros());
    $aux2 = split('_', $aux[0]);
    if (!$fcotring->getId()) {
      if ($fcotring->getNrocon() == 'INCLUSIO') {
        $t = new Criteria();
        $t->add(FcfueprePeer::CODFUE, $aux2[0]);
        $reg = FcfueprePeer::doSelectOne($t);
        if ($reg) {
          $nombreabr = $reg->getNomabr();
          $sql = "select max(nrocon) as nrocon from fcotring where nrocon like '" . $reg->getNomabr() . "%' order by nrocon";
        } else {
          $nombreabr = "";
          $sql = "select substring(nrocon,1,4) as nrocon from fcotring order by substring(nrocon,1,4)";
        }
        if (Herramientas::BuscarDatos($sql, $result)) {
          
            $encontrado=false;
            $r = substr($result[0]["nrocon"], 3, 5) + 1;
            while (!$encontrado)
            {           
              $numero = str_pad($nombreabr, 3, "0", STR_PAD_RIGHT) . str_pad($r, 5, "0", STR_PAD_LEFT);
              $sql="select nrocon from fcotring where nrocon='".$numero."'";
              if (Herramientas::BuscarDatos($sql,$result))
              {
                $r=$r+1;
              }
              else
              {
                $encontrado=true;
              }
            }           
        } else {
          $numero = str_pad($nombreabr, 3, "0", STR_PAD_LEFT) . '00001';
        }
        $fcotring->setNrocon($numero);
      }

      if ($fcotring->getIncluircontribuyente() == 'S') {
        $fcconrrep = new Fcconrep();
        $fcconrrep->setRifcon($fcotring->getRifcon());
        $fcconrrep->setNomcon($fcotring->getNomcon());
        $fcconrrep->setDircon($fcotring->getDircon());
        $fcconrrep->setNaccon($fcotring->getNaccon());
        $fcconrrep->setTipcon($fcotring->getTipcon());
        $fcconrrep->setRepcon('C');
        $fcconrrep->save();
      }

      if ($fcotring->getIncluirrepresentante() == 'S') {
        $fcconrrep2 = new Fcconrep();
        $fcconrrep2->setRifcon($fcotring->getRifrep());
        $fcconrrep2->setNomcon($fcotring->getNomconr());
        $fcconrrep2->setDircon($fcotring->getDirconr());
        $fcconrrep2->setNaccon($fcotring->getNacconr());
        $fcconrrep2->setTipcon($fcotring->getTipconr());
        $fcconrrep2->setRepcon('R');
        $fcconrrep2->save();
      }
    }
    $fcotring->setStaapu('A');
    $fcotring->setStadec('N');
    $fcotring->setCodfue($aux2[0]);
    $fcotring->save();

    self::grabarDeclaracionPlanilla($fcotring, $grid);
  }

  public static function grabarDeclaracionPlanilla($fcotring, $grid) {
    $salabono = 0;
    $sql = "Select coalesce(sum(SalPag),0) as monto from FCAbonos where fueing='" . $fcotring->getCodfue() . "' and rifcon='" . $fcotring->getRifcon() . "' AND STAPAG='N'";
    if (Herramientas::BuscarDatos($sql, $result)) {
      $salabono = $result[0]["monto"];
    }

    $aux = split('!', $fcotring->getRubros());
    $aux2 = split('_', $aux[0]);

    $t = new Criteria();
    $t->add(FcdeclarPeer::NUMDEC, $fcotring->getNrocon());
    $t->add(FcdeclarPeer::RIFCON, $fcotring->getRifcon());
    $t->add(FcdeclarPeer::NUMREF, $fcotring->getCodpla());
    FcdeclarPeer::doDelete($t);

    $x = $grid[0];
    $j = 0;
    while ($j < count($x)) {
      $x[$j]->setNumdec($fcotring->getNrocon());
      $x[$j]->setFueing($aux2[0]);
      $x[$j]->setFecdec($fcotring->getFecreg());
      $x[$j]->setRifcon($fcotring->getRifcon());
      $x[$j]->setNumref($fcotring->getCodpla());
      $x[$j]->setFundec($fcotring->getFunrec());
      $x[$j]->setMora(0);
      $x[$j]->setProntopg(0);

      if ($salabono <= $x[$j]->getMondec())
        $x[$j]->setAutliq($salabono);
      else
        $x[$j]->setAutliq($x[$j]->getMondec());


      //Actualizar_Saldo
      $monto = $x[$j]->getAutliq();
      $c = new Criteria();
      $c->add(FcabonosPeer::RIFCON, $fcotring->getRifcon());
      $c->add(FcabonosPeer::FUEING, $aux2[0]);
      $c->add(FcabonosPeer::STAPAG, 'N');
      $reg = FcabonosPeer::doSelect($c);
      if ($reg) {
        foreach ($reg as $datos) {
          if ($monto > 0) {
            if ($datos->getSalpag() >= $monto) {
              $datos->setSalpag($datos->getSalpag() - $monto);
            } else {
              $datos->setSalpag(0);
              $monto = $monto - $datos->getSalpag();
            }
            if ($datos->getSalpag() == 0) {
              $datos->setStapag('S');
            }
            $datos->save();
          }
        }
      }
      ////////////////

      $salabono = $salabono - $x[$j]->getMondec();
      if ($salabono < 0)
        $salabono = 0;

      if ($x[$j]->getEdodecstatus() == 'VIGENTE')
        $x[$j]->setEdodec('V');
      else if ($x[$j]->getEdodecstatus() == 'VENCIDA')
        $x[$j]->setEdodec('E');

      if ($x[$j]->getMondec() == $x[$j]->getAutliq())
        $x[$j]->setEdodec('P');


      $x[$j]->save();

      $j++;
    }
  }

  public static function llenarGridTasas($codpla, &$montototal) {
    $montototal = 0;
    $rubro = "";
    $valunidad = H::getX_vacio('CODEMP', 'Fcdefins', 'Valunitri', '001');
    $c = new Criteria();
    $c->add(FcplatasPeer::CODPLA, $codpla);
    $c->addJoin(FcplatasPeer::CODPLA, FcdefplaPeer::CODPLA);
    $c->addJoin(FcplatasPeer::CODTAS, FcdeftasasPeer::CODTAS);
    $c->addAscendingOrderByColumn(FcdeftasasPeer::CODFUE);
    $resul = FcdeftasasPeer::doSelect($c);
    if ($resul) {
      foreach ($resul as $obj) {
        if ($obj->getBsout() == 'B')
          $valor = $obj->getValtas();
        else
          $valor=$obj->getValtas() * $valunidad;

        $montototal = $montototal + $valor;
        $rubro = $rubro . $obj->getCodfue() . '_' . number_format($valor, 2, ',', '.') . '!';
      }
    }

    return $rubro;
  }

  public static function calcularDeclaracionPlanilla($fecha, $rubros, &$grid) {
    $aux = split('!', $rubros);
    $cant = count($aux) - 1;
    $i = 0;    
    $filas=0;
    $grid = array();
    while ($i < $cant) {
      $aux2 = split('_', $aux[$i]);
      $params = self::calcularporcionesplanillas($aux2[0]);
      if (count($params) > 0) {
        if ($params[1] == 'PAGO UNICO') {
          $params[3] = $fecha;
          $params[4] = $fecha;
        } else {
          $params[3] = "01/01/" . substr($fecha, 6, 4);
          $params[4] = "31/12/" . substr($fecha, 6, 4);
        }
        $anocalculo = 0;
        $fechadia = date('d/m/Y');
        $fechaultima = false;
        $numpor = self::CalPorcion($params[0], $params[3], $params[4]);
        if ($i == 0) {
          $filas = $numpor;
        } else {
          $filas = count($grid) + ($numpor-1);
        }
        $porciones = $numpor-1;
        $ultimaFila = count($grid)+1;
        if (substr($params[3], 0, 2) == '01')
          $fechaultima = true;
        $dateFormat = new sfDateFormat('es_VE');
        $fec1 = $dateFormat->format($fecha, 'i', $dateFormat->getInputPattern('d'));
        self::distribucionVencimientoPlanillas(($filas - 1), $fec1, $params[0], $params, $rubros, $i, $ultimaFila, $grid);

        if ($i == 0) {
          $j = 0;
          while ($j < (count($grid))) {
            $porali = H::toFloat($aux2[1]);
            if ($porciones > 0) {
              $porali = $porali / $porciones;
            } else {
              $porali = 0;
            }
            $grid[$j]["fueing"] = $aux2[0];
            $grid[$j]["mondec"] = number_format($porali, 2, ',', '.');

            $j++;
          }
        } else {
          $j = $ultimaFila-$params[0];
          while ($j < (count($grid))) {
            $porali = H::toFloat($aux2[1]);
            if ($porciones > 0) {
              $porali = $porali / $porciones;
            } else {
              $porali = 0;
            }
            $grid[$j]["fueing"] = $aux2[0];
            $grid[$j]["mondec"] = number_format($porali, 2, ',', '.');

            $j++;
          }
        }
      }
      $i++;
    }
  }

  public static function calcularporcionesplanillas($codfue) {
    $params = array();
    $c = new Criteria();
    $c->add(FcfueprePeer::CODFUE, $codfue);
    $fcfuepre = FcfueprePeer::doselectone($c);
    if ($fcfuepre) {
      if ($fcfuepre->getFrecob() == '999') {
        $params[0] = 1;  //Fporcion
        $params[1] = 'PAGO UNICO';  //FName
        $params[2] = 1;  //Frecuencia
        $params[3] = $fcfuepre->getInieje();  //EFechaInicio
        $params[4] = $fcfuepre->getFineje();  //EFechaFin
        $params[5] = '';
      } else {
        $params[0] = '';  //Fporcion
        $params[1] = '';  //FName
        $params[2] = $fcfuepre->getFrecob();  //Frecuencia
        $params[3] = $fcfuepre->getInieje();  //EFechaInicio
        $params[4] = $fcfuepre->getFineje();  //EFechaFin

        $auxporciones = Constantes::Porciones();
        if ($params[2] == (int) substr($auxporciones[$params[2]], 0, strlen($params[2]))) {
          $params[0] = $params[2];
          $params[1] = substr($auxporciones[$params[2]], strlen($params[2]) + 1, strlen($auxporciones[$params[2]]));
        }
        $params[5] = $auxporciones;
      }

      $params[6] = $fcfuepre->getDiaven();  //DiasVencAju
      $params[7] = $fcfuepre->getTipven();  //Tipven
    }
    return $params;
  }

  public static function distribucionVencimientoPlanillas($filas, $fecreg, $porcion, $params, $rubros, $z, $ultimaFila, &$grid) {
    $fechadia = $fecreg;
    $dateFormat = new sfDateFormat('es_VE');
    $Efecini = $dateFormat->format($params[3], 'i', $dateFormat->getInputPattern('d'));
    $fechainicio = $Efecini;
    $fecha;
    $fecha2;
    switch ($porcion) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 6:
      case 12:

        if ($params[1] == 'PAGO UNICO') {
          if ($z == 0) {
            //  $grid[0]["fecven"]=$fechainicio;
            $fecha = $fechainicio;
          } else {
            //   $grid[$ultimaFila-$porcion]["fecven"]=$fechainicio;
            $fecha = $fechainicio;
          }
        } else {
          if ($z == 0) {
            $fecha = H::dateAdd('m', (int) 12 / $porcion, H::dateAdd('d', 1, $Efecini, '-'), '+');
            //   $grid[0]["fecven"]=H::dateAdd('m',(int)12/$porcion,H::dateAdd('d',1,$Efecini,'-'),'+');
          } else {
            $fecha = H::dateAdd('m', (int) 12 / $porcion, H::dateAdd('d', 1, $Efecini, '-'), '+');
            //     $grid[$ultimaFila-$porcion]["fecven"]=H::dateAdd('m',(int)12/$porcion,H::dateAdd('d',1,$Efecini,'-'),'+');
          }
        }
        //De acuerdo a configuración si se cobra luego de la fecha de inicio o de la fecha fin del vencimiento de la cuota
        if ($params[7] == "I") {
          $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $params[6], $fechainicio, '+'), '-');
        } else {
          $fecha2 = Herramientas::dateAdd('d', $params[6], $fecha, '+');
        }

        if ($z == 0) {
          if ($fecha2 >= $fechadia) {
            $grid[0]["edodecstatus"] = "VIGENTE";
          } else {
            $grid[0]["edodecstatus"] = "VENCIDA";
          }

          $grid[0]["fecven"] = H::FormatoFecha($fecha2);
          $grid[0]["nombre"] = $params[1] . ' VENCIMIENTO ' . Herramientas::FormatoFecha($fecha);
          $grid[0]["tipo"] = strtoupper(substr($params[1], 0, 3));
          $grid[0]["id"] = "9";
          $feciniaux = H::dateAdd('d', 1, $fecha, '+');
          $i = 1;
          while ($i < $filas) {
            if ($i > 1) {
              $feciniaux = H::dateAdd('d', 1, $fecfinaux, '+');
            }
            $fecfinaux = H::dateAdd('d', 1, H::dateAdd('m', (int) 12 / $porcion, $feciniaux, '+'), '-');
            if ($params[7] == 'I') {
              $grid[$i]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', 1, H::dateAdd('d', $params[6], $feciniaux, '+'), '-')));
            } else {
              $grid[$i]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', $params[6], $fecfinaux, '+')));
            }
            $grid[$i]["nombre"] = $params[1] . ' VENCIMIENTO ' . $grid[$i]["fecven"];
            $grid[$i]["tipo"] = strtoupper(substr($params[1], 0, 3));
            $grid[$i]["mondec"] = "0,00";
            $dateFormat = new sfDateFormat('es_VE');
            $fec1 = $dateFormat->format($grid[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
            if ($fec1 >= $fechadia) {
              $grid[$i]["edodecstatus"] = "VIGENTE";
            } else {
              $grid[$i]["edodecstatus"] = "VENCIDA";
            }

            $grid[$i]["id"] = "9";

            $i++;
          }
        } else {
          $feciniaux = $fechainicio;
          $grid[$ultimaFila - $porcion]["fecven"] = $fecha2;
          $fecaux = $dateFormat->format($grid[$ultimaFila - $porcion]["fecven"], 'i', $dateFormat->getInputPattern('d'));
          if ($fecaux >= $fechadia) {
            $grid[$ultimaFila - $porcion]["edodecstatus"] = "VIGENTE";
          } else {
            $grid[$ultimaFila - $porcion]["edodecstatus"] = "VENCIDA";
          }

          $grid[$ultimaFila - $porcion]["nombre"] = $params[1] . ' VENCIMIENTO ' . Herramientas::FormatoFecha($grid[$ultimaFila - $porcion]["fecven"]);
          $grid[$ultimaFila - $porcion]["tipo"] = strtoupper(substr($params[1], 0, 3));
          $grid[$ultimaFila - $porcion]["id"] = "9";
          for ($i = ($ultimaFila - ($porcion - 1)); $i < (int) $filas; $i++) {
            if ($i > 1) {
              $feciniaux = H::dateAdd('d', 1, $fecfinaux, '+');
            }
            $fecfinaux = H::dateAdd('m', (int) 12 / $porcion, $grid[$i - 1]["fecven"], '+');
            if ($params[7] == 'I') {
              $grid[$i]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', 1, H::dateAdd('d', $params[6], $feciniaux, '+'), '-')));
            } else {
              $grid[$i]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', $params[6], $fecfinaux, '+')));
            }
            $grid[$i]["nombre"] = $params[1] . ' VENCIMIENTO ' . Herramientas::FormatoFecha($grid[$i]["fecven"]);
            $grid[$i]["tipo"] = strtoupper(substr($params[1], 0, 3));
            $grid[$i]["mondec"] = "0,00";
            $dateFormat = new sfDateFormat('es_VE');
            $fec1 = $dateFormat->format($grid[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
            if ($fec1 >= $fechadia) {
              $grid[$i]["edodecstatus"] = "VIGENTE";
            } else {
              $grid[$i]["edodecstatus"] = "VENCIDA";
            }
            $grid[$i]["id"] = "9";
          }
        }
        break;
      case (24):
        $diamax = 0;
        $ultimo = false;
        $fecha = $fechainicio;
        $auxiliar[0] = H::dateAdd('d', 1, H::dateAdd('d', 15, $fechainicio, '+'), '-');
        if ($params[7] == 'I') {
          $grid[0]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', 1, H::dateAdd('d', $params[6], $fecha, '+'), '-')));
        } else {
          $grid[0]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', $params[6], $auxiliar[1], '+')));
        }


        $grid[0]["nombre"] = $params[1];
        $grid[0]["tipo"] = strtoupper(substr($params[1], 0, 3));
        $grid[0]["mondec"] = "0,00";
        $dateFormat = new sfDateFormat('es_VE');
        $fec1 = $dateFormat->format($grid[0]["fecven"], 'i', $dateFormat->getInputPattern('d'));
        if ($fec1 >= $fechadia) {
          $grid[0]["edodecstatus"] = "VIGENTE";
        } else {
          $grid[0]["edodecstatus"] = "VENCIDA";
        }
        $grid[0]["id"] = "9";
        $i = 1;
        while ($i <= $filas) {
          $dia = substr($auxiliar[$i - 1], 8, 2);
          $mes = substr($auxiliar[$i - 1], 5, 2);
          $annio = substr($auxiliar[$i - 1], 0, 4);
          if ($mes == '2' && $dia == '15' && (int) ($annio % 4) == 0) {
            $auxiliar[$i] = Herramientas::dateAdd('d', 14, $auxiliar[$i - 1], '+');
          } else if ($mes == '2' && $dia == '15' && (int) ($annio % 4) != 0) {
            $auxiliar[$i] = Herramientas::dateAdd('d', 13, $auxiliar[$i - 1], '+');
          } else if (($mes == '1' or $mes == '3' or $mes == '5' or $mes == '7' or $mes == '8' or $mes == '10' or $mes == '12') && $dia == '15') {
            $auxiliar[$i] = Herramientas::dateAdd('d', 16, $auxiliar[$i - 1], '+');
          } else {
            $auxiliar[$i] = Herramientas::dateAdd('d', 15, $auxiliar[$i - 1], '+');
          }

          $fechainicio = Herramientas::dateAdd('d', 1, $auxiliar[$i - 1], '+');

          if ($params[7] == "I") {
            $grid[$i]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', 1, Herramientas::dateAdd('d', $params[6], $fechainicio, '+'), '-')));
          } else {
            $grid[$i]["fecven"] = date('d/m/Y', strtotime(Herramientas::dateAdd('d', $params[6], $auxiliar[$i], '+')));
          }

          $grid[$i]["nombre"] = $params[1];
          $grid[$i]["tipo"] = strtoupper(substr($params[1], 0, 3));
          $grid[$i]["mondec"] = "0,00";
          $dateFormat = new sfDateFormat('es_VE');
          $fec3 = $dateFormat->format($grid[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
          if ($fec3 >= $fechadia)
            $grid[$i]["edodecstatus"] = "VIGENTE";
          else
            $grid[$i]["edodecstatus"] = "VENCIDA";

          $grid[$i]["id"] = "9";
          $i++;
        }
        break;
      case (52 || 365):
        if ($porcion === 52) {
          $auxiliar[0] = H::dateAdd('d', 1, H::dateAdd('d', 7, $fechainicio, '+'), '-');
        } else {
          $auxiliar[0] = H::dateAdd('d', 1, H::dateAdd('d', 1, $fechainicio, '+'), '-');
        }
        if ($params[7] == 'I' && $params[6] > 0) {
          $grid[0]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', 1, H::dateAdd('d', $params[6], $fechainicio, '+'), '-')));
        } else if ($params[7] == 'F' && $params[6] > 0) {
          $grid[0]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', $params[6], $auxiliar[0], '+')));
        } else {
          $grid[0]["fecven"] = date('d/m/Y', strtotime($auxiliar[0]));
        }

        $grid[0]["nombre"] = $params[1];
        $grid[0]["tipo"] = strtoupper(substr($params[1], 0, 3));
        $grid[0]["mondec"] = "0,00";
        $dateFormat = new sfDateFormat('es_VE');
        $fec1 = $dateFormat->format($grid[0]["fecven"], 'i', $dateFormat->getInputPattern('d'));
        if ($fec1 >= $fechadia) {
          $grid[0]["edodecstatus"] = "VIGENTE";
        } else {
          $grid[0]["edodecstatus"] = "VENCIDA";
        }

        $grid[0]["id"] = "9";
        $i = 1;
        while ($i <= $filas) {
          $fechainicio = Herramientas::dateAdd('d', 1, $auxiliar[$i - 1], '+');
          if ($porcion == 52)
            $auxiliar[$i] = H::dateAdd('d', 7, $auxiliar[$i - 1], '+');
          else
            $auxiliar[$i] = H::dateAdd('d', 1, $auxiliar[$i - 1], '+');
          if ($params[7] == 'I' && $params[6] > 0) {
            $grid[$i]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', 1, H::dateAdd('d', $params[6], $fechainicio, '+'), '-')));
          } else if ($params[7] == 'F' && $params[6] > 0) {
            $grid[$i]["fecven"] = date('d/m/Y', strtotime(H::dateAdd('d', $params[6], $auxiliar[$i], '+')));
          } else {
            $grid[$i]["fecven"] = date('d/m/Y', strtotime($auxiliar[$i]));
          }
          $grid[$i]["nombre"] = $params[1];
          $grid[$i]["tipo"] = strtoupper(substr($params[1], 0, 3));
          $grid[$i]["mondec"] = "0,00";
          $dateFormat = new sfDateFormat('es_VE');
          $fectres = $dateFormat->format($grid[$i]["fecven"], 'i', $dateFormat->getInputPattern('d'));
          if ($fectres >= $fechadia) {
            $grid[$i]["edodecstatus"] = "VIGENTE";
          } else {
            $grid[$i]["edodecstatus"] = "VENCIDA";
          }
          $grid[$i]["id"] = "9";
          $i++;
        }
        break;
    }
  }

  public static function actualizarFactura($numpag, $rifcon, $nuevonumpag) {
    $cd = new Criteria();
    $cd->add(FcdetpagPeer :: NUMPAG, $numpag);
    $fcdetpag = FcdetpagPeer :: doSelect($cd);
    if ($fcdetpag) {
      foreach ($fcdetpag as $per) {
        $per->setNumpag($nuevonumpag);
        $per->save();
      }
    }

    $cp = new Criteria();
    $cp->add(FcdecpagPeer :: NUMPAG, $numpag);
    $fcdecpag = FcdecpagPeer :: doSelect($cp);
    if ($fcdecpag) {
      foreach ($fcdecpag as $per) {
        $per->setNumpag($nuevonumpag);
        $per->save();
      }
    }

    $cr = new Criteria();
    $cr->add(FcrecdespagPeer :: NUMPAG, $numpag);
    $fcrecdespag = FcrecdespagPeer :: doSelect($cr);
    if ($fcrecdespag) {
      foreach ($fcrecdespag as $per) {
        $per->setNumpag($nuevonumpag);
        $per->save();
      }
    }

    $c = new Criteria();
    $c->add(FcpagosPeer :: NUMPAG, $numpag);
    $reg = FcpagosPeer :: doSelect($c);
    if ($reg) {
      foreach ($reg as $per) {
        $per->setNumpag($nuevonumpag);
        $per->save();
      }
    }
  }

  public static function existenciaPago($numpag) {
    $c = new Criteria();
    $c->add(FcpagosPeer :: NUMPAG, $numpag);
    $reg = FcpagosPeer :: doSelect($c);
    if ($reg) {
      return(true);
    } else {
      return(false);
    }
  }

  public static function reversarPago($numpag) {

    $c = new Criteria();
    $c->add(FcpagosPeer :: NUMPAG, $numpag);
    $reg = FcpagosPeer :: doSelect($c);
    if ($reg) {
      foreach ($reg as $dat) {
        $dat->setEdopag("");
        $dat->save();
      }
    }
  }

  public static function eliminarFacrecpag($clase) {
    $c = new Criteria();
    $c->add(FcdecpagPeer :: NUMPAG, $clase->getNumpag());
    $c->addJoin(FcdecpagPeer::NUMDEC, FcdeclarPeer::NUMDEC);
    $c->addJoin(FcdecpagPeer::NUMREF, FcdeclarPeer::NUMREF);
    $c->addJoin(FcdecpagPeer::FECVEN, FcdeclarPeer::FECVEN);
    $c->addJoin(FcdecpagPeer::NUMERO, FcdeclarPeer::NUMERO);
    //$c->addJoin(FcdecpagPeer::FUEING, FcdeclarPeer::FUEING);
    $c->add(FcdeclarPeer :: RIFCON, $clase->getRifcon());
    $reg = FcdecpagPeer :: doSelect($c);
    if (count($reg) > 0) {
      foreach ($reg as $dec) {
        $sql = "Select * from FCDECLAR where (NumDec='SP" . substr($dec->getNumdec(), 2, 8) . "' Or NumDec='CR" . substr($dec->getNumdec(), 2, 8) . "') And Edodec='P' And FecUltPag =To_Date('" . $clase->getFecpag() . "','DD/MM/YYYY') ";
        if (H::BuscarDatos($sql, $result)) {
          return 755;
        }
      }
      //Actualiazación en la Declaración
      foreach ($reg as $dec) {
        $c = new Criteria();
        $c->add(FcdeclarPeer :: NUMDEC, $dec->getNumdec());
        $c->add(FcdeclarPeer :: NUMREF, $dec->getNumref());
        $c->add(FcdeclarPeer :: NUMERO, $dec->getNumero());
        $c->add(FcdeclarPeer :: FECVEN, $dec->getFecven());
        $c->add(FcdeclarPeer :: TIPO, 'MOR', Criteria::NOT_EQUAL);
        $fcdecpag = FcdeclarPeer :: doSelect($c);
        if ($fcdecpag) {
          foreach ($fcdecpag as $result) {
            if ($result->getMontopagcon() >= $result->getAutliq()) {
              $result->setAutliq($result->getAutliq() - $result->getMontopagcon());
              $result->setEdodec("V");
              $result->save();
            } else {
              $result->setEdodec("V");
              $result->setAutliq(0);
              $result->save();
            }
            $cr = new Criteria();
            $cr->add(FcdeclarPeer :: EDODEC, 'P', Criteria::NOT_EQUAL);
            $criterion = $cr->getNewCriterion(FcdeclarPeer :: NUMDEC, 'SP' . substr($result->getNumdec(), 2, 8), Criteria::LIKE);
            $criterion->addOr($cr->getNewCriterion(FcdeclarPeer :: NUMDEC, 'CR' . substr($result->getNumdec(), 2, 8), Criteria::LIKE));
            $cr->add($criterion);
            $fcdeclar = FcdeclarPeer :: doSelect($cr);
            if ($fcdeclar) {
              foreach ($fcdeclar as $v) {
                $v->delete();
              }
            }
          }
        }
      }
      //Eliminamos deuda en caso de que exista
      H::EliminarRegistro('Fcdeclar', 'Numdec', 'CR'.substr($clase->getNumpag(), 2, 8));
      
      //EliminarRegistroDetalle
      $cp = new Criteria();
      $cp->add(FcdecpagPeer :: NUMPAG, $clase->getNumpag());
      $fcdecpag = FcdecpagPeer :: doSelect($cp);
      if ($fcdecpag) {
        foreach ($fcdecpag as $per) {
          $per->delete();
        }
      }
      //Detalle de Forma de Pago
      $cd = new Criteria();
      $cd->add(FcdetpagPeer :: NUMPAG, $clase->getNumpag());
      $fcdetpag = FcdetpagPeer :: doSelect($cd);
      if ($fcdetpag) {
        foreach ($fcdetpag as $per) {
          $c = new Criteria();
          $c->add(FctippagPeer::TIPPAG, $per->getTippag());
          $fctippag = FctippagPeer:: doSelectOne($c);
          if ($fctippag) {
            if ($fctippag->getGenmov() == 'S') {
              $c1 = new Criteria();
              $c1->add(TsmovlibPeer::NUMCUE, $per->getCtaban());
              $c1->add(TsmovlibPeer::REFLIB, $per->getNrodet());
              $c1->add(TsmovlibPeer::TIPMOV, $per->getTippag());
              $mov = TsmovlibPeer::doSelect($c1);

              if ($mov) {
                foreach ($mov as $v) {
                  if ($v->getStacon() != 'C') {
                    $ing = new Criteria();
                    $ing->add(CiregingPeer::CTABAN, $per->getCtaban());
                    $ing->add(CiregingPeer::NUMDEP, $per->getNrodet());
                    $ing->add(CiregingPeer::NUMCOM, $v->getNumcom());
                    $cingreso = CiregingPeer::doSelect($ing);
                    if ($cingreso) {
                      foreach ($cingreso as $i) {
                        //Eliminación Detalle de Ingreso
                        $c = new Criteria();
                        $c->add(CiimpingPeer::REFING, $i->getRefing());
                        $c->add(CiimpingPeer::FECING, $i->getFecing());
                        CiimpingPeer::doDelete($c);

                        //Eliminacion del Comprobante
                        $c = new Criteria();
                        $c->add(ContabcPeer::NUMCOM, $i->getNumcom());
                        $c->add(ContabcPeer::FECCOM, $i->getFecing());
                        ContabcPeer::doDelete($c);

                        $c = new Criteria();
                        $c->add(Contabc1Peer::NUMCOM, $i->getNumcom());
                        $c->add(Contabc1Peer::FECCOM, $i->getFecing());
                        Contabc1Peer::doDelete($c);
                      }
                      $i->delete();
                    }
                    $v->delete();
                  } else {
                    return 1506;
                  }
                }
              } else {
                return 1505;
              }
            }
          }

          $per->delete();
        }
      }
      //Clase
      $clase->delete();

      //EliminarRegistroDetalle
      $cf = new Criteria();
      $cf->add(FcrecdespagPeer :: NUMPAG, $clase->getNumpag());
      $fcrecdespag = FcrecdespagPeer :: doSelect($cf);
      if ($fcrecdespag) {
        foreach ($fcrecdespag as $per) {
          $per->delete();
        }
      }
    }
    return -1;
  }

  public static function eliminarFacprohdec($clase) {


    $c = new Criteria();
    $c->add(FcprolicPeer::NROCON, $clase->getNumref());
    $fcprolic = FcprolicPeer::doSelectOne($c);
    if ($fcprolic) {
      $fcprolic->setEstdec("N");
      $fcprolic->save();
    }

    //Eliminación de la declaración
    $c = new Criteria();
    $c->add(FcdeclarPeer::NUMDEC, $clase->getNumdec());
    $reg1 = FcdeclarPeer::doSelect($c);

    if ($reg1) {
      foreach ($reg1 as $v) {
        $v->delete();
      }
    }

    return -1;
  }

  public static function Combo_tipo_movimiento($fcliqpag) {
    $result = array();
    $arreglo = array();
    $sql = "Select codtip,destip from tstipmov order by codtip";
    //$sql = "Select tippag,despag from fctippag order by tippag";
    if (Herramientas :: BuscarDatos($sql, $result)) {
      $i = 0;
      while ($i < count($result)) {
        $cadena_valor = $result[$i]['codtip'];
        $cadena_texto = $result[$i]['destip'];
        $arreglo += array(
            $cadena_valor => $cadena_texto
        );
        $i++;
      }
    }
    return $arreglo;
  }

  public static function salvarFacliqpag($clasemodelo, $grid, &$msjuno, &$msjdos) {

    $x = $grid[0];
    $i = 0;
    $id = $clasemodelo->getId();
    $clasemodelo->save();
    while ($i < count($x)) {
      if ($x[$i]->getCheck() == '1') {
        //Actualización del Pago
        if (!$id) {
          $c = new Criteria();
          $c->add(FcpagosPeer::NUMPAG, $x[$i]->getNumpag());
          $per = FcpagosPeer :: doSelectOne($c);
          if ($per) {
            self::SalvarMovPagosFacliqpag($clasemodelo, $per, $msjuno, $msjdos, $x[$i]->getMonpag());
            if ($msjuno == -1) {
              $per->setEdopag('L'); //Cambio de estatus del pago a Liquidado
              $per->save();
            } else {
              $msjtres = $x[$i]->getNumpag();
              break;
            }
          }
          $x[$i]->setNumliq($clasemodelo->getNumliq());
          $x[$i]->save();
        }
      }
      $i++;
    }
    return(-1);
  }

  public static function SalvarMovPagosFacliqpag($clasemodelo, $x, &$msjuno, &$msjdos, $monpag) {
    //  try{
    $msjuno = -1;
    $montodes = 0;
    $cant = 0;
    $cr = new Criteria();
    $cr->add(FcdetpagPeer::NUMPAG, $x->getNumpag());
    $fcdet = FcdetpagPeer::doSelect($cr);
    if ($fcdet) {
      foreach ($fcdet as $d) {
        $cant++;
      }
    }
    //Descuentos
    $d = new Criteria();
    $d->add(FcrecdespagPeer::NUMPAG, $x->getNumpag());
    $fcrecdespag = FcrecdespagPeer::doSelect($d);
    if ($fcrecdespag) {
      foreach ($fcrecdespag as $det) {
        $montodes = $montodes + $det->getMonto();
      }
    }
    //Dettalle de pago
    $det = new Criteria();
    $det->add(FcdecpagPeer :: NUMPAG, $x->getNumpag());
    $regist = FcdecpagPeer :: doSelect($det);
    if (!($regist)) {
      $reg = array();
    } else {

      foreach ($regist as $per) {

        $c = new Criteria();
        $c->add(FcdeclarPeer :: RIFCON, $x->getRifcon());
        $c->add(FcdeclarPeer :: NUMDEC, $per->getNumdec());
        $c->add(FcdeclarPeer :: NUMREF, $per->getNumref());
        $c->add(FcdeclarPeer :: FECVEN, $per->getFecven());
        $c->add(FcdeclarPeer :: NUMERO, $per->getNumero());
        $c->add(FcdeclarPeer :: FUEING, $per->getFueing());
        $registros = FcdeclarPeer :: doSelectOne($c);
        if ($registros) {
          $fcdeclar = new Fcdeclar();
          $fcdeclar->setNombre($registros->getNombre());
          $fcdeclar->setNumref($registros->getNumref());
          $fcdeclar->setAutliq($registros->getAutliq());
          $fcdeclar->setMora($registros->getMora());
          $fcdeclar->setTipo($registros->getTipo());
          $fcdeclar->setNumero($per->getNumero());
          $fcdeclar->setNumdec($per->getNumdec());
          $fcdeclar->setFecven($per->getFecven());
          $fcdeclar->setMondec($per->getMondec());
          $fcdeclar->setFueing($per->getFueing());
          $fcdeclar->setStsdec($per->getStsdec());
          $fcdeclar->setMontopag(H :: FormatoMonto($registros->getMondec() + $registros->getMora() - $registros->getProntopg()));
          $fcdeclar->setMontopagcon($registros->getAutliq());
          $fcdeclar->setSaldo(H :: FormatoMonto($registros->getMontopag() - $registros->getMontopagcon()));

          $fcdeclar->setCheck('1');
          $reg[] = $fcdeclar;
        }
      }
    }
    $montodes = H::toFloat($montodes / $cant);
    //Forma de Pago
    $v = new Fcdetpag();
    $v->setCtaban($clasemodelo->getCtaban());
    $v->setFecdet($clasemodelo->getFecliq());
    $v->setTippag($clasemodelo->getCodtip());
    $v->setNrodet($clasemodelo->getNrodep());
    $v->setMonpag($monpag);

    //Generación de correlativo de Referencia de Ingreso
    if (Herramientas::getVerCorrelativo('coring', 'cidefniv', $r)) {
      $encontrado = false;
      while (!$encontrado) {
        $numero = str_pad($r, 8, '0', STR_PAD_LEFT);
        $c = new Criteria();
        $c->add(CiregingPeer::REFING, $numero);
        $resul = CiregingPeer::doSelectOne($c);
        if ($resul) {
          $r = $r + 1;
        } else {
          $encontrado = true;
        }
      }
      $x->setRefing($numero);
    }
    $x->setNrodep($clasemodelo->getNrodep());
    $x->setFecdet($clasemodelo->getFecliq());
    H::getSalvarCorrelativo('coring', 'cidefniv', 'refing', $r, $msg);
    self::GenerarComprobante($x, $reg, $v, $msjuno, $msjdos, $montodes);
    if ($msjuno == -1) {
      //Ingresos
      self::SalvarIngreging($x, $reg, $v, $montodes);
    }
  }

  /*  }
    catch (Exception $ex){
    echo $ex; exit();
    return 0;
    } */

  public static function eliminarFacliqpag($clase) {

    //Eliminación del detalle de liquidación
    $c = new Criteria();
    $c->add(FcdetliqPeer::NUMLIQ, $clase->getNumliq());
    $fcdetliq = FcdetliqPeer::doSelect($c);
    if ($fcdetliq) {
      foreach ($fcdetliq as $v) {
        //Actualización del estatus del pago a Valido
        $cr = new Criteria();
        $cr->add(FcpagosPeer::NUMPAG, $v->getNumpag());
        $reg = FcpagosPeer :: doSelectOne($cr);
        if ($reg) {
          $reg->setEdopag('V');
          $reg->save();
        }

        $v->delete();
      }
    }

    //Eliminación de la Liquidación de Pagos
    $cr = new Criteria();
    $cr->add(FcliqpagPeer::NUMLIQ, $clase->getNumliq());
    $reg1 = FcliqpagPeer::doSelectOne($cr);
    $reg1->delete();

    return -1;
  }

  public static function datosActEconomica($numlic='', $annioini='', $anniofin='', &$gridactecom=array(), $params=array(), &$montodeclar=0) {

    $montoexoner = 0;
    $montoacomparar = 0;
    $i = 0;
    $pordec = 0;
    $sql = "Select * from FCACTPIC where NumDoc='" . $numlic . "' and modo='D' and AnoDec>='" . $annioini . "' and AnoDec<='" . $anniofin . "' " .
            "UNION ALL " .
            "Select * from FCACTPIC where NumDoc='" . $numlic . "' and modo='E' and AnoDec='" . $anniofin . "'";
    if (Herramientas::BuscarDatos($sql, $result)) {
      while ($i < count($result)) {
        $gridactecom[$i]['ano'] = $result[$i]['anodec'];
        $gridactecom[$i]['codact'] = $result[$i]['codact'];
        $encontroactividad = -1;
        //Datos de la Actividad Economica
        $sql = "Select a.CodAct as Codigo,a.DesAct as descripcion,a.MinTri as mintri,a.AfoAct as alicuota,(CASE WHEN a.MinoFac='F' THEN 'Factor' ELSE 'Minimo' END) as factor,  (CASE WHEN a.Exoner='S' THEN 'SI' ELSE 'NO' END)  as Exonerable,b.valunitri  from FCACTCOM a,FCDefIns b Where  " .
                "trim(a.codact) like '" . $result[$i]['codact'] . "%'  and a.anoact='" . $result[$i]['anodec'] . "'";
        $j = 0;
        if (Herramientas::BuscarDatos($sql, $act)) {
          while (($j < count($act)) && $encontroactividad = -1) {
            if ($result[$i]['codact'] == $act[$j]['codigo']) {
              $encontroactividad = $j;
              $gridactecom[$i]['desact'] = $act[$j]['descripcion'];
              if ($params[1] == 'B') {
                $montoacomparar = $act[$j]['mintri'];
              } else {
                $montoacomparar = $act[$j]['mintri'] * $params[2];
              }
              $pordec = 1;


              if ($act[$j]['factor'] == "Factor") {
                $gridactecom[$i]['monimp'] = $result[$i]['monact'] * $pordec * $act[$j]['alicuota'];
              } else {
                $gridactecom[$i]['monimp'] = $result[$i]['monact'] * $pordec * ($act[$j]['alicuota'] / 100);
              }
              if ($gridactecom[$i]['monimp'] <= $montoacomparar) {
                $gridactecom[$i]['monimp'] = $montoacomparar;
              }
              $gridactecom[$i]['moning'] = $result[$i]['monact'];

              $montodeclar = $montodeclar + $gridactecom[$i]['monimp'];
              $gridactecom[$i]['monfis'] = 0;
              $gridactecom[$i]['porali'] = $act[$j]['alicuota'];
              $gridactecom[$i]['monliq'] = 0;
              $c = new Criteria();
              $c->add(FcdeclarPeer::NUMREF, $numlic);
              $fcdeclar = FcdeclarPeer::doSelectOne($c);
              if ($fcdeclar) {
                $sql = "select valorut from fcdefut where fecini<='" . $fcdeclar->getFecini() . "'   and fecfin >='" . $fcdeclar->getFecini() . "'";
              }
              if (Herramientas::BuscarDatos($sql, $ut)) {
                $gridactecom[$i]['unidad'] = $ut[$j]['valorut'];
              }

              $gridactecom[$i]['minimo'] = $act[$j]['mintri'];
            }
            $j++;
          }
        }
        $i++;
      }
    }
  }

  public static function calculoImpuesto($fila, &$grid) {
    $alicuota = 0;
    $montodif = 0;
    $impcau = 0;
    $alicuota = H::toFloat($grid[$fila][6]);
    $montodif = H::toFloat($grid[$fila][5]) - H::toFloat($grid[$fila][3]);
    $impcau = $montodif * $alicuota / 100;


    if ($impcau >= (H::toFloat($grid[$fila][8]) * H::toFloat($grid[$fila][9]))) {
      $grid[$fila][7] = number_format($impcau, 2, ',', '.');
    } else {
      $grid[$fila][7] = number_format(H::toFloat($grid[$fila][8]) * H::toFloat($grid[$fila][9]), 2, ',', '.');
    }
  }

  public static function DistribuirDeclaracionReparo($grid, $gridd, &$griddeuda, $codfuerep, $codfuesan, $fecrep, $numlic, $indcalint) {

    $i = 0;
    $sw = false;
    $monto = 0;
    $fechadia = date("Y-m-d");
    $dateFormat = new sfDateFormat('es_VE');
    if (count($gridd) == 1) {
      $pos = 0;
    } else {
      $pos = count($gridd);
    }

    while ($i < count($grid)) {
      $valor = H::FloatVEtoFloat2($grid[$i][7]) * 1;
      if ($valor != 0) {
        $encontro = false;
        $j = 0;
        if ($gridd) {
          while ($j < count($gridd)) {
            if ($gridd[$j][2] == "IMPUESTO CAUSADO NO DECLARADO, AÑO " . $grid[$i][0]) {
              $encontro = true;
              $pos = $j;
            }
            $j++;
          }
        }
        if (!$encontro) {

          $sql = "Select * From FCFuePre Where CodFue = '" . $codfuerep . "'";
          if (Herramientas::BuscarDatos($sql, $result)) {
            $gridd[$pos][0] = $pos + 1;
            $gridd[$pos][1] = $grid[$i][0] . "-12-31";
            $gridd[$pos][2] = "IMPUESTO CAUSADO NO DECLARADO, AÑO " . $grid[$i][0];
            $gridd[$pos][3] = $result[0]['nomabr'];
            $gridd[$pos][4] = H::FloatVEtoFloat2($grid[$i][7]);
            $gridd[$pos][5] = $result[0]['codfue'];
          }
          $pos = $pos + 1;
        } else {
          $gridd[$pos][4] = H::FloatVEtoFloat2($grid[$i][7]) + H::FloatVEtoFloat2($grid[$pos][4]);
        }
      }
      $i++;
    }
    if ($gridd) {
      $i = 0;
      $pos = 0;
      while ($i < count($gridd)) {
        if ($gridd[$i][4] != '') {
          $griddeuda[$pos]["id"] = '9';
          $griddeuda[$pos]['num'] = $i + 1;
          $griddeuda[$pos]['fecha'] = $gridd[$i][1];
          $griddeuda[$pos]['descrip'] = $gridd[$i][2];
          $griddeuda[$pos]['tipo'] = $gridd[$i][3];
          $griddeuda[$pos]['mtrcon'] = $gridd[$i][4];
          $griddeuda[$pos]['codfue'] = $gridd[$i][5];
          $pos++;
        }
        $i++;
      }
    }
    // Carga la Multa Ilicita

    $fechaven = H::DiasHabiles($fecrep);
    $sql = "Select * From FCFuePre Where CodFue = '" . $codfuesan . "'";
    if (Herramientas::BuscarDatos($sql, $result)) {
      $griddeuda[$pos]["id"] = '9';
      $griddeuda[$pos]['num'] = $pos + 1;
      $griddeuda[$pos]['fecha'] = $fechaven;
      $griddeuda[$pos]['descrip'] = "MULTA ILICITO MATERIAL ";
      $griddeuda[$pos]['tipo'] = $result[0]['nomabr'];
      //Calculo del Interes de acuerdo s Req Caripe
      if ($indcalint == 'S') {
        $i = 0;
        while ($i < count($grid)) {
          $valor = H::FloatVEtoFloat2($grid[$i][7]) * 1;
          if ($valor != 0) {
            $annio = $grid[$i][0];
            $c = new Criteria();
            $c->add(FcdeclarPeer::NUMREF, $numlic);
            $c->add(FcdeclarPeer::TIPO, 'IAE');
            $reg = FcdeclarPeer :: doSelect($c);
            if ($reg) {
              foreach ($reg as $datos) {
                if (($datos->getFecven() < $fechadia) && ($datos->getEdodec() != 'P')) {
                  $mes = substr($datos->getFecven(), 5, 2);
                  $anniodec = substr($datos->getFecven(), 0, 4);
                  $cr = new Criteria();
                  $cr->add(FctasbanPeer::TASANO, $annio);
                  $cr->add(FctasbanPeer::TASMES, $mes);
                  $res = FctasbanPeer :: doSelectOne($cr);
                  if ($res) {
                    if ($annio == $anniodec) {
                      $monto = $monto + ($res->getTaspor() * H::FloatVEtoFloat2($grid[$i][7]) * 1.2 / 100);
                    }
                  }
                }
              }
            }
          }
          $i++;
        }
      } else {
        $monto = 0;
      }
      $griddeuda[$pos]['mtrcon'] = $monto;
      $griddeuda[$pos]['codfue'] = $result[0]['codfue'];
    }
  }

  public static function CalculoDeclaracionReparo(&$grid, $modo, &$montoreparo, &$montodeclar) {
    $i = 0;

    while ($i < count($grid)) {
      $montoreparo = $montoreparo + H::FloatVEtoFloat2($grid[$i][7]);
      $montodeclar = $montodeclar + H::FloatVEtoFloat2($grid[$i][4]);
      $i++;
    }
  }

  public static function EliminarFacrepfisliq($clasemodelo) {
    $c = new Criteria();
    $c->add(FcdeclarPeer::NUMDEC, substr($clasemodelo->getNumrep(), 6, 10));
    $c->add(FcdeclarPeer::RIFCON, $clasemodelo->getRifcon());
    FcdeclarPeer::doDelete($c);

    $c = new Criteria();
    $c->add(FcdetrepPeer::NUMREP, $clasemodelo->getNumrep());
    FcdetrepPeer::doDelete($c);

    $c = new Criteria();
    $c->add(FcrepliqPeer::NUMREP, $clasemodelo->getNumrep());
    FcrepliqPeer::doDelete($c);

    $c = new Criteria();
    $c->add(FcdeclarPeer::OTRO, $clasemodelo->getNumrep());
    $c->add(FcdeclarPeer::RIFCON, $clasemodelo->getRifcon());
    FcdeclarPeer::doDelete($c);

    $c = new Criteria();
    $c->add(FcrepliqPeer :: NUMREP, $clasemodelo->getNumrep());
    $reg = FcrepliqPeer :: doSelect($c);
    if ($reg) {
      foreach ($reg as $datos) {
        $c = new Criteria();
        $c->add(FcactpicPeer::NUMDOC, $clasemodelo->getNumlic());
        $c->add(FcactpicPeer::CODACT, $datos->getCodact());
        $c->add(FcactpicPeer::ANODEC, $datos->getAno());
        $c->add(FcactpicPeer::MODO, 'A');
        FcactpicPeer::doDelete($c);

        //Eliminar Declaracion
        $c = new Criteria();
        $c->add(FcactpicPeer::NUMDOC, $clasemodelo->getNumlic());
        $c->add(FcactpicPeer::CODACT, $datos->getCodact());
        $c->add(FcactpicPeer::ANODEC, $datos->getAno());
        $c->add(FcactpicPeer::MODO, 'D');
        $reg = FcactpicPeer :: doSelectOne($c);
        if ($reg) {
          $reg->setMonact($datos->getMoning());
          $reg->save();
        }
      }
    }
    $clasemodelo->delete();
    return -1;
  }

  public static function verificarZona($codigo) {
    $c = new Criteria();
    $c->add(FcvalinmPeer ::CODZON, $codigo);
    $per = FcvalinmPeer::doSelect($c);
    if ($per) {
      return(true);
    } else {
      return(false);
    }
  }

  public static function ObtenerMontoAnual($codzona='', $codtipo='', $codigocar='', $anodec='', $mtrcon='', $mtrter='', $codinm='') {
    $monto = 0;
    $montoanual = 0;

    $sql = "Select A.AnoVig,A.DesTip,A.CodTip,Anual, AnualT,AliTip,AliTipT From FCValInm A,(Select Max(CodZon) as CodZon, Max(AnoVig) as AnoVig From FCValInm Where CodZon='" . $codzona . "' And AnoVig<='" . $anodec . "') B Where A.CodZon='" . $codzona . "' And A.CodTip='" . $codtipo . "' And A.Codzon=B.CodZon And A.AnoVig=B.AnoVig";
    if (Herramientas :: BuscarDatos($sql, $result)) {
      if ($codigocar == 'T') {
        $monto = $mtrter * $result[0]['anualt'];
      } else if ($codigocar == 'C') {
        $monto = H::toFloat($mtrcon) * H::toFloat($result[0]['anual']);
      } else {
        $monto = H::toFloat($mtrcon) * H::toFloat($result[0]['anual']) + H::toFloat($mtrter) * H::toFloat($result[0]['anualt']);
      }
      $sql = "select coduso from fcreginm where rtrim(nroinm) = rtrim('" . $codinm . "')";
      if (Herramientas :: BuscarDatos($sql, $res)) {

        $sql = "select * from fcregtarcon where  codusoinm = '" . $res[0]['coduso'] . "' and " . $monto . "  >= escdes and " . $monto . " < eschas";
        if (Herramientas :: BuscarDatos($sql, $quer)) {
          $alicuota = $quer[0]['alicuota'];
          $faccaldeu = (int)H::getConfApp2('faccaldeu', 'hacienda', 'facinmdec');
          if(!$faccaldeu) $faccaldeu = 1000;
          $montoanual = H::toFloat($monto) * ( H::toFloat($alicuota) / $faccaldeu);
        } else {
          $montoanual = 0;
        }
      } else {
        $montoanual = 0;
      }
    }
    return $montoanual;
  }

  public static function DeclaracionValida($numref, $fuente, $fechaini, $fechafin) {

    $sql = "Select * from Fcdeclar where FueIng='" . $fuente . "' and NUMREF='" . $numref . "' AND FecVen>=To_date('" . $fechaini . "','dd/mm/yyyy') and FecVen<=To_date('" . $fechafin . "','dd/mm/yyyy')";
    if (Herramientas :: BuscarDatos($sql, $result)) {
      return(false);
    } else {
      return(true);
    }
  }

  public static function GenerarDeuda($clase, $grid) {
    try {
      $griddeuda = array();
      $FechaDia = date('Y-m-d');
      $annio = (int) $clase->getAnohasta() - (int) $clase->getAnodesde();
      $i = 1;
      $saldo = 0;
      $x = $grid[0];
      $porcion = "";
      $fportion = "";
      $fname = "";
      $diaven = 0;
      $tipoven = "";
      //Fuente
      $fuente = Herramientas::getX_vacio('codemp', 'fcdefins', 'codinm', '001');
      $clase->setfuentef($fuente);
      if (self::CalculoDeclaracion($fuente, $porcion, $fportion, $fname, $diaven, $tipoven)) {
        while ($i <= (int) $annio + 1) {
          $elannio = (int) $clase->getAnodesde() + $i - 1;
          $fechini = '01/01/' . $elannio;
          $fechfin = '31/12/' . $elannio;
          $j = 0;
          while ($j < count($x)) {
            if ($x[$j]->getCheck() == '1') {
              if (self::DeclaracionValida($x[$j]->getNroinm(), $fuente, $fechini, $fechfin)) {
                //Actualización del estatus de la declaración
                $c = new Criteria();
                $c->add(FcreginmPeer::NROINM, $x[$j]->getNroinm());
                $fcreginm = FcreginmPeer::doSelectOne($c);
                if ($fcreginm) {
                  $fcreginm->setEstdec("D");
                  $fcreginm->save();
                }

                self::DistribuirVencimiento('', '', '', $FechaDia, $fechini, $fechfin, $porcion, $fportion, $griddeuda, $diaven, $tipoven, 'facdecinmlot');
                //   self::DistribuirVencimientoLote('','',$FechaDia, $fechini,$fechfin ,$porcion, $fportion,&$griddeuda,$diaven,$tipoven);
                $elMonto = self::ObtenerMontoAnual($x[$j]->getCodzon(), $x[$j]->getCodtip(), $x[$j]->getStacarinm(), $elannio, $x[$j]->getMtrcon(), $x[$j]->getMtrter(), $x[$j]->getNroinm());
                for ($k = 0; $k < count($griddeuda); $k++) {
                  $griddeuda[$k]["mondec"] = H::FormatoMonto(H::toFloat($elMonto) / H::toFloat($porcion));
                }
                //Salvar Declaraciones
                for ($k = 0; $k < count($griddeuda); $k++) {
                  $saldo = 0;

                  $fcdeclar = new Fcdeclar();
                  $numdec = substr($x[$j]->getNroinm(), 8, 7) . "-" . substr($griddeuda[$k]['fecven'], 2, 2);
                  $fcdeclar->setNumdec($numdec);
                  $fcdeclar->setFueing($fuente);
                  $fcdeclar->setFecdec($FechaDia);
                  $fcdeclar->setFecini($fechini);
                  $fcdeclar->setFeccie($fechfin);
                  $fcdeclar->setAnodec($clase->getAnodesde());
                  $fcdeclar->setRifcon($x[$j]->getRifcon());
                  $fcdeclar->setOtro($x[$j]->getCodcatinm());
                  $fcdeclar->setNomcon($x[$j]->getNomcon());
                  $fcdeclar->setTipo($griddeuda[$k]['tipo']);
                  $fcdeclar->setNumref($x[$j]->getNroinm());
                  $fcdeclar->setNombre($griddeuda[$k]['nombre']);
                  $fcdeclar->setNumero($k + 1);
                  $fcdeclar->setMora(0);
                  $fcdeclar->setProntopg(0);
                  $fcdeclar->setFecven($griddeuda[$k]['fecven']);
                  $fcdeclar->setMondec($griddeuda[$k]['mondec']);
                  if ($saldo <= $griddeuda[$k]['mondec']) {
                    $fcdeclar->setAutliq($saldo);
                  } else {
                    $fcdeclar->setAutliq($griddeuda[$k]['mondec']);
                  }
                  self::ActualizarSaldo($clase, $fcdeclar->getAutliq());
                  $saldo = $saldo - $griddeuda[$k]['mondec'];

                  if ($saldo < 0) {
                    $saldo = 0;
                  }
                  if ($griddeuda[$k]['edodecstatus'] == 'VIGENTE') {
                    $fcdeclar->setEdodec('V');
                  } else if ($griddeuda[$k]['edodecstatus'] == 'VENCIDA') {
                    $fcdeclar->setEdodec('E');
                  } else if ($fcdeclar->getMondec() == $fcdeclar->getAutliq()) {
                    $fcdeclar->setEdodec("P");
                  }
                  $fcdeclar->setFundec($clase->getFundec());
                  $fcdeclar->save();
                }
              }
            }
            $j++;
          }
          $i++;
        }
      }

      return-1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function verificarUso($codigo) {
    $c = new Criteria();
    $c->add(FcusovehPeer ::CODUSO, $codigo);
    $per = FcusovehPeer::doSelect($c);
    if ($per) {
      return(true);
    } else {
      return(false);
    }
  }

  public static function GenerarDeudaVeh($clase, $grid) {
    try {
      $annio = 0;
      $griddeuda = array();
      $FechaDia = date('Y-m-d');
      $annio = (int) $clase->getAnohasta() - (int) $clase->getAnodesde();
      $i = 1;
      $saldo = 0;
      $x = $grid[0];
      $indunidadt = H::getConfApp('indunidadt', 'hacienda', 'facvehdec');
      $porcion = "";
      $fportion = "";
      $fname = "";
      $diaven = 0;
      $tipoven = "";
      $ut = 0;
      //Fuente
      $fuente = Herramientas::getX_vacio('codemp', 'fcdefins', 'codveh', '001');
      $clase->setfuente($fuente);
      $c = new Criteria();
      $fcdefins = FcdefinsPeer::doSelectOne($c);
      if ($fcdefins) {
        $ut = $fcdefins->getValunitri();
      }
      $clase->setNumdec('##########');
      if (self::CalculoDeclaracion($fuente, $porcion, $fportion, $fname, $diaven, $tipoven)) {
        while ($i <= (int) $annio + 1) {

          $elannio = (int) $clase->getAnodesde() + $i - 1;
          $fechini = '01/01/' . $elannio;
          $fechfin = '31/12/' . $elannio;
          $j = 0;
          while ($j < count($x)) {
            $numdec = self::generarCorrelativoDecVeh($clase);
            if ($x[$j]->getCheck() == '1') {
              if (self::DeclaracionValida($x[$j]->getPlaveh(), $fuente, $fechini, $fechfin)) {
                //Actualización del estatus de la declaración
                $c = new Criteria();
                $c->add(FcregvehPeer::PLAVEH, $x[$j]->getPlaveh());
                $fcregveh = FcregvehPeer::doSelectOne($c);
                if ($fcregveh) {
                  $fcregveh->setEstdec("D");
                  $fcregveh->save();
                }
                self::DistribuirVencimientoLote($x[$j]->getValori(), $x[$j]->getAnoveh(), $FechaDia, $fechini, $fechfin, $porcion, $fportion, $griddeuda, $diaven, $tipoven);
                if ($indunidadt == 'S') {
                  for ($i = 0; $i < count($griddeuda); $i++) {
                    $griddeuda[$i]["mondec"] = H::FormatoMonto($ut * $x[$j]->getPorali());
                  }
                } else {
                  if (($elannio - $x[$j]->getAnoveh()) >= $x[$j]->getAnolim() && $x[$j]->getAnolim()!='') {
                    $elMonto = H::toFloat($x[$j]->getMonafo());
                  } else {
                    $elMonto = H::toFloat($x[$j]->getValori()) * H::toFloat($x[$j]->getPorali()) / 100;
                  }
                  for ($k = 0; $k < count($griddeuda); $k++) {
                    $griddeuda[$k]["mondec"] = H::FormatoMonto(H::toFloat($elMonto) / H::toFloat($porcion));
                  }
                }

                //Salvar Declaraciones
                for ($k = 0; $k < count($griddeuda); $k++) {
                  $saldo = 0;

                  $fcdeclar = new Fcdeclar();
                  $fcdeclar->setNumdec($numdec);
                  $fcdeclar->setFueing($fuente);
                  $fcdeclar->setFecdec($FechaDia);
                  $fcdeclar->setFecini($fechini);
                  $fcdeclar->setFeccie($fechfin);
                  $fcdeclar->setAnodec($clase->getAnodesde());
                  $fcdeclar->setRifcon($x[$j]->getRifcon());
                  $fcdeclar->setNomcon($x[$j]->getNomcon());
                  $fcdeclar->setTipo($griddeuda[$k]['tipo']);
                  $fcdeclar->setNumref($x[$j]->getPlaveh());
                  $fcdeclar->setNombre($griddeuda[$k]['nombre']);
                  $fcdeclar->setNumero($k + 1);
                  $fcdeclar->setMora(0);
                  $fcdeclar->setProntopg(0);
                  $fcdeclar->setFecven($griddeuda[$k]['fecven']);
                  $fcdeclar->setMondec($griddeuda[$k]['mondec']);
                  if ($saldo <= $griddeuda[$k]['mondec']) {
                    $fcdeclar->setAutliq($saldo);
                  } else {
                    $fcdeclar->setAutliq($griddeuda[$k]['mondec']);
                  }
                  self::ActualizarSaldo($clase, $fcdeclar->getAutliq());
                  $saldo = $saldo - $griddeuda[$k]['mondec'];

                  if ($saldo < 0) {
                    $saldo = 0;
                  }
                  if ($griddeuda[$k]['edodecstatus'] == 'VIGENTE') {
                    $fcdeclar->setEdodec('V');
                  } else if ($griddeuda[$k]['edodecstatus'] == 'VENCIDA') {
                    $fcdeclar->setEdodec('E');
                  } else if ($fcdeclar->getMondec() == $fcdeclar->getAutliq()) {
                    $fcdeclar->setEdodec("P");
                  }
                  $fcdeclar->setFundec($clase->getFundec());
                  $fcdeclar->save();
                }
              }
            }
            $j++;
          }
          $i++;
        }
      }
      return-1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function DistribuirVencimientoLote($valori="", $Anoveh="", $FechaDia="", $FechaInicio="", $FechaFin="", $fportion="", $fportionName="", &$griddeuda= array(), $diaven="", $tipoven="") {
    try {

      $dateFormat = new sfDateFormat('es_VE');
      $fecha2 = "";
      $auxiliar = array();
      $Fechaant = $FechaInicio;
      $ocu = 0;
      //Cálculo del Nro de porciones
      $numpor = self::CalPorcion($fportion, $FechaInicio, $FechaFin);
      switch ($fportion) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 6:
        case 12:
          if ($fportion == '1') {
            $auxiliar[0] = $FechaInicio;
          } else {
            $auxiliar[0] = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('m', (int) 12 / $fportion, $FechaInicio, '+'), '-');
          }

          if ($tipoven == "I") {
            if ($diaven != 0) {
              $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $FechaInicio, '+'), '-');
            } else {
              $fecha2 = $FechaInicio;
            }
          } else {

            $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[0], '+');
          }

          $griddeuda[0]["fecven"] = $fecha2;
          $griddeuda[0]["id"] = 9;
          $griddeuda[0]["numero"] = 1;
          $fecven = $dateFormat->format($fecha2, 'i', $dateFormat->getInputPattern('d'));
          $fecdia = $dateFormat->format($FechaDia, 'i', $dateFormat->getInputPattern('d'));

          if ($fecha2 >= $fecdia) {
            $griddeuda[0]["edodecstatus"] = 'VIGENTE';
          } else {
            $griddeuda[0]["edodecstatus"] = 'VENCIDA';
          }

          $ocu = Herramientas::instr($auxiliar[0], '-', 0, 1);

          if ($ocu > 0) {
            $fechafinal = H::FormatoFecha($auxiliar[0]);
          } else {
            $fechafinal = $auxiliar[0];
          }
          $griddeuda[0]["nombre"] = $fportionName . self::Descripcion($fportion, $FechaInicio) . $fechafinal;

          $griddeuda[0]["tipo"] = strtoupper(substr($fportionName, 2, 3));



          for ($i = 1; $i < (int) $numpor - 1; $i++) {
            $griddeuda[$i]["id"] = 9;
            $griddeuda[$i]["numero"] = $i + 1;
            $FechaInicio = Herramientas::dateAdd('d', 1, $auxiliar[$i - 1], '+');
            $auxiliar[$i] = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('m', (int) 12 / $fportion, $FechaInicio, '+'), '-');

            if ($tipoven == "I") {
              if ($diaven != 0) {
                $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $FechaInicio, '+'), '-');
              } else {
                $fecha2 = $FechaInicio;
              }
            } else {
              $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[$i], '+');
            }
            $griddeuda[$i]["fecven"] = $fecha2;

            $fecven = $dateFormat->format($fecha2, 'i', $dateFormat->getInputPattern('d'));
            $fecdia = $dateFormat->format($FechaDia, 'i', $dateFormat->getInputPattern('d'));
            if ($fecha2 >= $fecdia) {
              $griddeuda[$i]["edodecstatus"] = 'VIGENTE';
            } else {
              $griddeuda[$i]["edodecstatus"] = 'VENCIDA';
            }
            $ocu = Herramientas::instr($auxiliar[$i], '-', 0, 1);

            if ($ocu > 0) {
              $fechafinal = H::FormatoFecha($auxiliar[$i]);
            } else {
              $fechafinal = $auxiliar[$i];
            }
            if ($fportion == '1') {
              $griddeuda[$i]["nombre"] = $fportionName . self::Descripcion($fportion, Herramientas::dateAdd('M', ($i - 1) * 12, $FechaInicio, '+')) . Herramientas::dateAdd('M', ($i - 1) * 12, $auxiliar[$i], '+');
            } else {
              $sql = "Select last_day('" . $auxiliar[$i] . "') as fecha";
              if (Herramientas::BuscarDatos($sql, $result)) {
                $ultimodia = $result[0]['fecha'];
              } else {
                $ultimodia = '';
              }
              $nuevafecha = Herramientas::dateAdd('M', ($i - 1) * 12, $FechaInicio, '+');
              $griddeuda[$i]["nombre"] = $fportionName . self::ConsDesc($fportion, $FechaInicio) . H::FormatoFecha($ultimodia);
            }


            $griddeuda[$i]["tipo"] = strtoupper(substr($fportionName, 2, 3));
          }
          break;
        case 24:
          $DiasMax = 0;
          $fecha = $FechaInicio;
          $griddeuda[0]["id"] = 9;
          $griddeuda[0]["numero"] = 1;


          $auxiliar[0] = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', 15, $FechaInicio, '+'), '-');

          if ($tipoven == "I") {
            if ($diaven != 0) {
              $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $FechaInicio, '+'), '-');
            } else {
              $fecha2 = $FechaInicio;
            }
          } else {
            $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[0], '+');
          }

          $griddeuda[0]["fecven"] = $fecha2;
          $griddeuda[0]["id"] = 9;
          $griddeuda[0]["numero"] = 1;
          $fecdia = $dateFormat->format($FechaDia, 'i', $dateFormat->getInputPattern('d'));

          if ($fecha2 >= $fecdia) {
            $griddeuda[0]["edodecstatus"] = 'VIGENTE';
          } else {
            $griddeuda[0]["edodecstatus"] = 'VENCIDA';
          }
          $ocu = Herramientas::instr($auxiliar[0], '-', 0, 1);

          if ($ocu > 0) {
            $fechafinal = H::FormatoFecha($auxiliar[0]);
          } else {
            $fechafinal = $auxiliar[0];
          }
          $griddeuda[0]["nombre"] = $fportionName . self::Descripcion($fportion, $FechaInicio) . $fechafinal;

          $griddeuda[0]["tipo"] = strtoupper(substr($fportionName, 2, 3));


          for ($i = 1; $i < (int) $numpor - 1; $i++) {
            $griddeuda[$i]["id"] = 9;
            $griddeuda[$i]["numero"] = $i + 1;
            $mes = substr($auxiliar[$i - 1], 5, 2);
            $dia = substr($auxiliar[$i - 1], 8, 2);
            $annio = substr($auxiliar[$i - 1], 0, 4);
            if ($mes == '2' && $dia == '15' && (int) ($annio % 4) == 0) {
              $auxiliar[$i] = Herramientas::dateAdd('d', 14, $auxiliar[$i - 1], '+');
            } else if ($mes == '2' && $dia == '15' && (int) ($annio % 4) != 0) {
              $auxiliar[$i] = Herramientas::dateAdd('d', 13, $auxiliar[$i - 1], '+');
            } else if (($mes == '1' or $mes == '3' or $mes == '5' or $mes == '7' or $mes == '8' or $mes == '10' or $mes == '12') && $dia == '15') {
              $auxiliar[$i] = Herramientas::dateAdd('d', 16, $auxiliar[$i - 1], '+');
            } else {
              $auxiliar[$i] = Herramientas::dateAdd('d', 15, $auxiliar[$i - 1], '+');
            }

            $FechaInicio = Herramientas::dateAdd('d', 1, $auxiliar[$i - 1], '+');

            if ($tipoven == "I") {
              if ($diaven != 0) {
                $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $FechaInicio, '+'), '-');
              } else {
                $fecha2 = $FechaInicio;
              }
            } else {
              $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[$i], '+');
            }
            $griddeuda[$i]["fecven"] = $fecha2;

            $fecdia = $dateFormat->format($FechaDia, 'i', $dateFormat->getInputPattern('d'));
            if ($fecha2 >= $fecdia) {
              $griddeuda[$i]["edodecstatus"] = 'VIGENTE';
            } else {
              $griddeuda[$i]["edodecstatus"] = 'VENCIDA';
            }

            $griddeuda[$i]["tipo"] = strtoupper(substr($fportionName, 2, 3));

            $ocu = Herramientas::instr($auxiliar[$i], '-', 0, 1);

            if ($ocu > 0) {
              $fechafinal = H::FormatoFecha($auxiliar[$i]);
            } else {
              $fechafinal = $auxiliar[$i];
            }

            if ($fportion == '1') {
              $griddeuda[$i]["nombre"] = $fportionName . self::Descripcion($fportion, Herramientas::dateAdd('M', ($i - 1) * 12, $FechaInicio, '+')) . Herramientas::dateAdd('M', ($i - 1) * 12, $auxiliar[$i], '+');
            } else {
              $sql = "Select last_day('" . $auxiliar[$i] . "') as fecha";
              if (Herramientas::BuscarDatos($sql, $result)) {
                $ultimodia = $result[0]['fecha'];
              } else {
                $ultimodia = '';
              }
              $griddeuda[$i]["nombre"] = $fportionName . self::Descripcion($fportion, Herramientas::dateAdd('M', ($i - 1) * 12, $FechaInicio, '+')) . H::FormatoFecha($ultimodia);
            }
          }

          break;

        case 52:
        case 365:

          if ($fportion == 52) {
            $auxiliar[0] = Herramientas::dateAdd('d', 1, (Herramientas::dateAdd('d', 7, $FechaInicio, '+')), '-');
          } else if ($fportion == 365) {
            $auxiliar[0] = Herramientas::dateAdd('d', 1, $FechaInicio, '+');
          }

          if ($tipoven == 'I') {
            if ($diaven != 0) {
              $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $FechaInicio, '+'), '-');
            } else {
              $fecha2 = $FechaInicio;
            }
          } else {
            $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[0], '+');
          }

          $griddeuda[0]["id"] = 1;
          $griddeuda[0]["numero"] = 1;
          $griddeuda[0]["fecven"] = $fecha2;
          $ocu = Herramientas::instr($auxiliar[0], '-', 0, 1);

          if ($ocu > 0) {
            $fechafinal = H::FormatoFecha($auxiliar[0]);
          } else {
            $fechafinal = $auxiliar[0];
          }
          $griddeuda[0]["nombre"] = $fportionName . self::Descripcion($fportion, $FechaInicio) . $fechafinal;

          $griddeuda[0]["tipo"] = strtoupper(substr($fportionName, 2, 3));
          $fecven = $dateFormat->format($fecha2, 'i', $dateFormat->getInputPattern('d'));
          $fecdia = $dateFormat->format($FechaDia, 'i', $dateFormat->getInputPattern('d'));
          if ($fecven >= $fecdia) {
            $griddeuda[0]["edodecstatus"] = 'VIGENTE';
          } else {
            $griddeuda[0]["edodecstatus"] = 'VENCIDA';
          }

          for ($i = 1; $i < (int) $numpor - 1; $i++) {
            $FechaInicio = Herramientas::dateAdd('d', 1, $auxiliar[$i - 1], '+');

            if ($fportion == 52) {
              $auxiliar[$i] = Herramientas::dateAdd('d', 7, $FechaInicio, '+');
            } else if ($fportion == 365) {
              $auxiliar[$i] = Herramientas::dateAdd('d', 1, $FechaInicio, '+');
            }

            if ($tipoven == 'I') {
              if ($diaven != 0) {
                $fecha2 = Herramientas::dateAdd('d', 1, Herramientas::dateAdd('d', $diaven, $FechaInicio, '+'), '-');
              } else {
                $fecha2 = $FechaInicio;
              }
            } else {
              $fecha2 = Herramientas::dateAdd('d', $diaven, $auxiliar[$i], '+');
            }

            $griddeuda[$i]["id"] = 1;
            $griddeuda[$i]["numero"] = $i + 1;
            $griddeuda[$i]["fecven"] = $fecha2;

            $fecdia = $dateFormat->format($FechaDia, 'i', $dateFormat->getInputPattern('d'));
            if ($fecha2 >= $fecdia) {
              $griddeuda[$i]["edodecstatus"] = 'VIGENTE';
            } else {
              $griddeuda[$i]["edodecstatus"] = 'VENCIDA';
            }

            $griddeuda[$i]["tipo"] = strtoupper(substr($fportionName, 2, 3));
            $ocu = Herramientas::instr($auxiliar[$i], '-', 0, 1);

            if ($ocu > 0) {
              $fechafinal = H::FormatoFecha($auxiliar[$i]);
            } else {
              $fechafinal = $auxiliar[$i];
            }

            if ($fportion == '1') {
              $griddeuda[$i]["nombre"] = $fportionName . self::Descripcion($fportion, Herramientas::dateAdd('M', ($i - 1) * 12, $FechaInicio, '+')) . Herramientas::dateAdd('M', ($i - 1) * 12, $auxiliar[$i], '+');
            } else {
              $sql = "Select last_day('" . $auxiliar[$i] . "') as fecha";
              if (Herramientas::BuscarDatos($sql, $result)) {
                $ultimodia = $result[0]['fecha'];
              } else {
                $ultimodia = '';
              }
              $griddeuda[$i]["nombre"] = $fportionName . self::Descripcion($fportion, Herramientas::dateAdd('M', ($i - 1) * 12, $FechaInicio, '+')) . H::FormatoFecha($ultimodia);
            }
          }
          break;
      }
    } catch (Exception $ex) {
      return 0;
    }
  }

  public static function verificarFechaIni($fecha, $id='') {
    $c = new Criteria();
    if ($id != '') {
      $sql = " fecini <= to_date('" . $fecha . "','dd/mm/yyyy') and fecfin >=to_date('" . $fecha . "','dd/mm/yyyy') and id <> '" . $id . "'";
    } else {
      $sql = " fecini <= to_date('" . $fecha . "','dd/mm/yyyy') and fecfin >=to_date('" . $fecha . "','dd/mm/yyyy') ";
    }
    $c->add(FcdefutPeer:: FECINI, $sql, Criteria::CUSTOM);
    $per = FcdefutPeer :: doSelect($c);
    if ($per) {
      return(true);
    } else {
      return(false);
    }
  }

  public static function validarSolvencia($grid, $codtip, $fcsolvencia) {
    $c = new Criteria();
    $c->add(FctipsolPeer::CODTIP, $codtip);
    $fctipsol = FctipsolPeer::doSelectOne($c);
    if ($fctipsol) {
      if ($fctipsol->getPrivdeu() == 'S') {
        $x = isset($grid[0]) ? $grid[0] : array();
        $j = 0;
        while ($j < count($x)) {
          if ($x[$j]->getCodfue()) {
            if (($x[$j]->getEdodecstatus() != 'PAGADA') && ($x[$j]->getFecven() < date("Y-m-d"))) {
              return 758;
            }
          }
          $j++;
        }
      }
    }
    
    if ($fcsolvencia->getTipo()!="") {
            if ($fcsolvencia->getReferencia()=="")
                return 769;
    }
    
    if ($fcsolvencia->getReferencia()!="") {
    $aux= explode("-",$fcsolvencia->getReferencia());
    $referencia=$aux[0];
    $catastro=$aux[1];
    
    $t= new Criteria();
    $t->add(FcdefdetsolPeer::CODSOL,$fcsolvencia->getCodtip());
    $t->add(FcdefdetsolPeer::TIPO,'C');    
    $reg= FcdefdetsolPeer::doSelectOne($t);
    if ($reg)
    {
        if ($fcsolvencia->getRifcon()!="")
        {
            $sql="Select SUM(MONDEC) as MONDEC from FCDeclar where RifCon='".$fcsolvencia->getRifcon()."' and FecVen<'".$fcsolvencia->getFecexp()."' and EdoDec<>'P'";
            if (Herramientas::BuscarDatos($sql, $result)) {
                if ($result[0]["mondec"]>0)
                {
                    return 758;
                }
            }
        }
    }else {
        $v= new Criteria();
        $v->add(FcdefdetsolPeer::CODSOL,$fcsolvencia->getCodtip());
        $regv= FcdefdetsolPeer::doSelect($v);
        if ($regv)
        {
            foreach ($regv as $obj)
            {
                if ($obj->getPropie()=='I')
                {
                  if ($catastro!="")
                  {
                      if ($fcsolvencia->getTipo()=="I") //Inmueble
                      {
                            if ($obj->getCuantos()=='1')
                            {
                               $sql="Select SUM(A.MONDEC) as MONDEC from FCDeclar A,FCRegInm B where B.CodCatInm='".$catastro."' and A.NumRef=B.NroInm and A.FecVen<'".$fcsolvencia->getFecexp()."' and A.EdoDec<>'P'";  
                               if (Herramientas::BuscarDatos($sql, $result)) {
                                    if ($result[0]["mondec"]>0)
                                    {
                                        return 758;
                                    }
                                }
                            }else {
                                $sql="Select SUM(A.MONDEC) as MONDEC from FCDeclar A,FCRegInm B where B.CodCatInm='".$catastro."' and A.RifCon=B.RifCon and A.FecVen<'".$fcsolvencia->getFecexp()."' and A.EdoDec<>'P' and Otro is Not Null";
                                if (Herramientas::BuscarDatos($sql, $result)) {
                                    if ($result[0]["mondec"]>0)
                                    {
                                        return 758;
                                    }
                                }
                            }
                      }else { //Licencia
                            if ($obj->getCuantos()=='1')
                            {
                                $sql="Select SUM(A.MONDEC) as MONDEC from FCDeclar A where A.NumRef='".$referencia."' and A.FecVen<'".$fcsolvencia->getFecexp()."' and A.EdoDec<>'P'";
                                if (Herramientas::BuscarDatos($sql, $result)) {
                                    if ($result[0]["mondec"]>0)
                                    {
                                        return 758;
                                    }
                                }
                            }else {
                                $sql="Select SUM(MONDEC) as MONDEC from FCDeclar where NumRef in (Select A.NumSol From FCSolLic A,FCRegInm B where B.CodCatInm='".$catastro."' and A.RifCon=B.RifCon) and FecVen<'".$fcsolvencia->getFecexp()."' and EdoDec<>'P'";
                                if (Herramientas::BuscarDatos($sql, $result)) {
                                    if ($result[0]["mondec"]>0)
                                    {
                                        return 758;
                                    }
                                }
                            }
                      }
                  }
                }else {
                    if ($referencia!="")
                    {
                        if ($fcsolvencia->getTipo()=="I") //Inmueble
                        {
                            if ($obj->getCuantos()=='1')
                            {
                               $sql="Select SUM(A.MONDEC) as MONDEC from FCDeclar A,FCRegInm B where B.CodCatInm='".$catastro."' and A.NumRef=B.NroInm and A.FecVen<'".$fcsolvencia->getFecexp()."' and A.EdoDec<>'P'";  
                               if (Herramientas::BuscarDatos($sql, $result)) {
                                    if ($result[0]["mondec"]>0)
                                    {
                                        return 758;
                                    }
                                }
                            }else {
                                $sql="Select SUM(MONDEC) as MONDEC from FCDeclar where NumRef in (Select B.NroInm From FCSolLic A,FCRegInm B where A.NumSol='".$referencia."' and A.RifCon=B.RifCon) and FecVen<'".$fcsolvencia->getFecexp()."' and EdoDec<>'P'";
                                if (Herramientas::BuscarDatos($sql, $result)) {
                                    if ($result[0]["mondec"]>0)
                                    {
                                        return 758;
                                    }
                                }
                            }
                        }else {  //Licencia
                            if ($obj->getCuantos()=='1')
                            {
                                $sql="Select SUM(A.MONDEC) as MONDEC from FCDeclar A where A.NumRef='".$referencia."' and A.FecVen<'".$fcsolvencia->getFecexp()."' and A.EdoDec<>'P'";
                                if (Herramientas::BuscarDatos($sql, $result)) {
                                    if ($result[0]["mondec"]>0)
                                    {
                                        return 758;
                                    }
                                }
                            }else {
                                $sql="Select SUM(MONDEC) as MONDEC from FCDeclar A,FCSolLic B where  A.NumSol='".$referencia."' and A.RifCon=B.RifCon and A.FecVen<'".$fcsolvencia->getFecexp()."' and A.EdoDec<>'P'";
                                if (Herramientas::BuscarDatos($sql, $result)) {
                                    if ($result[0]["mondec"]>0)
                                    {
                                        return 758;
                                    }
                                }
                            }
                        }
                    }
                }
            }               
        }
    }
    }
    
    
    return -1;
  }

  public static function cargarActComplementarias($primeravez, $nuevo, $codigo, $anodeclar, $modo, $numdec, $stacion, &$grid) {
    $montoingreso = 0;
    $monacomparar = 0;
    if (!$primeravez) {
      if ($nuevo != '') {
        $sql = "Select * from FCACTPIC where NumDoc='" . $codigo . "' AND ANODEC='" . $anodeclar . "' and Modo='E'";
      } else {
        if ($modo == 'E') {
          $sql = "Select * from FCACTPIC where NumDoc='" . $codigo . "' AND ANODEC='" . $anodeclar . "' and Modo='E'";
        } else {
          $sql = "Select * from FCACTPIC where NumDoc='" . $codigo . "' AND ANODEC='" . $anodeclar . "' and Modo='D'";
        }
      }
    } else {
      $sql = "Select * from FCACTPIC where NumDoc='" . $codigo . "' and coalesce(AnoDec,' ')=' '";
      if (!Herramientas::BuscarDatos($sql, $result)) {
        $sql = "Select * from FCACTPIC where NumDoc='" . $codigo . "' and Modo='M'";
      }
    }
    $i = 0;
    if (Herramientas::BuscarDatos($sql, $result)) {
      while ($i < count($result)) {
        $sql = "Select * from FCAjuste where NumDec='" . $numdec . "'";
        if (Herramientas::BuscarDatos($sql, $rs)) {
          if ($result[$i]['monant'] != 0) {
            $montoingreso = $result[$i]['monant'];
          } else {
            $montoingreso = $result[$i]['monact'];
          }
        } else {
          $montoingreso = $result[$i]['monact'];
        }
        $grid[$i]['codact'] = $result[$i]['codact'];
        $grid[$i]["desact"] = H::getX_vacio('CODACT', 'Fcactcom', 'Desact', $result[$i]["codact"]);
        $grid[$i]["monbru"] = "0,00";
        $encontroactividad = -1;
        $cactividad = 0;
        $sql = "Select a.CodAct as codact,a.DesAct as descripcion,a.MinTri*b.valunitri as mt,a.AfoAct as alicuota,case2(a.MinoFac,varchar 'F',varchar 'Factor',varchar 'Minimo') as minfac, case2(a.Exoner,varchar 'S',varchar 'SI',varchar 'NO') as Exonerable  from FCACTCOM a,FCDEFINS b Where  " .
                "A.CodAct='" . $result[$i]['codact'] . "' and A.AnoAct='" . $anodeclar . "' ";
        if (Herramientas::BuscarDatos($sql, $r)) {
          $j = 0;
          while ($j < count($r) && $encontroactividad == -1) {
            if ($grid[$i]['codact'] == $r[$j]['codact']) {
              $encontroactividad = $cactividad;
            } else {
              $cactividad = $cactividad + 1;
            }
            $j++;
          }
          if ($encontroactividad >= 0) {
            if ($r[0]['codact'] != '') {
              $grid[$i]['desact'] = $r[0]['descripcion'];
              $grid[$i]['monbru'] = $r[0]['mt'];
            }
          }
          if ($encontroactividad >= 0) {
            $grid[$i]["desact"] = $r[0]["descripcion"];
            $unidad = H::getX_vacio('CODEMP', 'Fcdefins', 'unipic', '001');
            if ($unidad == 'B') {
              $monacomparar = $r[0]['mt'];
            } else {
              $monacomparar = $r[0]['mt'];
            }
            if ($modo == 'D') {
              $pordec = 1;
            } else {
              $pordec = 1;
            }

            if ($stacion == 'S')
              $factser = 1;
            else
              $factser=1;

            if ($r[0]["minfac"] == 'Factor') {
              $calculo = $montoingreso * $pordec * $factser * $r[0]["alicuota"];
              $grid[$i]["monbru"] = number_format($calculo, 2, ',', '.');
              $calculo2 = (($montoingreso - $result[$i]["porexo"]) * $pordec * $factser * $r[0]["alicuota"]);
              $totexe = number_format($calculo2, 2, ',', '.');
            } else {
              $calculo = $montoingreso * $r[0]["alicuota"] / 100;
              $grid[$i]["monbru"] = number_format($calculo, 2, ',', '.');
              $calculo2 = $montoingreso * $pordec * $factser * $r[0]["alicuota"] / 100;
              $grid[$i]["monbru"] = number_format($calculo2, 2, ',', '.');
            }
            if (H::toFloat($grid[$i]["monbru"]) <= $monacomparar)
              $grid[$i]["monbru"] = number_format($monacomparar, 2, ',', '.');
          }

          if ($montoingreso == 0) {
            $grid[$i]["monact"] = "0,00";
          }
        }
        $grid[$i]["monact"] = number_format($montoingreso, 2, ',', '.');
        $grid[$i]["monexo"] = number_format($result[$i]["porexo"], 2, ',', '.');
        $grid[$i]["monreb"] = number_format($result[$i]["monreb"], 2, ',', '.');
        $calculo3 = H::toFloat($grid[$i]["monbru"]) - H::toFloat($grid[$i]["monexo"]) - H::toFloat($grid[$i]["monreb"]);
        $grid[$i]["imppag"] = number_format($calculo3, 2, ',', '.');
        $grid[$i]["tipoc"] = 'I';
        $grid[$i]["id"] = "9";
        $i++;
      }
    }
  }

  public static function calculoDecActComp($primeravez, $numerodec, $params, $fec3, &$grida, $modo, &$grid, &$montcom) {
    $pagant = 0;
    $porali = 0;
    $diferencia = 0;
    if ($primeravez) {
      $params[11] = date('Y-m') . '-01';
      $sql = "select coalesce(sum(a.monpag),0) as monpag from fcdecpag a, fcdefins b, fcpagos d
                where a.numdec='" . $numerodec . "' and a.numpag=d.numpag and d.edopag<>'A' and
                (a.fueing=b.codpic or a.fueing=b.codajupic)";
      if (Herramientas::BuscarDatos($sql, $result)) {
        $pagant = $result[0]["monpag"];
      } else {
        $pagant = 0;
      }
    }
    $anocalculo = 0;
    $decsinaju = 0;
    $fechadia = date('Y-m-d');
    $fechault = false;
    $feccha1 = date('d/m/Y', strtotime($params[11]));
    $feccha2 = date('d/m/Y', strtotime($params[12]));
    $numpor = self::CalPorcion($params[8], $feccha1, $feccha2);
    if ($numpor == 1) {
      $filas = $numpor + 1;
    } else {
      $filas = $numpor;
    }
    if (date('d', strtotime($params[11])) == 1) {
      $fechault = true;
    }
    self::distribucionVencimientoActComerciales(($filas - 1), $fec3, $params[8], $params, $grid);
    // aqui vamos a obtener el monto de las actividades complementarias
    $montcom = self::ObtenerMontoComplementario($grida);
    $j = 1;
    $acumtotal = 0;
    while ($j <= count($grid)) {
      $porali = $montcom;
      $porali = $porali / ($filas - 1);
      $grid[$j]['mondec'] = $porali;
      //   $grid[$j]['numero']=str_pad($j,2,'0',STR_PAD_LEFT);
      $acumtotal = $acumtotal + $grid[$j]['mondec'];
      $j++;
    }
    //Ajustar Totales
    if ($modo == 'E' && $acumtotal > 0) {
      if ($acumtotal != $montcom) {
        $diferencia = $acumtotal - $montcom;
        $grid[0]['mondec'] = H::toFloat($grid[$j]['mondec']) + $diferencia;
      }
    }
  }

  public static function ObtenerMontoComplementario($grida) {
    $i = 0;
    $monto = 0;
    while ($i < count($grida)) {
      if ($grida[$i][7] == 'C') {
        $monto = $monto + H::toFloat($grida[$i][6]);
      }
      $i++;
    }
    return($monto);
  }

  public static function calcularAjusteActCompl($fecini, $feccie, $params, &$grida, &$grid, $anodec) {
    $dateFormat = new sfDateFormat('es_VE');
    $fec1 = $dateFormat->format($fecini, 'i', $dateFormat->getInputPattern('d'));
    $dateFormat = new sfDateFormat('es_VE');
    $fec2 = $dateFormat->format($feccie, 'i', $dateFormat->getInputPattern('d'));

    $fuenteaju = $params[1];
    if ($fuenteaju != '') {
      $fecha_aux = split("/", $fecini);
      $fecha_aux2 = split("/", $feccie);
      $feciniaux = $fec1;
      $feccieaux = $fec2;
      //CALCULAMOS EL TOTAL DE INGRESOS BRUTOS DE LA DECLARACION
      $declaraciontotal = 0;
      $impuestototal = 0;
      $montoajuste = 0;
      $i = 0;
      while ($i < count($grida)) {
        $declaraciontotal = H::toFloat($grida[$i][2]);
        $c = new Criteria();
        $c->add(FcactpicPeer::CODACT, $grida[$i][0]);
        $c->add(FcactpicPeer::ANODEC, $anodec);
        $c->add(FcactpicPeer::NUMDOC, $numref);
        $c->add(FcactpicPeer::MODO, 'E');
        $result = FcactpicPeer::doSelectOne($c);
        if ($result) {
          if (($declaraciontotal - $result->getMonact()) != 0) {
            $calculo1 = $declaraciontotal * $result->getMonexo() / $result->getMonact();
            $arreglo[$i][4] = number_format($calculo1, 2, ',', '.');
            $calculo2 = $declaraciontotal * $result->getMonreb() / $result->getMonact();
            $arreglo[$i][5] = number_format($calculo2, 2, ',', '.');

            $decante = Hacienda::calcularDeclaracionAnterior(H::toFloat($result->getMonact()), $grida[$i][0], $numref, $anodec);
            $impuestototal = $decante - $result->getMonexo() - $result->getMonreb();
            $montoajuste = $montoajuste + ((H::toFloat($grida[$i][3]) - H::toFloat($grida[$i][4]) - H::toFloat($grida[$i][5])) - $impuestototal);
          }
        }
        $i++;
      }

      if ($params[4] == 'I') {
        $grid[0]['fecven'] = date('d/m/Y', strtotime(Herramientas::dateAdd('d', $this->params[5], $feciniaux, '+')));
      } else {
        $grid[0]['fecven'] = date('d/m/Y', strtotime(Herramientas::dateAdd('d', $this->params[5], $feccieaux, '+')));
      }
      $grid[0]['nombre'] = "Ajuste a Declaración del Año " . $anodec;
      $grid[0]['tipo'] = "AJU";
      $grid[0]['mondec'] = number_format($montoajuste, 2, ',', '.');
      //if ($montoajuste != 0) {
        $grid[0]["edodecstatus"] = "VENCIDA";
      /*} else {
        $grid[0]["edodecstatus"] = "PAGADA";
      }*/
      $grid[0]["fueing"] = $fuenteaju;
      $grid[0]["numero"] = "01";
    }
  }

  public static function recalcularActComp($primeravez, $nuevo, $anodec, &$grida, $stacion) {
    $j = 0;
    while ($j < count($grida)) {
      if ($primeravez == 'N') {
        if ($nuevo == '') {
          $anodeclar = (integer) $anodec - 1; //NO ME SIRVE ASI
        } else {
          $anodeclar = (integer) $anodec;
        }
      } else {
        $anodeclar = date('Y');
      }

      $sql3 = "select a.codact as codact, a.desact as desact, (a.mintri*b.valunitri) as mintri, a.afoact as alicuota, (CASE when a.minofac='F' then 'Factor'
                    else 'Minimo' end) as minfac, (CASE when a.exoner='S' then 'SI' else 'NO' end) as exonerable
                    from fcactcom a, fcdefins b where
                    a.codact='" . $grida[$j][0] . "' and a.anoact='" . $anodeclar . "'";
      if (Herramientas::BuscarDatos($sql3, $result3)) {
        $unidad = H::getX_vacio('CODEMP', 'Fcdefins', 'unipic', '001');
        if ($unidad == 'B') {
          $monacomparar = $result3[0]["mintri"];
        } else {
          $monacomparar = $result3[0]["mintri"];
        }
        $pordec = 1;
        if ($stacion == 'S')
          $factser = 1;
        else
          $factser=1;
        if ($result3[0]["minfac"] == 'Factor') {
          $calculo = H::toFloat($grida[$j][2]) * $pordec * $factser * $result3[0]["alicuota"];
          $grida[$j][3] = number_format($calculo, 2, ',', '.');
        } else {
          $calculo = H::toFloat($grida[$j][2]) * $pordec * $factser * $result3[0]["alicuota"] / 100;
          $grida[$j][3] = number_format($calculo, 2, ',', '.');
        }
        if ($result3[0]["minfac"] == 'Factor') {
          $calculo = H::toFloat($grida[$j][2]) * $pordec * $result3[0]["alicuota"] / 100;
          $grida[$j][3] = number_format($calculo, 2, ',', '.');
        } else {
          $calculo = H::toFloat($grida[$j][2]) * $result3[0]["alicuota"] / 100;
          $grida[$j][3] = number_format($calculo, 2, ',', '.');
        }
        if (H::toFloat($grida[$j][3]) <= $monacomparar)
          $grida[$j][3] = number_format($monacomparar, 2, ',', '.');
        if ($result3[0]["exonerable"] == 'SI')
          $grida[$j][6] = "0,00";
        else {
          $grida[$j][4] = $grida[$j][4];
          $grida[$j][5] = $grida[$j][5];
          $valor = H::toFloat($grida[$j][3]) - H::toFloat($grida[$j][4]) - H::toFloat($grida[$j][5]);
          $grida[$j][6] = number_format($valor, 2, ',', '.');
        }
      }

      $j++;
    }
  }

  public static function salvarFacpicliqComp($clasemodelo, $gridActCom, $gridDisDeu) {
    if ($clasemodelo->getId() == "") {
      $numero = $clasemodelo->getNumref();
      if ($clasemodelo->getNumdec()!='' || $clasemodelo->getNumdec()!='000000000')
       $numdec = 'C' . substr($numero, 6, 4) . "-" . substr($clasemodelo->getAnodec(), 2, 2)."-".substr($clasemodelo->getNumdec(), 0, 1);
     else
       $numdec = 'C' . substr($numero, 6, 6) . "-" . substr($clasemodelo->getAnodec(), 2, 2);
    }else $numdec=$clasemodelo->getNumref();
    // aqu=zi no se puede borrar nada solo crear o modificar los montos si ya existen
    //buscar que exista esa declaracion

    $t = new Criteria();
    $t->add(Fcdeclarpeer::NUMDEC, $numdec);
    $fcdeclar = FcdeclarPeer::doSelect($t);
    if (count($fcdeclar) > 0) {
      return 765;
    }
    //Actividades Complementarias
    $z = $gridActCom[0];
    $j = 0;
    while ($j < count($z)) {
      if ($z[$j]->getCodact() != "") {
        if ($z[$j]->getTipoc() == 'C') {
          $registros = new Fcactpic();
          $registros->setNumdoc($clasemodelo->getNumref());
          $registros->setCodact($z[$j]->getCodact());
          $registros->setMonact($z[$j]->getMonact());
          $registros->setExoner('N');
          $registros->setPorexo(0);
          $registros->setAnodec($clasemodelo->getAnodec());
          $registros->setModo('E');
          $registros->setNumdoc($clasemodelo->getNumref());
          $registros->setMonreb($z[$j]->getMonreb());
          $registros->setMonexo($z[$j]->getMonexo());
          $registros->save();
        }
      }
      $j++;
    }
    //Deuda
    $x = $gridDisDeu[0];
    $i = 0;
    while ($i < count($x)) {
      if ($x[$i]->getNumero() != "") {
        if ($clasemodelo->getId() == "") {
          $x[$i]->setNumdec($numdec);
        }
        $r = new Criteria();
        $r->add(FcfueprePeer::CODFUE, $x[$i]->getFueing());
        $registro = FcfueprePeer::doSelectOne($r);
        if ($registro) {
          $x[$i]->setTipo($registro->getNomabr());
          $x[$i]->setNumref($clasemodelo->getNumref());
        }
        $x[$i]->setFecdec($clasemodelo->getFecdec());
        $x[$i]->setRifcon($clasemodelo->getRifcon());
        $x[$i]->setMora(0);

        $lafuente = Herramientas::getX_vacio('codemp', 'fcdefins', 'codpic', '001');
        $salabono = 0;
        $sql = "Select sum(SalPag) as monto from FCAbonos where fueing='" . $lafuente . "' and NumRef ='" . $clasemodelo->getNumref() . "' and rifcon='" . $clasemodelo->getRifcon() . "' AND STAPAG='N'";
        if (Herramientas::BuscarDatos($sql, $result)) {
          $salabono = $result[0]["monto"];
        }
        if ($salabono <= $x[$i]->getMondec() || $x[$i]->getMondec() < 0)
          $x[$i]->setAutliq($salabono);
        else
          $x[$i]->setAutliq($x[$i]->getMondec());

        self:: actualizarSaldoLic($lafuente, $clasemodelo->getNumref(), $clasemodelo->getRifcon(), H::toFloat($x[$i]->getAutliq()));

        $salabono = $salabono - H::toFloat($x[$i]->getMondec());
        if ($salabono < 0)
          $salabono = 0;
        $x[$i]->setProntopg(0);
        if ($x[$i]->getEdodecstatus() == 'VIGENTE')
          $x[$i]->setEdodec('V');
        else if ($x[$i]->getEdodecstatus() == 'VENCIDA')
          $x[$i]->setEdodec('E');
        else if ($x[$i]->getEdodecstatus() == 'PAGADA')
          $x[$i]->setEdodec('P');

        $x[$i]->setModo('E');
        $x[$i]->setMonabo($x[$i]->getAutliq());
        $x[$i]->setNomcon($clasemodelo->getNomcon());
        $x[$i]->setFundec(sfContext::getInstance()->getUser()->getAttribute('usuario'));
        $x[$i]->setAnodec($clasemodelo->getAnodec());
        $x[$i]->setFecini($clasemodelo->getFecini());
        $x[$i]->setFeccie($clasemodelo->getFeccie());
        $x[$i]->save();
      }
      $i++;
    }
    return(-1);
  }

  public static function DistribuirConvenio($numcuo, &$arreglo, $fec1, $monini, $moncuo) {
    $annio = substr($fec1, 6, 4);
    $mes = substr($fec1, 3, 2);
    $dia = substr($fec1, 0, 2);
    $nueva = $annio . '-' . $mes . '-' . $dia;
    $arreglo[0]['fecven'] = $nueva;
    $arreglo[0]['numcuo'] = 'Inicial';
    $arreglo[0]['obscuo'] = '';
    $arreglo[0]['moncuo'] = $monini;

    for ($i = 1; $i <= (int) $numcuo; $i++) {
      $arreglo[$i]['fecven'] = Herramientas::dateAdd('m', 1, $arreglo[$i - 1]['fecven'], '+');
      $arreglo[$i]['numcuo'] = "Cuota Nro " . $i;
      $arreglo[$i]['obscuo'] = '';
      $arreglo[$i]['moncuo'] = $moncuo;
    }
  }

  public static function EstaGridConv($grid, $codigo, &$donde) {

    $j = 0;
    if (count($grid) > 0) {
      while ($j < count($grid)) {

        if ($codigo == $grid[$j][0]) {
          $donde = $j;
          return false;
        }
        $j++;
      }
    }
    return true;
  }

  public static function AcumularFuentesCon($grid, &$arreglofuente) {
    $j = 0;
    $donde = '';
    while ($j < count($grid)) {
      if (count($grid[$j]) == 15) {
        self::EstaGridConv($arreglofuente, $grid[$j][15], $donde);
        if ($donde != '') {
          $arreglofuente[$donde][1] = $grid[$donde][1] + $grid[$j][8];
        } else {
          $x=count($arreglofuente);
          $arreglofuente[$x][0] = $grid[$j][15];
          $arreglofuente[$x][1] = $grid[$j][8];
          $arreglofuente[$x][2] = "0";
        }
      }
      $j++;
    }
  }

  public static function DistribuirRubrosCon($grid, $arreglofuente, &$gridrubros, $totalcon) {
    $acumulador = 0;
    $monto = 0;
    $diferencia = 0;
    $porcion = 0;
    if ($totalcon != 0) {
      $i = 0;
      while ($i < count($grid)) {
        $j = 0;
        $acumulador = 0;
        while ($j < count($arreglofuente)) {
          $porcion = $arreglofuente[$j][1] / $totalcon;
          $monto = H::toFloat($grid[$i][3]) * $porcion;
          $gridrubros[$i]['fecven'] = $grid[$i][0];

          $sql = "Select NomFue From FcFuePre where CodFue='" . $arreglofuente[$j][0] . "'";
          if (Herramientas::BuscarDatos($sql, $result)) {
            $gridrubros[$i]['nomfue'] = $result[0]["nomfue"];
          }
          $gridrubros[$i]['descripcion'] = $grid[$i][1];
          $gridrubros[$i]['obscuo'] = $grid[$i][2];
          $gridrubros[$i]['fuente'] = $arreglofuente[$j][0];
          $gridrubros[$i]['numcuo'] = str_pad($i, 2, '0', STR_PAD_LEFT);
          $acumulador = $acumulador + $monto;
          $gridrubros[$i]['moncuo'] = (float)$acumulador;
          $arreglofuente[$j][2] = $arreglofuente[$j][2] + $monto;
          $j++;
        }
        $diferencia = $acumulador - H::toFloat($grid[$i][3]);
        if (count($gridrubros) > 0) {
          $gridrubros[$i]['moncuo'] = (float)$gridrubros[$i]['moncuo'] - $diferencia;
        }

        $i++;
      }
    }
  }

  public static function GenCorrelFacconvenio(&$clasemodelo) {
    $sql = "Select substr(RefCon, 4, 4) as correl from FcConPag where id in (Select Max(id) from FcConPag)";
    if (Herramientas :: BuscarDatos($sql, $result)) {
      $valor = (int) $result[0]['correl'] + 1;
      $numero = "DHM" . str_pad($valor, 4, '0', STR_PAD_LEFT) . "-" . substr(Date('Y'), 2, 2);
    } else {
      $numero = "DHM" . "0001" . "-" . substr(Date('Y'), 2, 2);
    }
    $clasemodelo->setRefcon($numero);
  }

  public static function SalvarFacconvenio($clasemodelo, $gridconvenio, $gridrubro, $grid) {

    $id = $clasemodelo->getId();
    if (!$id) {
      self::GenCorrelFacconvenio($clasemodelo);
    }
    //grabar datos del convenio
    $clasemodelo->setEstcon('N'); //No saldado
    $clasemodelo->save();
    //Convenio
    $x = $gridconvenio[0];
    $i = 0;
    while ($i < count($x)) {
      if (!$id) {
        $x[$i]->setRefcon($clasemodelo->getRefcon());
        $x[$i]->setNumdec($clasemodelo->getRefcon());
      }
      $x[$i]->setNumcuo(str_pad(($i+1), 2, '0', STR_PAD_LEFT));
      $x[$i]->setMonpag(0);
      $x[$i]->save();
      $i++;
    }
    //Rubro
    $y = $gridrubro[0];
    $i = 0;
    while ($i < count($y)) {
      if (!$id) {
        $y[$i]->setRefcon($clasemodelo->getRefcon());
        $y[$i]->setNumdec($clasemodelo->getRefcon());
      }
      $y[$i]->setNumcuo(str_pad(($i+1), 2, '0', STR_PAD_LEFT));
      $y[$i]->setMonpag(0);
      $y[$i]->save();
      $i++;
    }
    // actualizar deudas antiguas
    $z = $grid[0];
    $i = 0;
    if (!$id) {
      while ($i < count($z)) {
        if ($z[$i]->getCheck()=='1') {
        $fcdeucon = new Fcdeucon();
        $fcdeucon->setNumdec($z[$i]->getNumdec());
        $fcdeucon->setRefcon($clasemodelo->getRefcon());
        $fcdeucon->setNumero($z[$i]->getNumero());
        $fcdeucon->setFecven($z[$i]->getFecven());
        $fcdeucon->setFueing($z[$i]->getFueing());
        $fcdeucon->save();
        $c = new Criteria();
        $c->add(FcdeclarPeer::NUMDEC, $z[$i]->getNumdec());
        $c->add(FcdeclarPeer::NUMREF, $z[$i]->getNumref());
        $c->add(FcdeclarPeer::FECVEN, $z[$i]->getFecven());
        $c->add(FcdeclarPeer::NUMERO, $z[$i]->getNumero());
        $c->add(FcdeclarPeer::FUEING, $z[$i]->getFueing());
        $fcdeclar = FcdeclarPeer::doSelectOne($c);

        if ($fcdeclar) {
          $fcdeclar->setEdodec('P');
          $fcdeclar->setAutLiq($fcdeclar->getMondec());
          $fcdeclar->setConpag('S');
          $fcdeclar->save();
        }
      }
        $i++;
      }
    }

    // generar deudas nuevas
    $z = $gridrubro[0];
    $i = 0;
    if (!$id) {
      while ($i < count($z)) {

        $fcdeclar = new Fcdeclar();
        $fcdeclar->setNumdec($clasemodelo->getRefcon());
        $fcdeclar->setNumero(str_pad($i, 2, '0', STR_PAD_LEFT));
        $fcdeclar->setFecven($z[$i]->getFecven());
        $fcdeclar->setFueing($z[$i]->getFuente());
        $fcdeclar->setRifcon($clasemodelo->getRifcon());
        $fcdeclar->setTipo('CVP');
        $fcdeclar->setNombre($z[$i]->getDescripcion() . " Porción Corresp. a " . $z[$i]->getNomfue());
        $fcdeclar->setNumref($clasemodelo->getRefcon());
        $fcdeclar->setMondec($z[$i]->getMoncuo());
        $fcdeclar->setMora(0);
        $fcdeclar->setAutliq(0);
        $fcdeclar->setProntopg(0);
        $fcdeclar->setEdodec('V');
        $fcdeclar->setConpag('S');
        $fcdeclar->setFundec($clasemodelo->getFunrec());
        $fcdeclar->save();
        $i++;
      }
    }


    return -1;
  }

  public static function EliminarFacconvenio($clasemodelo) {
    try {
      $c = new Criteria();
      $sql = "NumDec in (Select NumDec from FCDetConFue Where Refcon='" . $clasemodelo->getRefcon() . "')";
      $c->add(FcdecpagPeer::NUMDEC, $sql, Criteria::CUSTOM);
      FcdecpagPeer::doDelete($c);

      $c = new Criteria();
      $c->add(FcdetconPeer::REFCON, $clasemodelo->getRefcon());
      FcdetconPeer::doDelete($c);

      $c = new Criteria();
      $c->add(FcdetconfuePeer::REFCON, $clasemodelo->getRefcon());
      FcdetconfuePeer::doDelete($c);

      $c = new Criteria();
      $c->addJoin(FcdeclarPeer::NUMDEC, FcdeuconPeer::NUMDEC);
      $c->addJoin(FcdeclarPeer::NUMERO, FcdeuconPeer::NUMERO);
      $c->add(FcdeuconPeer::REFCON, $clasemodelo->getRefcon());
      $fcdeclar = FcdeclarPeer::doSelect($c);
      if ($fcdeclar) {
        foreach ($fcdeclar as $objfcdeclar) {
          $objfcdeclar->setEdodec('E');
          $objfcdeclar->setConpag('N');
          $objfcdeclar->setAutliq(0);
          $objfcdeclar->save();
        }        
      }

      $c = new Criteria();
      $c->add(FcdeuconPeer::REFCON, $clasemodelo->getRefcon());
      FcdeuconPeer::doDelete($c);

      $c = new Criteria();
      $c->add(FcdeclarPeer::NUMDEC, $clasemodelo->getRefcon());
      $c->add(FcdeclarPeer::RIFCON, $clasemodelo->getRifcon());
      $c->add(FcdeclarPeer::NUMREF, $clasemodelo->getRefcon());
      FcdeclarPeer::doDelete($c);

      $clasemodelo->delete();

      return -1;
    } catch (Exception $ex) {
      echo $ex;
      exit();
      return 0;
    }
  }

  public static function verificarConvenio($refcon) {
    $cr = new Criteria();
    $sql = " NumDec in (Select NumDec from FCDetConFue Where Refcon='" . $refcon . "')";
    $cr->add(FcdecpagPeer::NUMDEC, $sql, Criteria::CUSTOM);
    $fcdecpag = FcdecpagPeer::doSelectOne($cr);
    if ($fcdecpag) {
      return(true);
    } else {
      return(false);
    }
  }

  public static function ajustesfinales(&$gridrubros, $arreglofuente, $gridconvenio) {

    $j = 0;
    $acumulador = 0;
    if (count($arreglofuente) > 0) {
      while ($j < count($arreglofuente)) {
        $y = 0;
        $acumulador = 0;
        while ($y < count($gridrubros)) {
          if ($gridrubros[$y]['fuente'] == $arreglofuente[$j][0]) {
            $acumulador = $acumulador + $gridrubros[$y]['moncuo'];
          }
          $y++;
        }

        $arreglofuente[$j][2] = $acumulador;
        $j++;
      }
      $j = 0;
      while ($j < count($arreglofuente)) {
        $y = 0;
        $acumulador = 0;
        $diferencia = $arreglofuente[$j][1] - $arreglofuente[$j][2];
        if ($diferencia != 0) {
          while ($y < count($gridrubros)) {
            if ($gridrubros[$y]['descripcion'] == $gridconvenio[$y][1] && $gridrubros[$y]['fuente'] == $arreglofuente[$j][0]) {
              $gridrubros[$y]['moncuo'] = $gridrubros[$y]['moncuo'] - $diferencia;
            }
            $y++;
          }
        }

        $arreglofuente[$j][2] = $acumulador;
        $j++;
      }
    }
  }

   public static function Repetido2($grid,$codigo,$fila,$col1,$col2)
   {
     $repetido=false;
     $i=0;
     while ($i<count($grid))
     {
         $codigo2=$grid[$i][$col1].'-'.$grid[$i][$col2];
         if ($i!=$fila)
         {
             if ($codigo==$codigo2)
             {
                 $repetido=true;
                 break;
}
         }
         $i++;
     }

     return $repetido;
   }
   
   public static function actualizarDatos($clasemodelo,$grid)
   {
        $x = $grid[0];
        $j = 0;
        while ($j < count($x)) {
            if ($x[$j]->getEdodecstatus() == 'PAGADA') {
                $x[$j]->setEdodec('P');
                $x[$j]->setAutliq($x[$j]->getMondec());
            }else if ($x[$j]->getEdodecstatus() == 'VENCIDA') {
                $x[$j]->setEdodec('E');
                $x[$j]->setAutliq(0);
            }else {
                $x[$j]->setEdodec('V');
                $x[$j]->setAutliq(0);
            }

            $x[$j]->save();
            
            $j++;
        }
   }
   
   public static function GenerarCredito($clasemodelo, $grid)
   {
      $x = $grid[0];
      $j = 0;
      $acum=0;
      $acum2=0;
      while ($j < count($x)) {
        if ($x[$j]->getCheck()) {
            $fueing=$x[$j]->getFueing();
            if ($x[$j]->getSumfue()=='S')
               $acum=$acum + $x[$j]->getMondec();
            else
                $acum2=$acum2 + $x[$j]->getMondec();                
        }
        $j++;
      }
      if (($acum2-$acum)<0)
      {
        $reg = new Fcdeclar();
        $reg->setNumdec('CR' . substr($clasemodelo->getNumpag(), 2, 8));
        $reg->setFecven(H::getX_vacio('CODFUE','Fcfuepre','Fineje',$fueing));
        $reg->setFueing($fueing);
        $reg->setFecdec($clasemodelo->getFecpag());
        $reg->setRifcon($clasemodelo->getRifcon());
        $reg->setNumero('1');
        $reg->setNombre('1 Anualidad VENCIMIENTO'.(string)$clasemodelo->getFecven());
        $reg->getTipo("AJU");
        $reg->setNumref(null);
        $reg->setEdodec('V');
        $reg->setMora(0);
        $reg->setProntopg(0);
        $reg->setFundec($clasemodelo->getFunpag());
        $reg->setNomcon($clasemodelo->getNomcon());
        $reg->setAnodec(substr($clasemodelo->getFecpag(),0,4));
        $reg->setMondec($acum-$acum2);
        $reg->setOtro(null);
        $reg->save();
      }
      
      return -1;    
  }   

  public static function trajo($numdec)
  {
    $t= new Criteria();
    $t->add(FcdeclarPeer::NUMDEC,$numdec);
    $t->add(FcdeclarPeer::EDODEC,'P');
    $reg= FcdeclarPeer::doSelectOne($t);
    if ($reg)
      $trajo='P';
    else
      $trajo='';

    return $trajo;
  }

   public static function Repetido3($grid,$codigo,$fila,$col1,$col2,$col3,$col4,$col5)
   {
     $repetido=false;
     $i=0;
     while ($i<count($grid))
     {
         $codigo2=$grid[$i][$col1].'-'.$grid[$i][$col2].'-'.$grid[$i][$col3].'-'.$grid[$i][$col4].'-'.$grid[$i][$col5];
         if ($i!=$fila)
         {
             if ($codigo==$codigo2)
             {
                 $repetido=true;
                 break;
}
         }
         $i++;
     }

     return $repetido;
   }  
}

