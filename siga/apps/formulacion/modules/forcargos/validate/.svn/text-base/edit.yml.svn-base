methods:
  post:
   - "forcargos{codcar}"
   - "forcargos{nomcar}"
   - "forcargos{codtip}"
   - "forcargos{graocp}"
   - "forcargos{suecar}"

names:
  forcargos{codcar}:
    required:  Yes
    required_msg: El c贸digo del Cargo no puede estar en Blanco
    validators: Validator_codcar

  forcargos{nomcar}:
    required:  Yes
    required_msg: El Nombre del Cargo no puede estar en Blanco
    validators: Validator_MyString

  forcargos{codtip}:
    required:  Yes
    required_msg: El c贸digo del Tipo de Cargo no puede estar en Blanco
    validators: CodTipValidator

  forcargos{graocp}:
    required:  No
    required_msg: El codigo del Grado no puede estar en Blanco
    validators: CodGraValidator

  forcargos{suecar}:
    required:  Yes
    required_msg: El Sueldo del Cargo no puede estar en igual a cero.
    validators: MyNumberValidator

Validator_codcar:
    class: sfPropelUniqueValidator
    param:
        class:        Forcargos
        column:       codcar
        unique_error: El registro ya Existe intente con otro.

Validator_MyString:
    class: sfStringValidator
    param:
        min:       2
        min_error: El Nombre no puede tener menos de 2 caracteres
        max:       100
        max_error: El Nombre no puede pasar mas de 100 caracteres

CodTipValidator:
    class: CidesaExistValidator
    param:
        class:    NpTipcar
        column:   codtipcar
        unique_error:   El C贸digo del Tipo de Cargo no existe.

CodGraValidator:
    class: CidesaExistValidator
    param:
        class:    Npcomocp
        column:   gracar
        unique_error:   El C贸digo del grado no existe.

MyNumberValidator:
    class: CidesaStringValidator
    param:
        values:    [ '/^([0-9]*(\.*([0-9]{2,}))*\,?[0-9]+|[0-9]+\,?[0-9]*)?$/' ]
