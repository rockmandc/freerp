<?php
// auto-generated by sfPropelAdmin
// date: 2007/05/30 18:33:23
?>
<?php

/**
 * autoAlmdespser actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoAlmdespser
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 3501 2007-02-18 10:28:17Z fabien $
 */
class autoAlmdespserActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('almdespser', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();

    $this->filters = $this->getUser()->getAttributeHolder()->getAll('sf_admin/cadphartser/filters');

    // pager
    $this->pager = new sfPropelPager('Cadphartser', 10);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', 1));
    $this->pager->init();
  }

  public function executeCreate()
  {
    return $this->forward('almdespser', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('almdespser', 'edit');
  }

  public function executeEdit()
  {
    $this->cadphartser = $this->getCadphartserOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updateCadphartserFromRequest();

      $this->saveCadphartser($this->cadphartser);

      $this->setFlash('notice', 'Your modifications have been saved');
$this->Bitacora('Guardo');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('almdespser/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('almdespser/list');
      }
      else
      {
        return $this->redirect('almdespser/edit?id='.$this->cadphartser->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->cadphartser = CadphartserPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->cadphartser);

    try
    {
      $this->deleteCadphartser($this->cadphartser);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Cadphartser. Make sure it does not have any associated items.');
      return $this->forward('almdespser', 'list');
    }

    return $this->redirect('almdespser/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->cadphartser = $this->getCadphartserOrCreate();
    $this->updateCadphartserFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function saveCadphartser($cadphartser)
  {
    $cadphartser->save();

  }

  protected function deleteCadphartser($cadphartser)
  {
    $cadphartser->delete();
  }

  protected function updateCadphartserFromRequest()
  {
    $cadphartser = $this->getRequestParameter('cadphartser');

    if (isset($cadphartser['dphart']))
    {
      $this->cadphartser->setDphart($cadphartser['dphart']);
    }
    if (isset($cadphartser['desdph']))
    {
      $this->cadphartser->setDesdph($cadphartser['desdph']);
    }
    if (isset($cadphartser['reqart']))
    {
      $this->cadphartser->setReqart($cadphartser['reqart']);
    }
    if (isset($cadphartser['fecdph']))
    {
      if ($cadphartser['fecdph'])
      {
        try
        {
          $dateFormat = new sfDateFormat($this->getUser()->getCulture());
                              if (!is_array($cadphartser['fecdph']))
          {
            $value = $dateFormat->format($cadphartser['fecdph'], 'i', $dateFormat->getInputPattern('d'));
          }
          else
          {
            $value_array = $cadphartser['fecdph'];
            $value = $value_array['year'].'-'.$value_array['month'].'-'.$value_array['day'].(isset($value_array['hour']) ? ' '.$value_array['hour'].':'.$value_array['minute'].(isset($value_array['second']) ? ':'.$value_array['second'] : '') : '');
          }
          $this->cadphartser->setFecdph($value);
        }
        catch (sfException $e)
        {
          // not a date
        }
      }
      else
      {
        $this->cadphartser->setFecdph(null);
      }
    }
    if (isset($cadphartser['codori']))
    {
      $this->cadphartser->setCodori($cadphartser['codori']);
    }
    if (isset($cadphartser['stadph']))
    {
      $this->cadphartser->setStadph($cadphartser['stadph']);
    }
  }

  protected function getCadphartserOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $cadphartser = new Cadphartser();
    }
    else
    {
      $cadphartser = CadphartserPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($cadphartser);
    }

    return $cadphartser;
  }

  protected function processFilters()
  {
    if ($this->getRequest()->hasParameter('filter'))
    {
      $filters = $this->getRequestParameter('filters');
      if (isset($filters['fecdph']['from']) && $filters['fecdph']['from'] !== '')
      {
        $filters['fecdph']['from'] = sfI18N::getTimestampForCulture($filters['fecdph']['from'], $this->getUser()->getCulture());
      }
      if (isset($filters['fecdph']['to']) && $filters['fecdph']['to'] !== '')
      {
        $filters['fecdph']['to'] = sfI18N::getTimestampForCulture($filters['fecdph']['to'], $this->getUser()->getCulture());
      }

      $this->getUser()->getAttributeHolder()->removeNamespace('sf_admin/cadphartser/filters');
      $this->getUser()->getAttributeHolder()->add($filters, 'sf_admin/cadphartser/filters');
    }
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/cadphartser/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/cadphartser/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/cadphartser/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
    if (isset($this->filters['dphart_is_empty']))
    {
      $criterion = $c->getNewCriterion(CadphartserPeer::DPHART, '');
      $criterion->addOr($c->getNewCriterion(CadphartserPeer::DPHART, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['dphart']) && $this->filters['dphart'] !== '')
    {
      $c->add(CadphartserPeer::DPHART, strtr($this->filters['dphart'], '*', '%'), Criteria::LIKE);
    }
    if (isset($this->filters['desdph_is_empty']))
    {
      $criterion = $c->getNewCriterion(CadphartserPeer::DESDPH, '');
      $criterion->addOr($c->getNewCriterion(CadphartserPeer::DESDPH, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['desdph']) && $this->filters['desdph'] !== '')
    {
      $c->add(CadphartserPeer::DESDPH, strtr($this->filters['desdph'], '*', '%'), Criteria::LIKE);
    }
    if (isset($this->filters['fecdph_is_empty']))
    {
      $criterion = $c->getNewCriterion(CadphartserPeer::FECDPH, '');
      $criterion->addOr($c->getNewCriterion(CadphartserPeer::FECDPH, null, Criteria::ISNULL));
      $c->add($criterion);
    }
    else if (isset($this->filters['fecdph']))
    {
      if (isset($this->filters['fecdph']['from']) && $this->filters['fecdph']['from'] !== '')
      {
        $criterion = $c->getNewCriterion(CadphartserPeer::FECDPH, date('Y-m-d', $this->filters['fecdph']['from']), Criteria::GREATER_EQUAL);
      }
      if (isset($this->filters['fecdph']['to']) && $this->filters['fecdph']['to'] !== '')
      {
        if (isset($criterion))
        {
          $criterion->addAnd($c->getNewCriterion(CadphartserPeer::FECDPH, date('Y-m-d', $this->filters['fecdph']['to']), Criteria::LESS_EQUAL));
        }
        else
        {
          $criterion = $c->getNewCriterion(CadphartserPeer::FECDPH, date('Y-m-d', $this->filters['fecdph']['to']), Criteria::LESS_EQUAL);
        }
      }

      if (isset($criterion))
      {
        $c->add($criterion);
      }
    }
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/cadphartser/sort'))
    {
      $sort_column = CadphartserPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/cadphartser/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'cadphartser{dphart}' => 'Numero:',
      'cadphartser{desdph}' => 'Descripcion:',
      'cadphartser{reqart}' => 'Refiere a Requisicion:',
      'cadphartser{fecdph}' => 'Fecha:',
      'cadphartser{codori}' => 'Codigo de Origen:',
      'cadphartser{stadph}' => 'Stadph:',
    );
  }
}
