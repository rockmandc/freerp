methods:
  post:
   - "liptocue{codempadm}"
   - "liptocue{codempeje}"
   - "liptocue{numptocue}"
   - "liptocue{numemo}"
   - "liptocue{fecreg}"
   - "liptocue{dias}"
   - "liptocue{fecven}"
   - "liptocue{despro}"

names:
  liptocue{codempadm}:
    required:  Yes
    required_msg: Este campo no puede estar en Blanco
    validators: Validator_codemp

  liptocue{codempeje}:
    required:  Yes
    required_msg: Este campo no puede estar en Blanco
    validators: Validator_codemp

  liptocue{numptocue}:
    required:  Yes
    required_msg: Este campo no puede estar en Blanco
    validators: Validator_numptocue

  liptocue{numemo}:
    required:  Yes
    required_msg: Este campo no puede estar en Blanco
    validators: Validator_numemo

  liptocue{fecreg}:
    required:  Yes
    required_msg: Este campo no puede estar en Blanco
    validators: FechaValidator

  liptocue{dias}:
    required:  Yes
    required_msg: Este campo no puede estar en Blanco
    validators: MyNumberValidator

  liptocue{fecven}:
    required:  Yes
    required_msg: Este campo no puede estar en Blanco
    validators: FechaValidator

  liptocue{despro}:
    required:  Yes
    required_msg: Este campo no puede estar en Blanco
    validators: Validator_despro

Validator_codemp:
    class: CidesaExistValidator
    param:
        class:        Lidatste
        column:       codemp
        unique_error: El Empleado no existe

Validator_numptocue:
    class: sfPropelUniqueValidator
    param:
        class:        Liptocue
        column:       numptocue
        unique_error: El numero ya existe no puede repetirse

Validator_numemo:
    class: CidesaExistValidator
    param:
        class:        Limemoran
        column:       numemo
        unique_error: El Número de Memorando no Existe

Validator_despro:
    class: sfStringValidator
    param:
        min:       2
        min_error: La descripción no puede tener menos de 2 caracteres
        max:       1000
        max_error: La descripción no puede pasar mas de 1000 caracteres

FechaValidator:
    class: sfRegexValidator
    param:
        match:      yes
        pattern:    /^(3[01]|2?[0-9]|1?[0-9]|0?[1-9]|[12]d)\/(0?[1-9]|1[012])\/(\d{4})$/
        match_error: La Fecha  introducida es invalida

MyNumberValidator:
    class: CidesaStringValidator
    param:
        values:    [ '/^[0-9]*$/' ]